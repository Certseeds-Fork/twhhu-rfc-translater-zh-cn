{
  "title": {
    "text": "RFC 2759:  Microsoft PPP CHAP Extensions, Version 2 ",
    "zh-CHS": "RFC 2759"
  },
  "number": 2759,
  "created_at": "2021-10-24 10:49:32.841131+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                            G. Zorn\nRequest for Comments: 2759                         Microsoft Corporation\nCategory: Informational                                     January 2000",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 16,
      "text": "Microsoft PPP CHAP Extensions, Version 2",
      "zh-CHS": "Microsoft PPP CHAP扩展，第2版"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "zh-CHS": "本备忘录的状况"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "zh-CHS": "本备忘录为互联网社区提供信息。它没有规定任何类型的互联网标准。本备忘录的分发不受限制。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "zh-CHS": "版权公告"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "zh-CHS": "版权所有（C）互联网协会（2000年）。版权所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "zh-CHS": "摘要"
    },
    {
      "indent": 3,
      "text": "The Point-to-Point Protocol (PPP) [1] provides a standard method for transporting multi-protocol datagrams over point-to-point links. PPP defines an extensible Link Control Protocol and a family of Network Control Protocols (NCPs) for establishing and configuring different network-layer protocols.",
      "zh-CHS": "点到点协议（PPP）[1]提供了通过点到点链路传输多协议数据报的标准方法。PPP定义了一个可扩展链路控制协议和一系列网络控制协议（NCP），用于建立和配置不同的网络层协议。"
    },
    {
      "indent": 3,
      "text": "This document describes version two of Microsoft's PPP CHAP dialect (MS-CHAP-V2). MS-CHAP-V2 is similar to, but incompatible with, MS-CHAP version one (MS-CHAP-V1, described in [9]). In particular, certain protocol fields have been deleted or reused but with different semantics. In addition, MS-CHAP-V2 features mutual authentication.",
      "zh-CHS": "本文档介绍了Microsoft PPP CHAP方言（MS-CHAP-V2）的第二版。MS-CHAP-V2与MS-CHAP版本1（MS-CHAP-V1，如[9]所述）相似，但不兼容。特别是，某些协议字段已被删除或重用，但语义不同。此外，MS-CHAP-V2还具有相互身份验证功能。"
    },
    {
      "indent": 3,
      "text": "The algorithms used in the generation of various MS-CHAP-V2 protocol fields are described in section 8. Negotiation and hash generation examples are provided in section 9.",
      "zh-CHS": "第8节描述了生成各种MS-CHAP-V2协议字段时使用的算法。协商和散列生成示例见第9节。"
    },
    {
      "indent": 0,
      "text": "Specification of Requirements",
      "zh-CHS": "需求说明"
    },
    {
      "indent": 3,
      "text": "In this document, the key words \"MAY\", \"MUST, \"MUST NOT\", \"optional\", \"recommended\", \"SHOULD\", and \"SHOULD NOT\" are to be interpreted as described in [3].",
      "zh-CHS": "在本文件中，关键词“可能”、“必须”、“不得”、“可选”、“建议”、“应该”和“不应该”的解释如[3]所述。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "zh-CHS": "目录"
    },
    {
      "indent": 3,
      "text": "1. Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3\n2. LCP Configuration . . . . . . . . . . . . . . . . . . . . . . .  3\n3. Challenge Packet  . . . . . . . . . . . . . . . . . . . . . . .  3\n4. Response Packet . . . . . . . . . . . . . . . . . . . . . . . .  4\n5. Success Packet  . . . . . . . . . . . . . . . . . . . . . . . .  4\n6. Failure Packet  . . . . . . . . . . . . . . . . . . . . . . . .  5\n7. Change-Password Packet  . . . . . . . . . . . . . . . . . . . .  6\n8. Pseudocode  . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n8.1. GenerateNTResponse()  . . . . . . . . . . . . . . . . . . . .  7\n8.2. ChallengeHash() . . . . . . . . . . . . . . . . . . . . . . .  8\n8.3. NtPasswordHash()  . . . . . . . . . . . . . . . . . . . . . .  9\n8.4. HashNtPasswordHash()  . . . . . . . . . . . . . . . . . . . .  9\n8.5. ChallengeResponse() . . . . . . . . . . . . . . . . . . . . .  9\n8.6. DesEncrypt()  . . . . . . . . . . . . . . . . . . . . . . . . 10\n8.7. GenerateAuthenticatorResponse() . . . . . . . . . . . . . . . 10\n8.8. CheckAuthenticatorResponse()  . . . . . . . . . . . . . . . . 12\n8.9. NewPasswordEncryptedWithOldNtPasswordHash() . . . . . . . . . 12\n8.10. EncryptPwBlockWithPasswordHash() . . . . . . . . . . . . . . 13\n8.11. Rc4Encrypt() . . . . . . . . . . . . . . . . . . . . . . . . 13\n8.12. OldNtPasswordHashEncryptedWithNewNtPasswordHash()  . . . . . 14\n8.13. NtPasswordHashEncryptedWithBlock() . . . . . . . . . . . . . 14\n9. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n9.1. Negotiation Examples  . . . . . . . . . . . . . . . . . . . . 14\n9.1.1. Successful authentication . . . . . . . . . . . . . . . . . 15\n9.1.2. Authenticator authentication failure  . . . . . . . . . . . 15\n9.1.3. Failed authentication with no retry allowed . . . . . . . . 15\n9.1.4. Successful authentication after retry . . . . . . . . . . . 15\n9.1.5. Failed hack attack with 3 attempts allowed  . . . . . . . . 15\n9.1.6. Successful authentication with password change  . . . . . . 16\n9.1.7. Successful authentication with retry and password change. . 16\n9.2. Hash Example  . . . . . . . . . . . . . . . . . . . . . . . . 16\n9.3. Example of DES Key Generation . . . . . . . . . . . . . . . . 17\n10. Security Considerations  . . . . . . . . . . . . . . . . . . . 17\n11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n12. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 19\n13. Author's Address . . . . . . . . . . . . . . . . . . . . . . . 19\n14. Full Copyright Statement . . . . . . . . . . . . . . . . . . . 20",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "zh-CHS": "1. 介绍"
    },
    {
      "indent": 3,
      "text": "Where possible, MS-CHAP-V2 is consistent with both MS-CHAP-V1 and standard CHAP. Briefly, the differences between MS-CHAP-V2 and MS-CHAP-V1 are:",
      "zh-CHS": "在可能的情况下，MS-CHAP-V2与MS-CHAP-V1和标准CHAP一致。简而言之，MS-CHAP-V2和MS-CHAP-V1之间的区别如下："
    },
    {
      "indent": 3,
      "text": "* MS-CHAP-V2 is enabled by negotiating CHAP Algorithm 0x81 in LCP option 3, Authentication Protocol.",
      "zh-CHS": "* MS-CHAP-V2通过协商LCP选项3“身份验证协议”中的CHAP算法0x81启用。"
    },
    {
      "indent": 3,
      "text": "* MS-CHAP-V2 provides mutual authentication between peers by piggybacking a peer challenge on the Response packet and an authenticator response on the Success packet.",
      "zh-CHS": "* MS-CHAP-V2通过在响应数据包上搭载对等质询和在成功数据包上搭载验证器响应，在对等方之间提供相互认证。"
    },
    {
      "indent": 3,
      "text": "* The calculation of the \"Windows NT compatible challenge response\" sub-field in the Response packet has been changed to include the peer challenge and the user name.",
      "zh-CHS": "* 响应数据包中“Windows NT compatible challenge response”子字段的计算已更改为包括对等质询和用户名。"
    },
    {
      "indent": 3,
      "text": "* In MS-CHAP-V1, the \"LAN Manager compatible challenge response\" sub-field was always sent in the Response packet. This field has been replaced in MS-CHAP-V2 by the Peer-Challenge field.",
      "zh-CHS": "* 在MS-CHAP-V1中，“LAN Manager兼容质询响应”子字段始终在响应数据包中发送。在MS-CHAP-V2中，此字段已被对等质询字段替换。"
    },
    {
      "indent": 3,
      "text": "* The format of the Message field in the Failure packet has been changed.",
      "zh-CHS": "* 故障数据包中消息字段的格式已更改。"
    },
    {
      "indent": 3,
      "text": "* The Change Password (version 1) and Change Password (version 2) packets are no longer supported. They have been replaced with a single Change-Password packet.",
      "zh-CHS": "* 不再支持更改密码（版本1）和更改密码（版本2）数据包。它们已被替换为单个更改密码包。"
    },
    {
      "indent": 0,
      "text": "2. LCP Configuration",
      "section_title": true,
      "zh-CHS": "2. LCP配置"
    },
    {
      "indent": 3,
      "text": "The LCP configuration for MS-CHAP-V2 is identical to that for standard CHAP, except that the Algorithm field has value 0x81, rather than the MD5 value 0x05. PPP implementations which do not support MS-CHAP-V2, but correctly implement LCP Config-Rej, should have no problem dealing with this non-standard option.",
      "zh-CHS": "MS-CHAP-V2的LCP配置与标准CHAP相同，只是算法字段的值为0x81，而不是MD5值0x05。不支持MS-CHAP-V2，但正确实现LCP Config Rej的PPP实现在处理此非标准选项时应该没有问题。"
    },
    {
      "indent": 0,
      "text": "3. Challenge Packet",
      "section_title": true,
      "zh-CHS": "3. 挑战包"
    },
    {
      "indent": 3,
      "text": "The MS-CHAP-V2 Challenge packet is identical in format to the standard CHAP Challenge packet.",
      "zh-CHS": "MS-CHAP-V2质询数据包的格式与标准CHAP质询数据包的格式相同。"
    },
    {
      "indent": 3,
      "text": "MS-CHAP-V2 authenticators send an 16-octet challenge Value field. Peers need not duplicate Microsoft's algorithm for selecting the 16- octet value, but the standard guidelines on randomness [1,2,7] SHOULD be observed.",
      "zh-CHS": "MS-CHAP-V2身份验证程序发送16个八位字节的质询值字段。同行不需要重复微软的算法来选择16个八位组的值，但是应该遵守随机性的标准准则[1,2,7]。"
    },
    {
      "indent": 3,
      "text": "Microsoft authenticators do not currently provide information in the Name field. This may change in the future.",
      "zh-CHS": "Microsoft验证器当前不在名称字段中提供信息。这在将来可能会改变。"
    },
    {
      "indent": 0,
      "text": "4. Response Packet",
      "section_title": true,
      "zh-CHS": "4. 响应包"
    },
    {
      "indent": 3,
      "text": "The MS-CHAP-V2 Response packet is identical in format to the standard CHAP Response packet. However, the Value field is sub-formatted differently as follows:",
      "zh-CHS": "MS-CHAP-V2响应数据包的格式与标准CHAP响应数据包的格式相同。但是，值字段的子格式不同，如下所示："
    },
    {
      "indent": 3,
      "text": "16 octets: Peer-Challenge 8 octets: Reserved, must be zero 24 octets: NT-Response 1 octet : Flags",
      "zh-CHS": "16个八位字节：对等挑战8个八位字节：保留，必须为零24个八位字节：NT响应1个八位字节：标志"
    },
    {
      "indent": 3,
      "text": "The Peer-Challenge field is a 16-octet random number. As the name implies, it is generated by the peer and is used in the calculation of the NT-Response field, below. Peers need not duplicate Microsoft's algorithm for selecting the 16-octet value, but the standard guidelines on randomness [1,2,7] SHOULD be observed.",
      "zh-CHS": "对等质询字段是一个16个八位组的随机数。顾名思义，它由对等方生成，并用于计算NT响应字段，如下所示。同行无需重复微软选择16个八位组值的算法，但应遵守随机性标准指南[1,2,7]。"
    },
    {
      "indent": 3,
      "text": "The NT-Response field is an encoded function of the password, the user name, the contents of the Peer-Challenge field and the received challenge as output by the routine GenerateNTResponse() (see section 8.1, below). The Windows NT password is a string of 0 to (theoretically) 256 case-sensitive Unicode [8] characters. Current versions of Windows NT limit passwords to 14 characters, mainly for compatibility reasons; this may change in the future. When computing the NT-Response field contents, only the user name is used, without any associated Windows NT domain name. This is true regardless of whether a Windows NT domain name is present in the Name field (see below).",
      "zh-CHS": "NT响应字段是密码、用户名、对等质询字段的内容和接收到的质询的编码函数，作为例程GeneraterResponse（）的输出（参见下面第8.1节）。Windows NT密码是由0到（理论上）256个区分大小写的Unicode[8]字符组成的字符串。当前版本的Windows NT将密码限制为14个字符，主要是出于兼容性原因；这在将来可能会改变。计算NT响应字段内容时，只使用用户名，不使用任何关联的Windows NT域名。无论名称字段中是否存在Windows NT域名（请参见下文），这都是正确的。"
    },
    {
      "indent": 3,
      "text": "The Flag field is reserved for future use and MUST be zero.",
      "zh-CHS": "标志字段保留供将来使用，并且必须为零。"
    },
    {
      "indent": 3,
      "text": "The Name field is a string of 0 to (theoretically) 256 case-sensitive ASCII characters which identifies the peer's user account name. The Windows NT domain name may prefix the user's account name (e.g. \"BIGCO\\johndoe\" where \"BIGCO\" is a Windows NT domain containing the user account \"johndoe\"). If a domain is not provided, the backslash should also be omitted, (e.g. \"johndoe\").",
      "zh-CHS": "名称字段是一个由0到（理论上）256个区分大小写的ASCII字符组成的字符串，用于标识对等方的用户帐户名称。Windows NT域名可以作为用户帐户名的前缀（例如，“BIGCO\\johndoe”，其中“BIGCO”是包含用户帐户“johndoe”的Windows NT域）。如果未提供域，还应省略反斜杠（例如“johndoe”）。"
    },
    {
      "indent": 0,
      "text": "5. Success Packet",
      "section_title": true,
      "zh-CHS": "5. 成功包"
    },
    {
      "indent": 3,
      "text": "The Success packet is identical in format to the standard CHAP Success packet. However, the Message field contains a 42-octet authenticator response string and a printable message. The format of the message field is illustrated below.",
      "zh-CHS": "成功数据包的格式与标准CHAP成功数据包的格式相同。但是，消息字段包含42个八位字节的验证器响应字符串和可打印消息。消息字段的格式如下所示。"
    },
    {
      "indent": 3,
      "text": "\"S=<auth_string> M=<message>\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The <auth_string> quantity is a 20 octet number encoded in ASCII as 40 hexadecimal digits. The hexadecimal digits A-F (if present) MUST be uppercase. This number is derived from the challenge from the Challenge packet, the Peer-Challenge and NT-Response fields from the Response packet, and the peer password as output by the routine GenerateAuthenticatorResponse() (see section 8.7, below). The authenticating peer MUST verify the authenticator response when a Success packet is received. The method for verifying the authenticator is described in section 8.8, below. If the authenticator response is either missing or incorrect, the peer MUST end the session.",
      "zh-CHS": "<auth_string>数量是一个20个八位组的数字，用ASCII编码为40个十六进制数字。十六进制数字A-F（如果存在）必须为大写。该数字来源于来自质询数据包的质询、来自响应数据包的对等质询和NT响应字段，以及由例程GenerateAuthenticatorResponse（）输出的对等密码（见下文第8.7节）。当接收到成功数据包时，身份验证对等方必须验证验证器响应。下面第8.8节描述了验证验证器的方法。如果验证器响应缺失或不正确，对等方必须结束会话。"
    },
    {
      "indent": 3,
      "text": "The <message> quantity is human-readable text in the appropriate charset and language [12].",
      "zh-CHS": "<message>数量是适当字符集和语言的人类可读文本[12]。"
    },
    {
      "indent": 0,
      "text": "6. Failure Packet",
      "section_title": true,
      "zh-CHS": "6. 故障包"
    },
    {
      "indent": 3,
      "text": "The Failure packet is identical in format to the standard CHAP Failure packet. There is, however, formatted text stored in the Message field which, contrary to the standard CHAP rules, does affect the operation of the protocol. The Message field format is:",
      "zh-CHS": "故障数据包的格式与标准CHAP故障数据包的格式相同。但是，与标准CHAP规则相反，消息字段中存储的格式化文本确实会影响协议的操作。消息字段格式为："
    },
    {
      "indent": 0,
      "text": "      \"E=eeeeeeeeee R=r C=cccccccccccccccccccccccccccccccc V=vvvvvvvvvv\nM=<msg>\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "where",
      "zh-CHS": "哪里"
    },
    {
      "indent": 6,
      "text": "The \"eeeeeeeeee\" is the ASCII representation of a decimal error code (need not be 10 digits) corresponding to one of those listed below, though implementations should deal with codes not on this list gracefully.",
      "zh-CHS": "“EEEE”是十进制错误代码（不需要是10位数字）的ASCII表示形式，对应于下面列出的其中一个错误代码，尽管实现应该优雅地处理不在此列表中的代码。"
    },
    {
      "indent": 9,
      "text": "646 ERROR_RESTRICTED_LOGON_HOURS 647 ERROR_ACCT_DISABLED 648 ERROR_PASSWD_EXPIRED 649 ERROR_NO_DIALIN_PERMISSION 691 ERROR_AUTHENTICATION_FAILURE 709 ERROR_CHANGING_PASSWORD",
      "zh-CHS": "646错误\\u限制\\u登录\\u时间647错误\\u帐户\\u禁用648错误\\u密码\\u过期649错误\\u否\\u拨号\\u权限691错误\\u身份验证\\u失败709错误\\u更改密码"
    },
    {
      "indent": 6,
      "text": "The \"r\" is an ASCII flag set to '1' if a retry is allowed, and '0' if not. When the authenticator sets this flag to '1' it disables short timeouts, expecting the peer to prompt the user for new credentials and resubmit the response.",
      "zh-CHS": "“r”是一个ASCII标志，如果允许重试，则设置为“1”；如果不允许重试，则设置为“0”。当验证器将此标志设置为“1”时，它将禁用短超时，期望对等方提示用户输入新凭据并重新提交响应。"
    },
    {
      "indent": 6,
      "text": "The \"cccccccccccccccccccccccccccccccc\" is the ASCII representation of a hexadecimal challenge value. This field MUST be exactly 32 octets long and MUST be present.",
      "zh-CHS": "“CCCCCC”是十六进制质询值的ASCII表示形式。此字段的长度必须正好为32个八位字节，并且必须存在。"
    },
    {
      "indent": 6,
      "text": "The \"vvvvvvvvvv\" is the ASCII representation of a decimal version code (need not be 10 digits) indicating the password changing protocol version supported on the server. For MS-CHAP-V2, this value SHOULD always be 3.",
      "zh-CHS": "“VVV”是十进制版本代码（不需要是10位数字）的ASCII表示形式，表示服务器上支持的密码更改协议版本。对于MS-CHAP-V2，此值应始终为3。"
    },
    {
      "indent": 6,
      "text": "<msg> is human-readable text in the appropriate charset and language [12].",
      "zh-CHS": "<msg>是适当字符集和语言的人类可读文本[12]。"
    },
    {
      "indent": 0,
      "text": "7. Change-Password Packet",
      "section_title": true,
      "zh-CHS": "7. 更改密码包"
    },
    {
      "indent": 3,
      "text": "The Change-Password packet does not appear in either standard CHAP or MS-CHAP-V1. It allows the peer to change the password on the account specified in the preceding Response packet. The Change-Password packet should be sent only if the authenticator reports ERROR_PASSWD_EXPIRED (E=648) in the Message field of the Failure packet.",
      "zh-CHS": "更改密码数据包不会出现在标准CHAP或MS-CHAP-V1中。它允许对等方在前面的响应数据包中指定的帐户上更改密码。仅当验证器在失败数据包的消息字段中报告错误\\u PASSWD\\u EXPIRED（E=648）时，才应发送更改密码数据包。"
    },
    {
      "indent": 3,
      "text": "This packet type is supported by recent versions of Windows NT 4.0, Windows 95 and Windows 98. It is not supported by Windows NT 3.5, Windows NT 3.51, or early versions of Windows NT 4.0, Windows 95 and Windows 98.",
      "zh-CHS": "最新版本的Windows NT 4.0、Windows 95和Windows 98支持此数据包类型。Windows NT 3.5、Windows NT 3.51或早期版本的Windows NT 4.0、Windows 95和Windows 98不支持此功能。"
    },
    {
      "indent": 3,
      "text": "The format of this packet is as follows:",
      "zh-CHS": "此数据包的格式如下："
    },
    {
      "indent": 6,
      "text": " 1 octet : Code 1 octet : Identifier 2 octets : Length 516 octets : Encrypted-Password 16 octets : Encrypted-Hash 16 octets : Peer-Challenge 8 octets : Reserved 24 octets : NT-Response 2-octet : Flags",
      "zh-CHS": "1个八位组：代码1个八位组：标识符2个八位组：长度516个八位组：加密密码16个八位组：加密哈希16个八位组：对等质询8个八位组：保留24个八位组：NT响应2个八位组：标志"
    },
    {
      "indent": 3,
      "text": "Code 7",
      "zh-CHS": "代码7"
    },
    {
      "indent": 3,
      "text": "Identifier The Identifier field is one octet and aids in matching requests and replies. The value is the Identifier of the received Failure packet to which this packet responds plus 1.",
      "zh-CHS": "标识符标识符字段是一个八位字节，有助于匹配请求和答复。该值是该数据包响应的已接收故障数据包的标识符加1。"
    },
    {
      "indent": 3,
      "text": "Length 586",
      "zh-CHS": "长度586"
    },
    {
      "indent": 3,
      "text": "Encrypted-Password This field contains the PWBLOCK form of the new Windows NT password encrypted with the old Windows NT password hash, as output by the NewPasswordEncryptedWithOldNtPasswordHash() routine (see section 8.9, below).",
      "zh-CHS": "加密密码此字段包含由NewPasswordEncryptedWithOldNtPasswordHash（）例程输出的用旧Windows NT密码哈希加密的新Windows NT密码的PWBLOCK格式（请参阅下面的第8.9节）。"
    },
    {
      "indent": 3,
      "text": "Encrypted-Hash This field contains the old Windows NT password hash encrypted with the new Windows NT password hash, as output by the OldNtPasswordHashEncryptedWithNewNtPasswordHash() routine (see section 8.12, below).",
      "zh-CHS": "加密散列此字段包含由OldNtPasswordHashEncryptedWithNewNtPasswordHash（）例程输出的用新的Windows NT密码散列加密的旧Windows NT密码散列（见下面第8.12节）。"
    },
    {
      "indent": 3,
      "text": "Peer-Challenge A 16-octet random quantity, as described in the Response packet description.",
      "zh-CHS": "对等方质询16个八位组的随机量，如响应包描述中所述。"
    },
    {
      "indent": 3,
      "text": "Reserved 8 octets, must be zero.",
      "zh-CHS": "保留8个八位字节，必须为零。"
    },
    {
      "indent": 3,
      "text": "NT-Response The NT-Response field (as described in the Response packet description), but calculated on the new password and the challenge received in the Failure packet.",
      "zh-CHS": "NT响应NT响应字段（如响应数据包描述中所述），但根据新密码和故障数据包中接收到的质询进行计算。"
    },
    {
      "indent": 3,
      "text": "Flags This field is two octets in length. It is a bit field of option flags where 0 is the least significant bit of the 16-bit quantity. The format of this field is illustrated in the following diagram:",
      "zh-CHS": "标志此字段的长度为两个八位字节。它是选项标志的位字段，其中0是16位量的最低有效位。该字段的格式如下图所示："
    },
    {
      "indent": 9,
      "text": "           1\n 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "Bits 0-15 Reserved, always clear (0).",
      "zh-CHS": "保留位0-15，始终清除（0）。"
    },
    {
      "indent": 0,
      "text": "8. Pseudocode",
      "section_title": true,
      "zh-CHS": "8. 伪码"
    },
    {
      "indent": 3,
      "text": "The routines mentioned in the text above are described in pseudocode in the following sections.",
      "zh-CHS": "上文提到的例程将在以下部分中以伪代码进行描述。"
    },
    {
      "indent": 0,
      "text": "8.1. GenerateNTResponse()",
      "section_title": true,
      "zh-CHS": "8.1. 生成响应（）"
    },
    {
      "indent": 3,
      "text": "GenerateNTResponse( IN 16-octet AuthenticatorChallenge, IN 16-octet PeerChallenge,",
      "zh-CHS": "GenerateResponse（在16个八位字节的验证器挑战中，在16个八位字节的PeerChallenge中，"
    },
    {
      "indent": 3,
      "text": "IN 0-to-256-char UserName,",
      "zh-CHS": "在0到256字符的用户名中，"
    },
    {
      "indent": 3,
      "text": "IN 0-to-256-unicode-char Password, OUT 24-octet Response ) { 8-octet Challenge 16-octet PasswordHash",
      "zh-CHS": "在0-to-256-unicode-char密码中，输出24个八位字节响应）{8个八位字节挑战16个八位字节密码哈希"
    },
    {
      "indent": 6,
      "text": "ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName, giving Challenge)",
      "zh-CHS": "ChallengeHash（PeerChallenge、AuthenticatorChallenge、UserName、giving Challenge）"
    },
    {
      "indent": 3,
      "text": " NtPasswordHash( Password, giving PasswordHash ) ChallengeResponse( Challenge, PasswordHash, giving Response ) }",
      "zh-CHS": "NtPasswordHash（密码，给出密码哈希）ChallengeResponse（质询，密码哈希，给出响应）}"
    },
    {
      "indent": 0,
      "text": "8.2. ChallengeHash()",
      "section_title": true,
      "zh-CHS": "8.2. 挑战者"
    },
    {
      "indent": 3,
      "text": "ChallengeHash( IN 16-octet PeerChallenge, IN 16-octet AuthenticatorChallenge, IN 0-to-256-char UserName, OUT 8-octet Challenge {",
      "zh-CHS": "ChallengeHash（在16个八位字节的PeerChallenge中，在16个八位字节的AuthenticatorChallenge中，在0到256个字符的用户名中，在8个八位字节的Challenge中{"
    },
    {
      "indent": 6,
      "text": "/*\n * SHAInit(), SHAUpdate() and SHAFinal() functions are an\n * implementation of Secure Hash Algorithm (SHA-1) [11]. These are\n * available in public domain or can be licensed from\n * RSA Data Security, Inc.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "SHAInit(Context) SHAUpdate(Context, PeerChallenge, 16) SHAUpdate(Context, AuthenticatorChallenge, 16)",
      "zh-CHS": "SHAInit（上下文）SHAUpdate（上下文，PeerChallenge，16）SHAUpdate（上下文，AuthenticatorChallenge，16）"
    },
    {
      "indent": 6,
      "text": "/*\n * Only the user name (as presented by the peer and\n * excluding any prepended domain name)\n * is used as input to SHAUpdate().\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": " SHAUpdate(Context, UserName, strlen(Username)) SHAFinal(Context, Digest) memcpy(Challenge, Digest, 8) }",
      "zh-CHS": "SHAUpdate（Context，UserName，strlen（UserName））SHAFinal（Context，Digest）memcpy（Challenge，Digest，8）}"
    },
    {
      "indent": 0,
      "text": "8.3. NtPasswordHash()",
      "section_title": true,
      "zh-CHS": "8.3. NtPasswordHash（）"
    },
    {
      "indent": 3,
      "text": "NtPasswordHash(\nIN  0-to-256-unicode-char Password,\nOUT 16-octet              PasswordHash )\n{\n   /*\n    * Use the MD4 algorithm [5] to irreversibly hash Password\n    * into PasswordHash.  Only the password is hashed without\n    * including any terminating 0.\n    */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.4. HashNtPasswordHash()",
      "section_title": true,
      "zh-CHS": "8.4. HashNtPasswordHash（）"
    },
    {
      "indent": 3,
      "text": "HashNtPasswordHash(\nIN  16-octet PasswordHash,\nOUT 16-octet PasswordHashHash )\n{\n   /*\n    * Use the MD4 algorithm [5] to irreversibly hash\n    * PasswordHash into PasswordHashHash.\n    */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.5. ChallengeResponse()",
      "section_title": true,
      "zh-CHS": "8.5. 挑战者响应（）"
    },
    {
      "indent": 3,
      "text": "ChallengeResponse( IN 8-octet Challenge, IN 16-octet PasswordHash, OUT 24-octet Response ) { Set ZPasswordHash to PasswordHash zero-padded to 21 octets",
      "zh-CHS": "ChallengeResponse（在8个八位字节的质询中，在16个八位字节的密码哈希中，在24个八位字节的响应中）{将ZPasswordHash设置为密码哈希零，填充为21个八位字节"
    },
    {
      "indent": 6,
      "text": "DesEncrypt( Challenge, 1st 7-octets of ZPasswordHash, giving 1st 8-octets of Response )",
      "zh-CHS": "去加密（质询，ZPasswordHash的前7个八位字节，给出前8个八位字节的响应）"
    },
    {
      "indent": 6,
      "text": "DesEncrypt( Challenge, 2nd 7-octets of ZPasswordHash, giving 2nd 8-octets of Response )",
      "zh-CHS": "去加密（质询，ZPasswordHash的第二个7字节，给出第二个8字节的响应）"
    },
    {
      "indent": 3,
      "text": " DesEncrypt( Challenge, 3rd 7-octets of ZPasswordHash, giving 3rd 8-octets of Response ) }",
      "zh-CHS": "去加密（挑战，ZPasswordHash的第三个7位字节，给出第三个8位字节的响应）}"
    },
    {
      "indent": 0,
      "text": "8.6. DesEncrypt()",
      "section_title": true,
      "zh-CHS": "8.6. DesEncrypt（）"
    },
    {
      "indent": 3,
      "text": "DesEncrypt(\nIN  8-octet Clear,\nIN  7-octet Key,\nOUT 8-octet Cypher )\n{\n   /*\n    * Use the DES encryption algorithm [4] in ECB mode [10]\n    * to encrypt Clear into Cypher such that Cypher can\n    * only be decrypted back to Clear by providing Key.\n    * Note that the DES algorithm takes as input a 64-bit\n    * stream where the 8th, 16th, 24th, etc.  bits are\n    * parity bits ignored by the encrypting algorithm.\n    * Unless you write your own DES to accept 56-bit input\n    * without parity, you will need to insert the parity bits\n    * yourself.\n    */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.7. GenerateAuthenticatorResponse()",
      "section_title": true,
      "zh-CHS": "8.7. GenerateAuthenticatorResponse（）"
    },
    {
      "indent": 3,
      "text": "GenerateAuthenticatorResponse( IN 0-to-256-unicode-char Password, IN 24-octet NT-Response, IN 16-octet PeerChallenge, IN 16-octet AuthenticatorChallenge, IN 0-to-256-char UserName, OUT 42-octet AuthenticatorResponse ) { 16-octet PasswordHash 16-octet PasswordHashHash 8-octet Challenge",
      "zh-CHS": "GenerateAuthenticatorResponse（0-to-256-unicode-char密码、24个八位字节的NT响应、16个八位字节的PeerChallenge、16个八位字节的AuthenticatorChallenge、0-to-256-char用户名、42个八位字节的AuthenticatorResponse）{16个八位字节的密码hash 8个八位字节的挑战"
    },
    {
      "indent": 6,
      "text": "/*\n * \"Magic\" constants used in response generation\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "Magic1[39] = {0x4D, 0x61, 0x67, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74};",
      "zh-CHS": "Magic1[39]={0x4D、0x61、0x67、0x69、0x63、0x20、0x73、0x65、0x72、0x76、0x65、0x72、0x20、0x74、0x6F、0x20、0x63、0x6C、0x69、0x65、0x6E、0x74、0x20、0x73、0x69、0x67、0x6E、0x67、0x20、0x63、0x6F、0x6E、0x6E、0x6E、0x73、0x74、0x61、0x6E、0x74}；"
    },
    {
      "indent": 6,
      "text": "Magic2[41] = {0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B, 0x65, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E};",
      "zh-CHS": "Magic2[41]={0x50、0x61、0x64、0x20、0x74、0x6F、0x20、0x6D、0x61、0x6B、0x65、0x20、0x69、0x74、0x20、0x64、0x6F、0x20、0x6D、0x6F、0x72、0x65、0x20、0x68、0x61、0x6E、0x20、0x6F、0x6E、0x65、0x20、0x69、0x74、0x65、0x72、0x61、0x74、0x69、0x6F、0x6E}；"
    },
    {
      "indent": 6,
      "text": "/*\n * Hash the password with MD4\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "NtPasswordHash( Password, giving PasswordHash )",
      "zh-CHS": "NtPasswordHash（密码，给定密码哈希）"
    },
    {
      "indent": 6,
      "text": "/*\n * Now hash the hash\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "HashNtPasswordHash( PasswordHash, giving PasswordHashHash)",
      "zh-CHS": "HashNtPasswordHash（PasswordHash，给定PasswordHashHash）"
    },
    {
      "indent": 6,
      "text": "SHAInit(Context) SHAUpdate(Context, PasswordHashHash, 16) SHAUpdate(Context, NTResponse, 24) SHAUpdate(Context, Magic1, 39) SHAFinal(Context, Digest)",
      "zh-CHS": "SHAInit（Context）SHAUpdate（Context，PasswordHashHash，16）SHAUpdate（Context，NTResponse，24）SHAUpdate（Context，Magic1，39）SHAFinal（Context，Digest）"
    },
    {
      "indent": 6,
      "text": "ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName, giving Challenge)",
      "zh-CHS": "ChallengeHash（PeerChallenge、AuthenticatorChallenge、UserName、giving Challenge）"
    },
    {
      "indent": 6,
      "text": "SHAInit(Context) SHAUpdate(Context, Digest, 20) SHAUpdate(Context, Challenge, 8) SHAUpdate(Context, Magic2, 41) SHAFinal(Context, Digest)",
      "zh-CHS": "SHAInit（上下文）SHAUpdate（上下文，摘要，20）SHAUpdate（上下文，挑战，8）SHAUpdate（上下文，Magic2，41）SHAFinal（上下文，摘要）"
    },
    {
      "indent": 6,
      "text": "/*\n * Encode the value of 'Digest' as \"S=\" followed by\n * 40 ASCII hexadecimal digits and return it in\n * AuthenticatorResponse.\n * For example,\n *   \"S=0123456789ABCDEF0123456789ABCDEF01234567\"\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 0,
      "text": "8.8. CheckAuthenticatorResponse()",
      "section_title": true,
      "zh-CHS": "8.8. CheckAuthenticatorResponse（）"
    },
    {
      "indent": 3,
      "text": "CheckAuthenticatorResponse( IN 0-to-256-unicode-char Password, IN 24-octet NtResponse, IN 16-octet PeerChallenge, IN 16-octet AuthenticatorChallenge, IN 0-to-256-char UserName, IN 42-octet ReceivedResponse, OUT Boolean ResponseOK ) {",
      "zh-CHS": "CheckAuthenticatorResponse（0-to-256-unicode-char密码、24个八位字节的NtResponse、16个八位字节的PeerCallenge、16个八位字节的AuthenticatorChallenge、0-to-256-char用户名、42个八位字节的ReceivedResponse、OUT Boolean ResponseOK）{"
    },
    {
      "indent": 6,
      "text": "20-octet MyResponse",
      "zh-CHS": "20八位元MyResponse"
    },
    {
      "indent": 6,
      "text": "set ResponseOK = FALSE GenerateAuthenticatorResponse( Password, NtResponse, PeerChallenge, AuthenticatorChallenge, UserName, giving MyResponse)",
      "zh-CHS": "set-ResponseOK=FALSE GenerateAuthenticator响应（密码、NtResponse、PeerCallenge、Authenticator质询、用户名、给出MyResponse）"
    },
    {
      "indent": 3,
      "text": " if (MyResponse = ReceivedResponse) then set ResponseOK = TRUE return ResponseOK }",
      "zh-CHS": "如果（MyResponse=ReceivedResponse），则设置ResponseOK=TRUE返回ResponseOK}"
    },
    {
      "indent": 0,
      "text": "8.9. NewPasswordEncryptedWithOldNtPasswordHash()",
      "section_title": true,
      "zh-CHS": "8.9. NewPasswordEncryptedWithOldNtPasswordHash（）加密的新密码"
    },
    {
      "indent": 3,
      "text": "datatype-PWBLOCK\n{\n   256-unicode-char Password\n   4-octets         PasswordLength\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "NewPasswordEncryptedWithOldNtPasswordHash( IN 0-to-256-unicode-char NewPassword, IN 0-to-256-unicode-char OldPassword, OUT datatype-PWBLOCK EncryptedPwBlock ) { NtPasswordHash( OldPassword, giving PasswordHash )",
      "zh-CHS": "NewPasswordEncryptedWithOldNtPasswordHash（在0-to-256-unicode-char NewPassword中，在0-to-256-unicode-char OldPassword中，输出数据类型pBlock EncryptedPwBlock）{NtPasswordHash（OldPassword，给出PasswordHash）"
    },
    {
      "indent": 3,
      "text": " EncryptPwBlockWithPasswordHash( NewPassword, PasswordHash, giving EncryptedPwBlock ) }",
      "zh-CHS": "EncryptPwBlockWithPasswordHash（NewPassword、PasswordHash、giving EncryptedPwBlock）}"
    },
    {
      "indent": 0,
      "text": "8.10. EncryptPwBlockWithPasswordHash()",
      "section_title": true,
      "zh-CHS": "8.10. EncryptPwBlockWithPasswordHash（）"
    },
    {
      "indent": 3,
      "text": "EncryptPwBlockWithPasswordHash( IN 0-to-256-unicode-char Password, IN 16-octet PasswordHash, OUT datatype-PWBLOCK PwBlock ) {",
      "zh-CHS": "EncryptPwBlockWithPasswordHash（0-to-256-unicode-char密码，16位八位组密码哈希，输出数据类型PWBLOCK PWBLOCK）{"
    },
    {
      "indent": 6,
      "text": "Fill ClearPwBlock with random octet values",
      "zh-CHS": "用随机八位组值填充ClearPwBlock"
    },
    {
      "indent": 3,
      "text": "      PwSize = lstrlenW( Password ) * sizeof( unicode-char )\n      PwOffset = sizeof( ClearPwBlock.Password ) - PwSize\n      Move PwSize octets to (ClearPwBlock.Password + PwOffset ) from\nPassword\n      ClearPwBlock.PasswordLength = PwSize\n      Rc4Encrypt( ClearPwBlock,\n                  sizeof( ClearPwBlock ),\n                  PasswordHash,\n                  sizeof( PasswordHash ),\n                  giving PwBlock )\n   }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.11. Rc4Encrypt()",
      "section_title": true,
      "zh-CHS": "8.11. Rc4Encrypt（）"
    },
    {
      "indent": 3,
      "text": "Rc4Encrypt(\nIN  x-octet Clear,\nIN  integer ClearLength,\nIN  y-octet Key,\nIN  integer KeyLength,\nOUT x-octet Cypher )\n{\n   /*\n    * Use the RC4 encryption algorithm [6] to encrypt Clear of\n    * length ClearLength octets into a Cypher of the same length\n    * such that the Cypher can only be decrypted back to Clear\n    * by providing a Key of length KeyLength octets.\n    */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.12. OldNtPasswordHashEncryptedWithNewNtPasswordHash()",
      "section_title": true,
      "zh-CHS": "8.12. OldNtPasswordHashEncryptedWithNewNtPasswordHash（）"
    },
    {
      "indent": 3,
      "text": "OldNtPasswordHashEncryptedWithNewNtPasswordHash(\nIN  0-to-256-unicode-char NewPassword,\nIN  0-to-256-unicode-char OldPassword,\nOUT 16-octet              EncryptedPasswordHash )\n{\n   NtPasswordHash( OldPassword, giving OldPasswordHash )\n   NtPasswordHash( NewPassword, giving NewPasswordHash )\n   NtPasswordHashEncryptedWithBlock( OldPasswordHash,\n                                     NewPasswordHash,\n                                     giving EncryptedPasswordHash )\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8.13. NtPasswordHashEncryptedWithBlock()",
      "section_title": true,
      "zh-CHS": "8.13. NtPasswordHashEncryptedWithBlock（）"
    },
    {
      "indent": 3,
      "text": "NtPasswordHashEncryptedWithBlock( IN 16-octet PasswordHash, IN 16-octet Block, OUT 16-octet Cypher ) { DesEncrypt( 1st 8-octets PasswordHash, 1st 7-octets Block, giving 1st 8-octets Cypher )",
      "zh-CHS": "NtPasswordHashEncryptedWithBlock（在16个八位字节的密码哈希中，在16个八位字节的块中，输出16个八位字节的密码）{去加密（前8个八位字节的密码哈希，前7个八位字节的块，给出前8个八位字节的密码）"
    },
    {
      "indent": 3,
      "text": " DesEncrypt( 2nd 8-octets PasswordHash, 2nd 7-octets Block, giving 2nd 8-octets Cypher ) }",
      "zh-CHS": "去加密（第二个8-octets密码哈希，第二个7-octets块，给出第二个8-octets密码）}"
    },
    {
      "indent": 0,
      "text": "9. Examples",
      "section_title": true,
      "zh-CHS": "9. 例子"
    },
    {
      "indent": 3,
      "text": "The following sections include protocol negotiation and hash generation examples.",
      "zh-CHS": "以下部分包括协议协商和哈希生成示例。"
    },
    {
      "indent": 0,
      "text": "9.1. Negotiation Examples",
      "section_title": true,
      "zh-CHS": "9.1. 谈判实例"
    },
    {
      "indent": 3,
      "text": "Here are some examples of typical negotiations. The peer is on the left and the authenticator is on the right.",
      "zh-CHS": "以下是一些典型谈判的例子。对等方在左侧，验证器在右侧。"
    },
    {
      "indent": 3,
      "text": "The packet sequence ID is incremented on each authentication retry response and on the change password response. All cases where the packet sequence ID is updated are noted below.",
      "zh-CHS": "在每个身份验证重试响应和更改密码响应中，数据包序列ID都会增加。更新包序列ID的所有情况如下所示。"
    },
    {
      "indent": 3,
      "text": "Response retry is never allowed after Change Password. Change Password may occur after response retry.",
      "zh-CHS": "更改密码后不允许响应重试。在响应重试后可能会更改密码。"
    },
    {
      "indent": 0,
      "text": "9.1.1. Successful authentication",
      "section_title": true,
      "zh-CHS": "9.1.1. 成功验证"
    },
    {
      "indent": 7,
      "text": "                  <- Authenticator Challenge\nPeer Response/Challenge ->\n                  <- Success/Authenticator Response",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator Response verification succeeds, call continues)",
      "zh-CHS": "（验证器响应验证成功，呼叫继续）"
    },
    {
      "indent": 0,
      "text": "9.1.2. Authenticator authentication failure",
      "section_title": true,
      "zh-CHS": "9.1.2. 验证器身份验证失败"
    },
    {
      "indent": 7,
      "text": "                  <- Authenticator Challenge\nPeer Response/Challenge ->\n                  <- Success/Authenticator Response",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator Response verification fails, peer disconnects)",
      "zh-CHS": "（验证器响应验证失败，对等断开连接）"
    },
    {
      "indent": 0,
      "text": "9.1.3. Failed authentication with no retry allowed",
      "section_title": true,
      "zh-CHS": "9.1.3. 身份验证失败，不允许重试"
    },
    {
      "indent": 7,
      "text": "                  <- Authenticator Challenge\nPeer Response/Challenge ->\n                  <- Failure (E=691 R=0)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator disconnects)",
      "zh-CHS": "（验证器断开连接）"
    },
    {
      "indent": 0,
      "text": "9.1.4. Successful authentication after retry",
      "section_title": true,
      "zh-CHS": "9.1.4. 重试后验证成功"
    },
    {
      "indent": 7,
      "text": "                  <- Authenticator Challenge\nPeer Response/Challenge ->\n                  <- Failure (E=691 R=1), disable short timeout\nResponse (++ID) to challenge in failure message ->\n                  <- Success/Authenticator Response",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator Response verification succeeds, call continues)",
      "zh-CHS": "（验证器响应验证成功，呼叫继续）"
    },
    {
      "indent": 0,
      "text": "9.1.5. Failed hack attack with 3 attempts allowed",
      "section_title": true,
      "zh-CHS": "9.1.5. 黑客攻击失败，允许尝试3次"
    },
    {
      "indent": 7,
      "text": "                  <- Authenticator Challenge\nPeer Response/Challenge ->\n                  <- Failure (E=691 R=1), disable short timeout\nResponse (++ID) to challenge in Failure message ->\n                  <- Failure (E=691 R=1), disable short timeout\nResponse (++ID) to challenge in Failure message ->\n                  <- Failure (E=691 R=0)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "9.1.6. Successful authentication with password change",
      "section_title": true,
      "zh-CHS": "9.1.6. 通过密码更改成功进行身份验证"
    },
    {
      "indent": 3,
      "text": "                      <- Authenticator Challenge\n    Peer Response/Challenge ->\n                      <- Failure (E=648 R=0 V=3), disable short\ntimeout\n    ChangePassword (++ID) to challenge in Failure message ->\n                      <- Success/Authenticator Response",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator Response verification succeeds, call continues)",
      "zh-CHS": "（验证器响应验证成功，呼叫继续）"
    },
    {
      "indent": 0,
      "text": "9.1.7. Successful authentication with retry and password change",
      "section_title": true,
      "zh-CHS": "9.1.7. 通过重试和密码更改成功进行身份验证"
    },
    {
      "indent": 3,
      "text": "                      <- Authenticator Challenge\n    Peer Response/Challenge ->\n                      <- Failure (E=691 R=1), disable short timeout\n    Response (++ID) to first challenge+23 ->\n                      <- Failure (E=648 R=0 V=2), disable short\ntimeout\n    ChangePassword (++ID) to first challenge+23 ->\n                      <- Success/Authenticator Response",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "(Authenticator Response verification succeeds, call continues)",
      "zh-CHS": "（验证器响应验证成功，呼叫继续）"
    },
    {
      "indent": 0,
      "text": "9.2. Hash Example",
      "section_title": true,
      "zh-CHS": "9.2. 散列示例"
    },
    {
      "indent": 3,
      "text": "Intermediate values for user name \"User\" and password \"clientPass\". All numeric values are hexadecimal.",
      "zh-CHS": "用户名“user”和密码“clientPass”的中间值。所有数值均为十六进制。"
    },
    {
      "indent": 0,
      "text": "0-to-256-char UserName: 55 73 65 72",
      "zh-CHS": "0到256字符用户名：55 73 65 72"
    },
    {
      "indent": 0,
      "text": "0-to-256-unicode-char Password: 63 00 6C 00 69 00 65 00 6E 00 74 00 50 00 61 00 73 00 73 00",
      "zh-CHS": "0-to-256-unicode-char密码：63 00 6C 00 69 00 65 00 6E 00 74 00 50 00 61 00 73 00 73 00"
    },
    {
      "indent": 0,
      "text": "16-octet AuthenticatorChallenge: 5B 5D 7C 7D 7B 3F 2F 3E 3C 2C 60 21 32 26 26 28",
      "zh-CHS": "16八位字节验证器挑战：5B 5D 7C 7D 7B 3F 2F 3E 3C 60 21 32 26 28"
    },
    {
      "indent": 0,
      "text": "16-octet PeerChallenge: 21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E",
      "zh-CHS": "16八重奏对白：21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E"
    },
    {
      "indent": 0,
      "text": "8-octet Challenge: D0 2E 43 86 BC E9 12 26",
      "zh-CHS": "8-八重奏挑战：D0 2E 43 86 BC E9 12 26"
    },
    {
      "indent": 0,
      "text": "16-octet PasswordHash: 44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE",
      "zh-CHS": "16八位字节密码哈希：44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE"
    },
    {
      "indent": 0,
      "text": "24 octet NT-Response: 82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33 11 4A 3D 85 D6 DF",
      "zh-CHS": "24个八重奏NT应答：82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33 11 4A 3D 85 D6 DF"
    },
    {
      "indent": 0,
      "text": "16-octet PasswordHashHash: 41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F",
      "zh-CHS": "16八位字节密码哈希：41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F"
    },
    {
      "indent": 0,
      "text": "42-octet AuthenticatorResponse: \"S=407A5589115FD0D6209F510FE9C04566932CDA56\"",
      "zh-CHS": "42八位字节身份验证响应：“S=407A5589115FD0D6209F510FE9C04566932CDA56”"
    },
    {
      "indent": 0,
      "text": "9.3. Example of DES Key Generation",
      "section_title": true,
      "zh-CHS": "9.3. DES密钥生成示例"
    },
    {
      "indent": 3,
      "text": "DES uses 56-bit keys, expanded to 64 bits by the insertion of parity bits. After the parity of the key has been fixed, every eighth bit is a parity bit and the number of bits that are set (1) in each octet is odd; i.e., odd parity. Note that many DES engines do not check parity, however, simply stripping the parity bits. The following example illustrates the values resulting from the use of the password \"MyPw\" to generate a pair of DES keys (e.g., for use in the NtPasswordHashEncryptedWithBlock() described in section 8.13).",
      "zh-CHS": "DES使用56位键，通过插入奇偶校验位扩展到64位。在密钥的奇偶校验被固定后，每八位是奇偶校验位，并且在每个八位字节中设置（1）的位数是奇数；i、 奇偶校验。注意，许多DES引擎不检查奇偶校验，但是，只是剥离奇偶校验位。以下示例说明了使用密码“MyPw”生成一对DES密钥（例如，用于第8.13节所述的NtPasswordHashEncryptedWithBlock（）中）所产生的值。"
    },
    {
      "indent": 3,
      "text": "0-to-256-unicode-char Password: 4D 79 50 77",
      "zh-CHS": "0-to-256-unicode-char密码：4D 79 50 77"
    },
    {
      "indent": 3,
      "text": "16-octet PasswordHash: FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F 4E AC",
      "zh-CHS": "16个八位密码哈希：FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F 4E AC"
    },
    {
      "indent": 3,
      "text": "First \"raw\" DES key (initial 7 octets of password hash): FC 15 6A F7 ED CD 6C",
      "zh-CHS": "第一个“原始”DES密钥（密码散列的初始7个八位字节）：FC 15 6A F7 ED CD 6C"
    },
    {
      "indent": 3,
      "text": "First parity-corrected DES key (eight octets): FD 0B 5B 5E 7F 6E 34 D9",
      "zh-CHS": "第一个奇偶校验DES键（八个八位组）：FD0B5B5E7F6E34D9"
    },
    {
      "indent": 3,
      "text": "Second \"raw\" DES key (second 7 octets of password hash) 0E DD E3 33 7D 42 7F",
      "zh-CHS": "第二个“原始”DES密钥（密码散列的第二个7个八位字节）0E DD E3 33 7D 42 7F"
    },
    {
      "indent": 3,
      "text": "Second parity-corrected DES key (eight octets): 0E 6E 79 67 37 EA 08 FE",
      "zh-CHS": "第二奇偶校验DES键（八个八位组）：0E 6E 79 67 37 EA 08 FE"
    },
    {
      "indent": 0,
      "text": "10. Security Considerations",
      "section_title": true,
      "zh-CHS": "10. 安全考虑"
    },
    {
      "indent": 3,
      "text": "As an implementation detail, the authenticator SHOULD limit the number of password retries allowed to make brute-force password guessing attacks more difficult.",
      "zh-CHS": "作为一个实现细节，身份验证器应该限制允许的密码重试次数，以使暴力密码猜测攻击更加困难。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "zh-CHS": "11. 工具书类"
    },
    {
      "indent": 3,
      "text": "[1] Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD 51, RFC 1661, July 1994.",
      "zh-CHS": "[1] 辛普森，W.，“点对点协议（PPP）”，STD 51，RFC 1661994年7月。"
    },
    {
      "indent": 3,
      "text": "[2] Simpson, W., \"PPP Challenge Handshake Authentication Protocol (CHAP)\", RFC 1994, August 1996.",
      "zh-CHS": "[2] 辛普森，W.，“PPP挑战握手认证协议（CHAP）”，RFC 1994，1996年8月。"
    },
    {
      "indent": 3,
      "text": "[3] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "zh-CHS": "[3] Bradner，S.，“RFC中用于表示需求水平的关键词”，BCP 14，RFC 2119，1997年3月。"
    },
    {
      "indent": 3,
      "text": "[4] \"Data Encryption Standard (DES)\", Federal Information Processing Standard Publication 46-2, National Institute of Standards and Technology, December 1993.",
      "zh-CHS": "[4] “数据加密标准（DES）”，联邦信息处理标准出版物46-2，国家标准与技术研究所，1993年12月。"
    },
    {
      "indent": 3,
      "text": "[5] Rivest, R., \"MD4 Message Digest Algorithm\", RFC 1320, April 1992.",
      "zh-CHS": "[5] Rivest，R.，“MD4消息摘要算法”，RFC1320，1992年4月。"
    },
    {
      "indent": 3,
      "text": "[6] RC4 is a proprietary encryption algorithm available under license from RSA Data Security Inc. For licensing information, contact:",
      "zh-CHS": "[6] RC4是RSA Data Security Inc.许可下提供的专有加密算法。有关许可信息，请联系："
    },
    {
      "indent": 13,
      "text": "RSA Data Security, Inc. 100 Marine Parkway Redwood City, CA 94065-1031",
      "zh-CHS": "RSA Data Security，Inc.加利福尼亚州红木市海洋公园路100号，邮编94065-1031"
    },
    {
      "indent": 3,
      "text": "[7] Eastlake, D., Crocker, S. and J. Schiller, \"Randomness Recommendations for Security\", RFC 1750, December 1994.",
      "zh-CHS": "[7] Eastlake，D.，Crocker，S.和J.Schiller，“安全性的随机性建议”，RFC 1750，1994年12月。"
    },
    {
      "indent": 3,
      "text": "[8] \"The Unicode Standard, Version 2.0\", The Unicode Consortium, Addison-Wesley, 1996. ISBN 0-201-48345-9.",
      "zh-CHS": "[8] “Unicode标准，2.0版”，Unicode联盟，Addison-Wesley，1996年。ISBN 0-201-48345-9。"
    },
    {
      "indent": 3,
      "text": "[9] Zorn, G. and Cobb, S., \"Microsoft PPP CHAP Extensions\", RFC 2433, October 1998.",
      "zh-CHS": "[9] Zorn，G.和Cobb，S.，“微软PPP CHAP扩展”，RFC 2433，1998年10月。"
    },
    {
      "indent": 3,
      "text": "[10] \"DES Modes of Operation\", Federal Information Processing Standards Publication 81, National Institute of Standards and Technology, December 1980.",
      "zh-CHS": "[10] “DES操作模式”，联邦信息处理标准出版物81，国家标准与技术研究所，1980年12月。"
    },
    {
      "indent": 3,
      "text": "[11] \"Secure Hash Standard\", Federal Information Processing Standards Publication 180-1, National Institute of Standards and Technology, April 1995.",
      "zh-CHS": "[11] “安全散列标准”，联邦信息处理标准出版物180-1，国家标准与技术研究所，1995年4月。"
    },
    {
      "indent": 3,
      "text": "[12] Zorn, G., \"PPP LCP Internationalization Configuration Option\", RFC 2484, January 1999.",
      "zh-CHS": "[12] Zorn，G.“PPP LCP国际化配置选项”，RFC 2484，1999年1月。"
    },
    {
      "indent": 0,
      "text": "12. Acknowledgements",
      "section_title": true,
      "zh-CHS": "12. 致谢"
    },
    {
      "indent": 3,
      "text": "Thanks (in no particular order) to Bruce Johnson, Tony Bell, Paul Leach, Terence Spies, Dan Simon, Narendra Gidwani, Gurdeep Singh Pall, Jody Terrill, Brad Robel-Forrest, and Joe Davies for useful suggestions and feedback.",
      "zh-CHS": "感谢布鲁斯·约翰逊、托尼·贝尔、保罗·里奇、特伦斯·斯皮尔斯、丹·西蒙、纳伦德拉·吉德瓦尼、古迪普·辛格·帕尔、乔迪·泰瑞尔、布拉德·罗伯尔·福雷斯和乔·戴维斯（无特殊顺序）提供了有用的建议和反馈。"
    },
    {
      "indent": 0,
      "text": "13. Author's Address",
      "section_title": true,
      "zh-CHS": "13. 作者地址"
    },
    {
      "indent": 3,
      "text": "Questions about this memo can also be directed to:",
      "zh-CHS": "有关本备忘录的问题，请联系："
    },
    {
      "indent": 3,
      "text": "Glen Zorn Microsoft Corporation One Microsoft Way Redmond, Washington 98052",
      "zh-CHS": "格伦·佐恩微软公司华盛顿州雷德蒙微软大道一号，邮编：98052"
    },
    {
      "indent": 3,
      "text": "Phone: +1 425 703 1559\nFax:   +1 425 936 7329\nEMail: gwz@acm.org",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "14. Full Copyright Statement",
      "section_title": true,
      "zh-CHS": "14. 完整版权声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2000). All Rights Reserved.",
      "zh-CHS": "版权所有（C）互联网协会（2000年）。版权所有。"
    },
    {
      "indent": 3,
      "text": "This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Internet Society or other Internet organizations, except as needed for the purpose of developing Internet standards in which case the procedures for copyrights defined in the Internet Standards process must be followed, or as required to translate it into languages other than English.",
      "zh-CHS": "本文件及其译本可复制并提供给他人，对其进行评论或解释或协助其实施的衍生作品可全部或部分编制、复制、出版和分发，不受任何限制，前提是上述版权声明和本段包含在所有此类副本和衍生作品中。但是，不得以任何方式修改本文件本身，例如删除版权通知或对互联网协会或其他互联网组织的引用，除非出于制定互联网标准的需要，在这种情况下，必须遵循互联网标准过程中定义的版权程序，或根据需要将其翻译成英语以外的其他语言。"
    },
    {
      "indent": 3,
      "text": "The limited permissions granted above are perpetual and will not be revoked by the Internet Society or its successors or assigns.",
      "zh-CHS": "上述授予的有限许可是永久性的，互联网协会或其继承人或受让人不会撤销。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein is provided on an \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "zh-CHS": "本文件和其中包含的信息是按“原样”提供的，互联网协会和互联网工程任务组否认所有明示或暗示的保证，包括但不限于任何保证，即使用本文中的信息不会侵犯任何权利，或对适销性或特定用途适用性的任何默示保证。"
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "zh-CHS": "确认"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "zh-CHS": "RFC编辑功能的资金目前由互联网协会提供。"
    }
  ]
}