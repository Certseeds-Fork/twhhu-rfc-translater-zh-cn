{
  "title": {
    "text": "RFC 3713:  A Description of the Camellia Encryption Algorithm ",
    "zh-CHS": "RFC 3713"
  },
  "number": 3713,
  "created_at": "2021-11-17 18:33:39.738194+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Network Working Group                                          M. Matsui\nRequest for Comments: 3713                                   J. Nakajima\nCategory: Informational                  Mitsubishi Electric Corporation\n                                                               S. Moriai\n                                        Sony Computer Entertainment Inc.\n                                                              April 2004",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "A Description of the Camellia Encryption Algorithm",
      "zh-CHS": "Camellia加密算法的描述"
    },
    {
      "indent": 0,
      "text": "Status of this Memo",
      "zh-CHS": "本备忘录的状况"
    },
    {
      "indent": 3,
      "text": "This memo provides information for the Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited.",
      "zh-CHS": "本备忘录为互联网社区提供信息。它没有规定任何类型的互联网标准。本备忘录的分发不受限制。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "zh-CHS": "版权公告"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2004). All Rights Reserved.",
      "zh-CHS": "版权所有（C）互联网协会（2004年）。版权所有。"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "zh-CHS": "摘要"
    },
    {
      "indent": 3,
      "text": "This document describes the Camellia encryption algorithm. Camellia is a block cipher with 128-bit block size and 128-, 192-, and 256-bit keys. The algorithm description is presented together with key scheduling part and data randomizing part.",
      "zh-CHS": "本文档介绍Camellia加密算法。Camellia是一种具有128位块大小和128、192和256位密钥的分组密码。给出了算法描述、关键调度部分和数据随机化部分。"
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "zh-CHS": "1. 介绍"
    },
    {
      "indent": 0,
      "text": "1.1. Camellia",
      "section_title": true,
      "zh-CHS": "1.1. 山茶花"
    },
    {
      "indent": 3,
      "text": "Camellia was jointly developed by Nippon Telegraph and Telephone Corporation and Mitsubishi Electric Corporation in 2000 [CamelliaSpec]. Camellia specifies the 128-bit block size and 128-, 192-, and 256-bit key sizes, the same interface as the Advanced Encryption Standard (AES). Camellia is characterized by its suitability for both software and hardware implementations as well as its high level of security. From a practical viewpoint, it is designed to enable flexibility in software and hardware implementations on 32-bit processors widely used over the Internet and many applications, 8-bit processors used in smart cards, cryptographic hardware, embedded systems, and so on [CamelliaTech]. Moreover, its key setup time is excellent, and its key agility is superior to that of AES.",
      "zh-CHS": "Camellia由日本电报电话公司和三菱电机公司于2000年联合开发【Camellia Spec】。Camellia指定128位块大小和128、192和256位密钥大小，接口与高级加密标准（AES）相同。Camellia的特点是适用于软件和硬件实现以及高级别的安全性。从实用角度来看，它的设计目的是在互联网和许多应用中广泛使用的32位处理器、智能卡中使用的8位处理器、加密硬件、嵌入式系统等[CamelliaTech]上实现软件和硬件实现的灵活性。此外，它的密钥设置时间非常长，密钥灵活性优于AES。"
    },
    {
      "indent": 3,
      "text": "Camellia has been scrutinized by the wide cryptographic community during several projects for evaluating crypto algorithms. In particular, Camellia was selected as a recommended cryptographic primitive by the EU NESSIE (New European Schemes for Signatures, Integrity and Encryption) project [NESSIE] and also included in the list of cryptographic techniques for Japanese e-Government systems which were selected by the Japan CRYPTREC (Cryptography Research and Evaluation Committees) [CRYPTREC].",
      "zh-CHS": "在评估加密算法的几个项目中，Camellia受到了广泛的密码社区的审查。特别是，Camellia被欧盟NESSIE（新的欧洲签名、完整性和加密方案）项目[NESSIE]选为推荐的加密原语，并被列入日本CRYPTREC选择的日本电子政务系统加密技术列表中（密码学研究和评估委员会）[CRYPTREC]。"
    },
    {
      "indent": 0,
      "text": "2. Algorithm Description",
      "section_title": true,
      "zh-CHS": "2. 算法描述"
    },
    {
      "indent": 3,
      "text": "Camellia can be divided into \"key scheduling part\" and \"data randomizing part\".",
      "zh-CHS": "茶花可分为“关键调度部分”和“数据随机化部分”。"
    },
    {
      "indent": 0,
      "text": "2.1. Terminology",
      "section_title": true,
      "zh-CHS": "2.1. 术语"
    },
    {
      "indent": 3,
      "text": "The following operators are used in this document to describe the algorithm.",
      "zh-CHS": "本文档中使用以下运算符来描述该算法。"
    },
    {
      "indent": 6,
      "text": "& bitwise AND operation. | bitwise OR operation. ^ bitwise exclusive-OR operation. << logical left shift operation. >> logical right shift operation. <<< left rotation operation. ~y bitwise complement of y. 0x hexadecimal representation.",
      "zh-CHS": "&按位与运算按位或运算。^按位异或运算。<<逻辑左移操作。>>逻辑右移操作。<<<左旋转操作~y的y位补码。0x十六进制表示法。"
    },
    {
      "indent": 3,
      "text": "Note that the logical left shift operation is done with the infinite data width.",
      "zh-CHS": "请注意，逻辑左移位操作是以无限数据宽度完成的。"
    },
    {
      "indent": 3,
      "text": "The constant values of MASK8, MASK32, MASK64, and MASK128 are defined as follows.",
      "zh-CHS": "MASK8、MASK32、MASK64和MASK128的常量值定义如下。"
    },
    {
      "indent": 6,
      "text": "MASK8   = 0xff;\nMASK32  = 0xffffffff;\nMASK64  = 0xffffffffffffffff;\nMASK128 = 0xffffffffffffffffffffffffffffffff;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.2. Key Scheduling Part",
      "section_title": true,
      "zh-CHS": "2.2. 关键调度部分"
    },
    {
      "indent": 3,
      "text": "In the key schedule part of Camellia, the 128-bit variables of KL and KR are defined as follows. For 128-bit keys, the 128-bit key K is used as KL and KR is 0. For 192-bit keys, the leftmost 128-bits of key K are used as KL and the concatenation of the rightmost 64-bits of K and the complement of the rightmost 64-bits of K are used as KR. For 256-bit keys, the leftmost 128-bits of key K are used as KL and the rightmost 128-bits of K are used as KR.",
      "zh-CHS": "在Camellia的密钥调度部分，KL和KR的128位变量定义如下。对于128位密钥，128位密钥K用作KL，KR为0。对于192位密钥，密钥K的最左边128位用作KL，最右边64位的K和最右边64位的K的补码的串联用作KR。对于256位密钥，密钥K的最左边128位用作KL，最右边128位用作KR。"
    },
    {
      "indent": 3,
      "text": "128-bit key K:\n    KL = K;    KR = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "192-bit key K:\n    KL = K >> 64;\n    KR = ((K & MASK64) << 64) | (~(K & MASK64));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "256-bit key K:\n    KL = K >> 128;\n    KR = K & MASK128;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The 128-bit variables KA and KB are generated from KL and KR as follows. Note that KB is used only if the length of the secret key is 192 or 256 bits. D1 and D2 are 64-bit temporary variables. F-function is described in Section 2.4.",
      "zh-CHS": "128位变量KA和KB由KL和KR生成，如下所示。请注意，仅当密钥的长度为192或256位时才使用KB。D1和D2是64位临时变量。第2.4节描述了F功能。"
    },
    {
      "indent": 3,
      "text": "D1 = (KL ^ KR) >> 64;\nD2 = (KL ^ KR) & MASK64;\nD2 = D2 ^ F(D1, Sigma1);\nD1 = D1 ^ F(D2, Sigma2);\nD1 = D1 ^ (KL >> 64);\nD2 = D2 ^ (KL & MASK64);\nD2 = D2 ^ F(D1, Sigma3);\nD1 = D1 ^ F(D2, Sigma4);\nKA = (D1 << 64) | D2;\nD1 = (KA ^ KR) >> 64;\nD2 = (KA ^ KR) & MASK64;\nD2 = D2 ^ F(D1, Sigma5);\nD1 = D1 ^ F(D2, Sigma6);\nKB = (D1 << 64) | D2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The 64-bit constants Sigma1, Sigma2, ..., Sigma6 are used as \"keys\" in the F-function. These constant values are, in hexadecimal notation, as follows.",
      "zh-CHS": "64位常量Sigma1、Sigma2、…、Sigma6用作F函数中的“键”。这些常量值以十六进制表示，如下所示。"
    },
    {
      "indent": 3,
      "text": "Sigma1 = 0xA09E667F3BCC908B;\nSigma2 = 0xB67AE8584CAA73B2;\nSigma3 = 0xC6EF372FE94F82BE;\nSigma4 = 0x54FF53A5F1D36F1C;\nSigma5 = 0x10E527FADE682D1D;\nSigma6 = 0xB05688C2B3E6C1FD;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "64-bit subkeys are generated by rotating KL, KR, KA, and KB and taking the left- or right-half of them.",
      "zh-CHS": "通过旋转KL、KR、KA和KB并取其左半部或右半部来生成64位子键。"
    },
    {
      "indent": 3,
      "text": "For 128-bit keys, 64-bit subkeys kw1, ..., kw4, k1, ..., k18, ke1, ..., ke4 are generated as follows.",
      "zh-CHS": "对于128位密钥，64位子密钥kw1、…、kw4、k1、…、k18、ke1、…、ke4生成如下。"
    },
    {
      "indent": 3,
      "text": "kw1 = (KL <<<   0) >> 64;\nkw2 = (KL <<<   0) & MASK64;\nk1  = (KA <<<   0) >> 64;\nk2  = (KA <<<   0) & MASK64;\nk3  = (KL <<<  15) >> 64;\nk4  = (KL <<<  15) & MASK64;\nk5  = (KA <<<  15) >> 64;\nk6  = (KA <<<  15) & MASK64;\nke1 = (KA <<<  30) >> 64;\nke2 = (KA <<<  30) & MASK64;\nk7  = (KL <<<  45) >> 64;\nk8  = (KL <<<  45) & MASK64;\nk9  = (KA <<<  45) >> 64;\nk10 = (KL <<<  60) & MASK64;\nk11 = (KA <<<  60) >> 64;\nk12 = (KA <<<  60) & MASK64;\nke3 = (KL <<<  77) >> 64;\nke4 = (KL <<<  77) & MASK64;\nk13 = (KL <<<  94) >> 64;\nk14 = (KL <<<  94) & MASK64;\nk15 = (KA <<<  94) >> 64;\nk16 = (KA <<<  94) & MASK64;\nk17 = (KL <<< 111) >> 64;\nk18 = (KL <<< 111) & MASK64;\nkw3 = (KA <<< 111) >> 64;\nkw4 = (KA <<< 111) & MASK64;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "For 192- and 256-bit keys, 64-bit subkeys kw1, ..., kw4, k1, ..., k24, ke1, ..., ke6 are generated as follows.",
      "zh-CHS": "对于192位和256位密钥，64位子密钥kw1、…、kw4、k1、…、k24、ke1、…、ke6生成如下。"
    },
    {
      "indent": 3,
      "text": "kw1 = (KL <<<   0) >> 64;\nkw2 = (KL <<<   0) & MASK64;\nk1  = (KB <<<   0) >> 64;\nk2  = (KB <<<   0) & MASK64;\nk3  = (KR <<<  15) >> 64;\nk4  = (KR <<<  15) & MASK64;\nk5  = (KA <<<  15) >> 64;\nk6  = (KA <<<  15) & MASK64;\nke1 = (KR <<<  30) >> 64;\nke2 = (KR <<<  30) & MASK64;\nk7  = (KB <<<  30) >> 64;\nk8  = (KB <<<  30) & MASK64;\nk9  = (KL <<<  45) >> 64;\nk10 = (KL <<<  45) & MASK64;\nk11 = (KA <<<  45) >> 64;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "k12 = (KA <<<  45) & MASK64;\nke3 = (KL <<<  60) >> 64;\nke4 = (KL <<<  60) & MASK64;\nk13 = (KR <<<  60) >> 64;\nk14 = (KR <<<  60) & MASK64;\nk15 = (KB <<<  60) >> 64;\nk16 = (KB <<<  60) & MASK64;\nk17 = (KL <<<  77) >> 64;\nk18 = (KL <<<  77) & MASK64;\nke5 = (KA <<<  77) >> 64;\nke6 = (KA <<<  77) & MASK64;\nk19 = (KR <<<  94) >> 64;\nk20 = (KR <<<  94) & MASK64;\nk21 = (KA <<<  94) >> 64;\nk22 = (KA <<<  94) & MASK64;\nk23 = (KL <<< 111) >> 64;\nk24 = (KL <<< 111) & MASK64;\nkw3 = (KB <<< 111) >> 64;\nkw4 = (KB <<< 111) & MASK64;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.3. Data Randomizing Part",
      "section_title": true,
      "zh-CHS": "2.3. 数据随机化部分"
    },
    {
      "indent": 0,
      "text": "2.3.1. Encryption for 128-bit keys",
      "section_title": true,
      "zh-CHS": "2.3.1. 128位密钥的加密"
    },
    {
      "indent": 3,
      "text": "128-bit plaintext M is divided into the left 64-bit D1 and the right 64-bit D2.",
      "zh-CHS": "128位明文M分为左64位D1和右64位D2。"
    },
    {
      "indent": 3,
      "text": "D1 = M >> 64;\nD2 = M & MASK64;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Encryption is performed using an 18-round Feistel structure with FL-and FLINV-functions inserted every 6 rounds. F-function, FL-function, and FLINV-function are described in Section 2.4.",
      "zh-CHS": "加密使用18轮Feistel结构执行，每6轮插入FL和FLINV函数。第2.4节描述了F函数、FL函数和FLINV函数。"
    },
    {
      "indent": 3,
      "text": "D1 = D1 ^ kw1;           // Prewhitening\nD2 = D2 ^ kw2;\nD2 = D2 ^ F(D1, k1);     // Round 1\nD1 = D1 ^ F(D2, k2);     // Round 2\nD2 = D2 ^ F(D1, k3);     // Round 3\nD1 = D1 ^ F(D2, k4);     // Round 4\nD2 = D2 ^ F(D1, k5);     // Round 5\nD1 = D1 ^ F(D2, k6);     // Round 6\nD1 = FL   (D1, ke1);     // FL\nD2 = FLINV(D2, ke2);     // FLINV\nD2 = D2 ^ F(D1, k7);     // Round 7\nD1 = D1 ^ F(D2, k8);     // Round 8\nD2 = D2 ^ F(D1, k9);     // Round 9\nD1 = D1 ^ F(D2, k10);    // Round 10",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "D2 = D2 ^ F(D1, k11);    // Round 11\nD1 = D1 ^ F(D2, k12);    // Round 12\nD1 = FL   (D1, ke3);     // FL\nD2 = FLINV(D2, ke4);     // FLINV\nD2 = D2 ^ F(D1, k13);    // Round 13\nD1 = D1 ^ F(D2, k14);    // Round 14\nD2 = D2 ^ F(D1, k15);    // Round 15\nD1 = D1 ^ F(D2, k16);    // Round 16\nD2 = D2 ^ F(D1, k17);    // Round 17\nD1 = D1 ^ F(D2, k18);    // Round 18\nD2 = D2 ^ kw3;           // Postwhitening\nD1 = D1 ^ kw4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "128-bit ciphertext C is constructed from D1 and D2 as follows.",
      "zh-CHS": "128位密文C由D1和D2构成，如下所示。"
    },
    {
      "indent": 3,
      "text": "C = (D2 << 64) | D1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.3.2. Encryption for 192- and 256-bit keys",
      "section_title": true,
      "zh-CHS": "2.3.2. 192位和256位密钥的加密"
    },
    {
      "indent": 3,
      "text": "128-bit plaintext M is divided into the left 64-bit D1 and the right 64-bit D2.",
      "zh-CHS": "128位明文M分为左64位D1和右64位D2。"
    },
    {
      "indent": 3,
      "text": "D1 = M >> 64;\nD2 = M & MASK64;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Encryption is performed using a 24-round Feistel structure with FL-and FLINV-functions inserted every 6 rounds. F-function, FL-function, and FLINV-function are described in Section 2.4.",
      "zh-CHS": "加密使用24轮Feistel结构执行，每6轮插入FL和FLINV函数。第2.4节描述了F函数、FL函数和FLINV函数。"
    },
    {
      "indent": 3,
      "text": "D1 = D1 ^ kw1;           // Prewhitening\nD2 = D2 ^ kw2;\nD2 = D2 ^ F(D1, k1);     // Round 1\nD1 = D1 ^ F(D2, k2);     // Round 2\nD2 = D2 ^ F(D1, k3);     // Round 3\nD1 = D1 ^ F(D2, k4);     // Round 4\nD2 = D2 ^ F(D1, k5);     // Round 5\nD1 = D1 ^ F(D2, k6);     // Round 6\nD1 = FL   (D1, ke1);     // FL\nD2 = FLINV(D2, ke2);     // FLINV\nD2 = D2 ^ F(D1, k7);     // Round 7\nD1 = D1 ^ F(D2, k8);     // Round 8\nD2 = D2 ^ F(D1, k9);     // Round 9\nD1 = D1 ^ F(D2, k10);    // Round 10\nD2 = D2 ^ F(D1, k11);    // Round 11\nD1 = D1 ^ F(D2, k12);    // Round 12\nD1 = FL   (D1, ke3);     // FL\nD2 = FLINV(D2, ke4);     // FLINV\nD2 = D2 ^ F(D1, k13);    // Round 13",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "D1 = D1 ^ F(D2, k14);    // Round 14\nD2 = D2 ^ F(D1, k15);    // Round 15\nD1 = D1 ^ F(D2, k16);    // Round 16\nD2 = D2 ^ F(D1, k17);    // Round 17\nD1 = D1 ^ F(D2, k18);    // Round 18\nD1 = FL   (D1, ke5);     // FL\nD2 = FLINV(D2, ke6);     // FLINV\nD2 = D2 ^ F(D1, k19);    // Round 19\nD1 = D1 ^ F(D2, k20);    // Round 20\nD2 = D2 ^ F(D1, k21);    // Round 21\nD1 = D1 ^ F(D2, k22);    // Round 22\nD2 = D2 ^ F(D1, k23);    // Round 23\nD1 = D1 ^ F(D2, k24);    // Round 24\nD2 = D2 ^ kw3;           // Postwhitening\nD1 = D1 ^ kw4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "128-bit ciphertext C is constructed from D1 and D2 as follows.",
      "zh-CHS": "128位密文C由D1和D2构成，如下所示。"
    },
    {
      "indent": 3,
      "text": "C = (D2 << 64) | D1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.3.3. Decryption",
      "section_title": true,
      "zh-CHS": "2.3.3. 解密"
    },
    {
      "indent": 3,
      "text": "The decryption procedure of Camellia can be done in the same way as the encryption procedure by reversing the order of the subkeys.",
      "zh-CHS": "茶花的解密过程可以通过颠倒子密钥的顺序，以与加密过程相同的方式完成。"
    },
    {
      "indent": 3,
      "text": "That is to say:",
      "zh-CHS": "也就是说："
    },
    {
      "indent": 3,
      "text": "128-bit key:\n    kw1 <-> kw3\n    kw2 <-> kw4\n    k1  <-> k18\n    k2  <-> k17\n    k3  <-> k16\n    k4  <-> k15\n    k5  <-> k14\n    k6  <-> k13\n    k7  <-> k12\n    k8  <-> k11\n    k9  <-> k10\n    ke1 <-> ke4\n    ke2 <-> ke3",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "192- or 256-bit key:\n    kw1 <-> kw3\n    kw2 <-> kw4\n    k1  <-> k24\n    k2  <-> k23\n    k3  <-> k22",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "k4  <-> k21\nk5  <-> k20\nk6  <-> k19\nk7  <-> k18\nk8  <-> k17\nk9  <-> k16\nk10 <-> k15\nk11 <-> k14\nk12 <-> k13\nke1 <-> ke6\nke2 <-> ke5\nke3 <-> ke4",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.4. Components of Camellia",
      "section_title": true,
      "zh-CHS": "2.4. 山茶属植物成分"
    },
    {
      "indent": 0,
      "text": "2.4.1. F-function",
      "section_title": true,
      "zh-CHS": "2.4.1. F函数"
    },
    {
      "indent": 3,
      "text": "F-function takes two parameters. One is 64-bit input data F_IN. The other is 64-bit subkey KE. F-function returns 64-bit data F_OUT.",
      "zh-CHS": "F函数有两个参数。一种是64位输入数据F_IN。另一个是64位子键KE。函数返回64位数据F_OUT。"
    },
    {
      "indent": 3,
      "text": "F(F_IN, KE)\nbegin\n    var x as 64-bit unsigned integer;\n    var t1, t2, t3, t4, t5, t6, t7, t8 as 8-bit unsigned integer;\n    var y1, y2, y3, y4, y5, y6, y7, y8 as 8-bit unsigned integer;\n    x  = F_IN ^ KE;\n    t1 =  x >> 56;\n    t2 = (x >> 48) & MASK8;\n    t3 = (x >> 40) & MASK8;\n    t4 = (x >> 32) & MASK8;\n    t5 = (x >> 24) & MASK8;\n    t6 = (x >> 16) & MASK8;\n    t7 = (x >>  8) & MASK8;\n    t8 =  x        & MASK8;\n    t1 = SBOX1[t1];\n    t2 = SBOX2[t2];\n    t3 = SBOX3[t3];\n    t4 = SBOX4[t4];\n    t5 = SBOX2[t5];\n    t6 = SBOX3[t6];\n    t7 = SBOX4[t7];\n    t8 = SBOX1[t8];\n    y1 = t1 ^ t3 ^ t4 ^ t6 ^ t7 ^ t8;\n    y2 = t1 ^ t2 ^ t4 ^ t5 ^ t7 ^ t8;\n    y3 = t1 ^ t2 ^ t3 ^ t5 ^ t6 ^ t8;\n    y4 = t2 ^ t3 ^ t4 ^ t5 ^ t6 ^ t7;\n    y5 = t1 ^ t2 ^ t6 ^ t7 ^ t8;\n    y6 = t2 ^ t3 ^ t5 ^ t7 ^ t8;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    y7 = t3 ^ t4 ^ t5 ^ t6 ^ t8;\n    y8 = t1 ^ t4 ^ t5 ^ t6 ^ t7;\n    F_OUT = (y1 << 56) | (y2 << 48) | (y3 << 40) | (y4 << 32)\n    | (y5 << 24) | (y6 << 16) | (y7 <<  8) | y8;\n    return FO_OUT;\nend.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "SBOX1, SBOX2, SBOX3, and SBOX4 are lookup tables with 8-bit input/ output data. SBOX2, SBOX3, and SBOX4 are defined using SBOX1 as follows:",
      "zh-CHS": "SBOX1、SBOX2、SBOX3和SBOX4是具有8位输入/输出数据的查找表。SBOX2、SBOX3和SBOX4使用SBOX1定义如下："
    },
    {
      "indent": 7,
      "text": "SBOX2[x] = SBOX1[x] <<< 1;\nSBOX3[x] = SBOX1[x] <<< 7;\nSBOX4[x] = SBOX1[x <<< 1];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "SBOX1 is defined by the following table. For example, SBOX1[0x3d] equals 86.",
      "zh-CHS": "SBOX1由下表定义。例如，SBOX1[0x3d]等于86。"
    },
    {
      "indent": 3,
      "text": "SBOX1:\n      0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f\n00: 112 130  44 236 179  39 192 229 228 133  87  53 234  12 174  65\n10:  35 239 107 147  69  25 165  33 237  14  79  78  29 101 146 189\n20: 134 184 175 143 124 235  31 206  62  48 220  95  94 197  11  26\n30: 166 225  57 202 213  71  93  61 217   1  90 214  81  86 108  77\n40: 139  13 154 102 251 204 176  45 116  18  43  32 240 177 132 153\n50: 223  76 203 194  52 126 118   5 109 183 169  49 209  23   4 215\n60:  20  88  58  97 222  27  17  28  50  15 156  22  83  24 242  34\n70: 254  68 207 178 195 181 122 145  36   8 232 168  96 252 105  80\n80: 170 208 160 125 161 137  98 151  84  91  30 149 224 255 100 210\n90:  16 196   0  72 163 247 117 219 138   3 230 218   9  63 221 148\na0: 135  92 131   2 205  74 144  51 115 103 246 243 157 127 191 226\nb0:  82 155 216  38 200  55 198  59 129 150 111  75  19 190  99  46\nc0: 233 121 167 140 159 110 188 142  41 245 249 182  47 253 180  89\nd0: 120 152   6 106 231  70 113 186 212  37 171  66 136 162 141 250\ne0: 114   7 185  85 248 238 172  10  54  73  42 104  60  56 241 164\nf0:  64  40 211 123 187 201  67 193  21 227 173 244 119 199 128 158",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.4.2. FL- and FLINV-functions",
      "section_title": true,
      "zh-CHS": "2.4.2. FL-和FLINV函数"
    },
    {
      "indent": 3,
      "text": "FL-function takes two parameters. One is 64-bit input data FL_IN. The other is 64-bit subkey KE. FL-function returns 64-bit data FL_OUT.",
      "zh-CHS": "FL函数有两个参数。一个是64位输入数据FL_IN。另一个是64位子键KE。FL函数返回64位数据FL_OUT。"
    },
    {
      "indent": 3,
      "text": "FL(FL_IN, KE)\nbegin\n    var x1, x2 as 32-bit unsigned integer;\n    var k1, k2 as 32-bit unsigned integer;\n    x1 = FL_IN >> 32;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    x2 = FL_IN & MASK32;\n    k1 = KE >> 32;\n    k2 = KE & MASK32;\n    x2 = x2 ^ ((x1 & k1) <<< 1);\n    x1 = x1 ^ (x2 | k2);\n    FL_OUT = (x1 << 32) | x2;\nend.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "FLINV-function is the inverse function of the FL-function.",
      "zh-CHS": "FLINV函数是FL函数的反函数。"
    },
    {
      "indent": 3,
      "text": "FLINV(FLINV_IN, KE)\nbegin\n    var y1, y2 as 32-bit unsigned integer;\n    var k1, k2 as 32-bit unsigned integer;\n    y1 = FLINV_IN >> 32;\n    y2 = FLINV_IN & MASK32;\n    k1 = KE >> 32;\n    k2 = KE & MASK32;\n    y1 = y1 ^ (y2 | k2);\n    y2 = y2 ^ ((y1 & k1) <<< 1);\n    FLINV_OUT = (y1 << 32) | y2;\nend.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "3. Object Identifiers",
      "section_title": true,
      "zh-CHS": "3. 对象标识符"
    },
    {
      "indent": 3,
      "text": "The Object Identifier for Camellia with 128-bit key in Cipher Block Chaining (CBC) mode is as follows:",
      "zh-CHS": "密码块链接（CBC）模式下具有128位密钥的Camellia的对象标识符如下所示："
    },
    {
      "indent": 6,
      "text": "id-camellia128-cbc OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011 61 security(1)\n      algorithm(1) symmetric-encryption-algorithm(1)\n      camellia128-cbc(2) }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The Object Identifier for Camellia with 192-bit key in Cipher Block Chaining (CBC) mode is as follows:",
      "zh-CHS": "密码块链接（CBC）模式下具有192位密钥的Camellia的对象标识符如下所示："
    },
    {
      "indent": 6,
      "text": "id-camellia192-cbc OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011 61 security(1)\n      algorithm(1) symmetric-encryption-algorithm(1)\n      camellia192-cbc(3) }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The Object Identifier for Camellia with 256-bit key in Cipher Block Chaining (CBC) mode is as follows:",
      "zh-CHS": "密码块链接（CBC）模式下具有256位密钥的Camellia的对象标识符如下所示："
    },
    {
      "indent": 6,
      "text": "id-camellia256-cbc OBJECT IDENTIFIER ::=\n    { iso(1) member-body(2) 392 200011 61 security(1)\n      algorithm(1) symmetric-encryption-algorithm(1)\n      camellia256-cbc(4) }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The above algorithms need Initialization Vector (IV). To determine the value of IV, the above algorithms take parameters as follows:",
      "zh-CHS": "上述算法需要初始化向量（IV）。为确定IV值，上述算法采用以下参数："
    },
    {
      "indent": 6,
      "text": "CamelliaCBCParameter ::= CamelliaIV  --  Initialization Vector",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "CamelliaIV ::= OCTET STRING (SIZE(16))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "When these object identifiers are used, plaintext is padded before encryption according to RFC2315 [RFC2315].",
      "zh-CHS": "当使用这些对象标识符时，根据RFC2315[RFC2315]在加密之前填充明文。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "zh-CHS": "4. 安全考虑"
    },
    {
      "indent": 3,
      "text": "The recent advances in cryptanalytic techniques are remarkable. A quantitative evaluation of security against powerful cryptanalytic techniques such as differential cryptanalysis and linear cryptanalysis is considered to be essential in designing any new block cipher. We evaluated the security of Camellia by utilizing state-of-the-art cryptanalytic techniques. We confirmed that Camellia has no differential and linear characteristics that hold with probability more than 2^(-128), which means that it is extremely unlikely that differential and linear attacks will succeed against the full 18-round Camellia. Moreover, Camellia was designed to offer security against other advanced cryptanalytic attacks including higher order differential attacks, interpolation attacks, related-key attacks, truncated differential attacks, and so on [Camellia].",
      "zh-CHS": "密码分析技术的最新进展是显著的。针对差分密码分析和线性密码分析等强大的密码分析技术，对安全性进行定量评估被认为是设计任何新的分组密码的关键。我们利用最先进的密码分析技术评估了山茶花的安全性。我们确认Camelia没有概率大于2^（-128）的微分和线性特征，这意味着微分和线性攻击不太可能成功攻击整个18轮Camelia。此外，Camellia被设计为针对其他高级密码分析攻击提供安全性，包括高阶差分攻击、插值攻击、相关密钥攻击、截断差分攻击等[Camellia]。"
    },
    {
      "indent": 0,
      "text": "5. Informative References",
      "section_title": true,
      "zh-CHS": "5. 资料性引用"
    },
    {
      "indent": 3,
      "text": "[CamelliaSpec] Aoki, K., Ichikawa, T., Kanda, M., Matsui, M., Moriai,\n               S., Nakajima, J. and T. Tokita, \"Specification of\n               Camellia --- a 128-bit Block Cipher\".\n               http://info.isl.ntt.co.jp/camellia/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "[CamelliaTech] Aoki, K., Ichikawa, T., Kanda, M., Matsui, M., Moriai,\n               S., Nakajima, J. and T. Tokita, \"Camellia: A 128-Bit\n               Block Cipher Suitable for Multiple Platforms\".\n               http://info.isl.ntt.co.jp/camellia/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "[Camellia] Aoki, K., Ichikawa, T., Kanda, M., Matsui, M., Moriai, S., Nakajima, J. and T. Tokita, \"Camellia: A 128-Bit Block Cipher Suitable for Multiple Platforms - Design and Analysis -\", In Selected Areas in Cryptography, 7th Annual International Workshop, SAC 2000, Waterloo, Ontario, Canada, August 2000, Proceedings, Lecture Notes in Computer Science 2012, pp.39-56, Springer-Verlag, 2001.",
      "zh-CHS": "[Camellia]Aoki，K.，Ichikawa，T.，Kanda，M.，Matsui，M.，Morai，S.，Nakajima，J.和T.Tokita，“Camellia:一种适用于多平台的128位分组密码-设计和分析”，在密码学的选定领域，第七届年度国际研讨会，SAC 2000，加拿大安大略省滑铁卢，2000年8月，会议记录，《2012年计算机科学》课堂讲稿，第39-56页，斯普林格·维拉格，2001年。"
    },
    {
      "indent": 3,
      "text": "[CRYPTREC]     \"CRYPTREC Advisory Committee Report FY2002\", Ministry\n               of Public Management, Home Affairs, Posts and\n               Telecommunications, and Ministry of Economy, Trade and\n               Industry, March 2003.\n               http://www.soumu.go.jp/joho_tsusin/security/\n               cryptrec.html,\n               CRYPTREC home page by Information-technology Promotion\n               Agency, Japan (IPA)\n               http://www.ipa.go.jp/security/enc/CRYPTREC/index-\n               e.html",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "[NESSIE] New European Schemes for Signatures, Integrity and Encryption (NESSIE) project. http://www.cryptonessie.org",
      "zh-CHS": "[NESSIE]新的欧洲签名、完整性和加密方案（NESSIE）项目。http://www.cryptonessie.org"
    },
    {
      "indent": 3,
      "text": "[RFC2315] Kaliski, B., \"PKCS #7: Cryptographic Message Syntax Version 1.5\", RFC 2315, March 1998.",
      "zh-CHS": "[RFC2315]Kaliski，B.，“PKCS#7：加密消息语法版本1.5”，RFC 2315，1998年3月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Example Data of Camellia",
      "section_title": true,
      "zh-CHS": "附录A.山茶花示例数据"
    },
    {
      "indent": 3,
      "text": "Here are test data for Camellia in hexadecimal form.",
      "zh-CHS": "以下是十六进制形式的山茶花测试数据。"
    },
    {
      "indent": 3,
      "text": "128-bit key Key : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Plaintext : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Ciphertext: 67 67 31 38 54 96 69 73 08 57 06 56 48 ea be 43",
      "zh-CHS": "128位密钥密钥：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10明文：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10密文：67 67 31 38 54 96 69 73 08 57 06 56 48 ea be 43"
    },
    {
      "indent": 3,
      "text": "192-bit key Key : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 : 00 11 22 33 44 55 66 77 Plaintext : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Ciphertext: b4 99 34 01 b3 e9 96 f8 4e e5 ce e7 d7 9b 09 b9",
      "zh-CHS": "192位密钥密钥：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10:00 11 22 33 44 55 66 77明文：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10密文：b4 99 34 01 b3 e9 96 f8 4e e5 ce e7 d7 9b 09 b9"
    },
    {
      "indent": 3,
      "text": "256-bit key Key : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 : 00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff Plaintext : 01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10 Ciphertext: 9a cc 23 7d ff 16 d7 6c 20 ef 7c 91 9e 3a 75 09",
      "zh-CHS": "256位密钥：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10:00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff明文：01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10密文：9a cc 23 7d ff 16 d7 6c 20 ef 7c 91 9e 3a 75 09"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "zh-CHS": "致谢"
    },
    {
      "indent": 3,
      "text": "Shiho Moriai worked for NTT when this document was developed.",
      "zh-CHS": "本文件编制时，Shiho Moraii为NTT工作。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "zh-CHS": "作者地址"
    },
    {
      "indent": 3,
      "text": "Mitsuru Matsui Mitsubishi Electric Corporation Information Technology R&D Center 5-1-1 Ofuna, Kamakura Kanagawa 247-8501, Japan",
      "zh-CHS": "松井三郎三菱电机公司信息技术研发中心日本神奈川镰仓5-1-1号神奈川247-8501"
    },
    {
      "indent": 3,
      "text": "Phone: +81-467-41-2190\nFax:   +81-467-41-2185\nEMail: matsui@iss.isl.melco.co.jp",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Junko Nakajima Mitsubishi Electric Corporation Information Technology R&D Center 5-1-1 Ofuna, Kamakura Kanagawa 247-8501, Japan",
      "zh-CHS": "中岛俊子三菱电机公司信息技术研发中心，日本神奈川镰仓5-1-1 Ofuna 247-8501"
    },
    {
      "indent": 3,
      "text": "Phone: +81-467-41-2190\nFax:   +81-467-41-2185\nEMail: june15@iss.isl.melco.co.jp",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Shiho Moriai Sony Computer Entertainment Inc.",
      "zh-CHS": "索尼电脑娱乐公司。"
    },
    {
      "indent": 3,
      "text": "Phone: +81-3-6438-7523\nFax:   +81-3-6438-8629\nEMail: shiho@rd.scei.sony.co.jp\n       camellia@isl.ntt.co.jp (Camellia team)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Full Copyright Statement",
      "zh-CHS": "完整版权声明"
    },
    {
      "indent": 3,
      "text": "Copyright (C) The Internet Society (2004). This document is subject to the rights, licenses and restrictions contained in BCP 78 and except as set forth therein, the authors retain all their rights.",
      "zh-CHS": "版权所有（C）互联网协会（2004年）。本文件受BCP 78中包含的权利、许可和限制的约束，除其中规定外，作者保留其所有权利。"
    },
    {
      "indent": 3,
      "text": "This document and the information contained herein are provided on an \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.",
      "zh-CHS": "本文件及其包含的信息是按“原样”提供的，贡献者、他/她所代表或赞助的组织（如有）、互联网协会和互联网工程任务组不承担任何明示或暗示的担保，包括但不限于任何保证，即使用本文中的信息不会侵犯任何权利，或对适销性或特定用途适用性的任何默示保证。"
    },
    {
      "indent": 0,
      "text": "Intellectual Property",
      "zh-CHS": "知识产权"
    },
    {
      "indent": 3,
      "text": "The IETF takes no position regarding the validity or scope of any Intellectual Property Rights or other rights that might be claimed to pertain to the implementation or use of the technology described in this document or the extent to which any license under such rights might or might not be available; nor does it represent that it has made any independent effort to identify any such rights. Information on the procedures with respect to rights in RFC documents can be found in BCP 78 and BCP 79.",
      "zh-CHS": "IETF对可能声称与本文件所述技术的实施或使用有关的任何知识产权或其他权利的有效性或范围，或此类权利下的任何许可可能或可能不可用的程度，不采取任何立场；它也不表示它已作出任何独立努力来确定任何此类权利。有关RFC文件中权利的程序信息，请参见BCP 78和BCP 79。"
    },
    {
      "indent": 3,
      "text": "Copies of IPR disclosures made to the IETF Secretariat and any assurances of licenses to be made available, or the result of an attempt made to obtain a general license or permission for the use of such proprietary rights by implementers or users of this specification can be obtained from the IETF on-line IPR repository at http://www.ietf.org/ipr.",
      "zh-CHS": "向IETF秘书处披露的知识产权副本和任何许可证保证，或本规范实施者或用户试图获得使用此类专有权利的一般许可证或许可的结果，可从IETF在线知识产权存储库获取，网址为http://www.ietf.org/ipr."
    },
    {
      "indent": 3,
      "text": "The IETF invites any interested party to bring to its attention any copyrights, patents or patent applications, or other proprietary rights that may cover technology that may be required to implement this standard. Please address the information to the IETF at ietf-ipr@ietf.org.",
      "zh-CHS": "IETF邀请任何相关方提请其注意任何版权、专利或专利申请，或其他可能涵盖实施本标准所需技术的专有权利。请将信息发送至IETF的IETF-ipr@ietf.org."
    },
    {
      "indent": 0,
      "text": "Acknowledgement",
      "zh-CHS": "确认"
    },
    {
      "indent": 3,
      "text": "Funding for the RFC Editor function is currently provided by the Internet Society.",
      "zh-CHS": "RFC编辑功能的资金目前由互联网协会提供。"
    }
  ]
}