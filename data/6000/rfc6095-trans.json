{
  "title": {
    "text": "RFC 6095: Extending YANG with Language Abstractions",
    "zh-CHS": "RFC 6095"
  },
  "number": 6095,
  "created_at": "2021-11-05 06:07:59.745835+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                       B. Linowski\nRequest for Comments: 6095                    TCS/Nokia Siemens Networks\nCategory: Experimental                                          M. Ersue\nISSN: 2070-1721                                   Nokia Siemens Networks\n                                                               S. Kuryla\n                                                    360 Treasury Systems\n                                                              March 2011",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "Extending YANG with Language Abstractions",
      "zh-CHS": "用语言抽象扩展杨"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "zh-CHS": "摘要"
    },
    {
      "indent": 3,
      "text": "YANG -- the Network Configuration Protocol (NETCONF) Data Modeling Language -- supports modeling of a tree of data elements that represent the configuration and runtime status of a particular network element managed via NETCONF. This memo suggests enhancing YANG with supplementary modeling features and language abstractions with the aim to improve the model extensibility and reuse.",
      "zh-CHS": "YANG——网络配置协议（NETCONF）数据建模语言——支持对数据元素树进行建模，这些数据元素表示通过NETCONF管理的特定网络元素的配置和运行时状态。该备忘录建议通过补充建模特性和语言抽象来增强YANG，以提高模型的可扩展性和重用性。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "zh-CHS": "关于下段备忘"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation.",
      "zh-CHS": "本文件不是互联网标准跟踪规范；它是为检查、实验实施和评估而发布的。"
    },
    {
      "indent": 3,
      "text": "This document defines an Experimental Protocol for the Internet community. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "zh-CHS": "本文档为互联网社区定义了一个实验协议。本文件是互联网工程任务组（IETF）的产品。它代表了IETF社区的共识。它已经接受了公众审查，并已被互联网工程指导小组（IESG）批准出版。并非IESG批准的所有文件都适用于任何级别的互联网标准；见RFC 5741第2节。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6095.",
      "zh-CHS": "有关本文件当前状态、任何勘误表以及如何提供反馈的信息，请访问http://www.rfc-editor.org/info/rfc6095."
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "zh-CHS": "版权公告"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "zh-CHS": "版权所有（c）2011 IETF信托基金和确定为文件作者的人员。版权所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.",
      "zh-CHS": "本文件受BCP 78和IETF信托有关IETF文件的法律规定的约束(http://trustee.ietf.org/license-info)自本文件出版之日起生效。请仔细阅读这些文件，因为它们描述了您对本文件的权利和限制。从本文件中提取的代码组件必须包括信托法律条款第4.e节中所述的简化BSD许可证文本，并提供简化BSD许可证中所述的无担保。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "zh-CHS": "目录"
    },
    {
      "indent": 3,
      "text": "1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3\n  1.1.  Key Words  . . . . . . . . . . . . . . . . . . . . . . . .  3\n  1.2.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  3\n  1.3.  Modeling Improvements with Language Abstractions . . . . .  5\n  1.4.  Design Approach  . . . . . . . . . . . . . . . . . . . . .  6\n  1.5.  Modeling Resource Models with YANG . . . . . . . . . . . .  6\n    1.5.1.  Example of a Physical Network Resource Model . . . . .  6\n    1.5.2.  Modeling Entity MIB Entries as Physical Resources  . . 12\n2.  Complex Types  . . . . . . . . . . . . . . . . . . . . . . . . 15\n  2.1.  Definition . . . . . . . . . . . . . . . . . . . . . . . . 15\n  2.2.  complex-type Extension Statement . . . . . . . . . . . . . 15\n  2.3.  instance Extension Statement . . . . . . . . . . . . . . . 17\n  2.4.  instance-list Extension Statement  . . . . . . . . . . . . 18\n  2.5.  extends Extension Statement  . . . . . . . . . . . . . . . 19\n  2.6.  abstract Extension Statement . . . . . . . . . . . . . . . 19\n  2.7.  XML Encoding Rules . . . . . . . . . . . . . . . . . . . . 20\n  2.8.  Type Encoding Rules  . . . . . . . . . . . . . . . . . . . 20\n  2.9.  Extension and Feature Definition Module  . . . . . . . . . 21\n  2.10. Example Model for Complex Types  . . . . . . . . . . . . . 24\n  2.11. NETCONF Payload Example  . . . . . . . . . . . . . . . . . 25\n  2.12. Update Rules for Modules Using Complex Types . . . . . . . 26\n  2.13. Using Complex Types  . . . . . . . . . . . . . . . . . . . 26\n    2.13.1. Overriding Complex Type Data Nodes . . . . . . . . . . 26\n    2.13.2. Augmenting Complex Types . . . . . . . . . . . . . . . 27\n    2.13.3. Controlling the Use of Complex Types . . . . . . . . . 28\n3.  Typed Instance Identifier  . . . . . . . . . . . . . . . . . . 29\n  3.1.  Definition . . . . . . . . . . . . . . . . . . . . . . . . 29\n  3.2.  instance-type Extension Statement  . . . . . . . . . . . . 29\n  3.3.  Typed Instance Identifier Example  . . . . . . . . . . . . 30\n4.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 31\n5.  Security Considerations  . . . . . . . . . . . . . . . . . . . 31",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 32\n7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n  7.1.  Normative References . . . . . . . . . . . . . . . . . . . 32\n  7.2.  Informative References . . . . . . . . . . . . . . . . . . 32\nAppendix A.  YANG Modules for Physical Network Resource Model\n             and Hardware Entities Model . . . . . . . . . . . . . 34\nAppendix B.  Example YANG Module for the IPFIX/PSAMP Model . . . . 40\n  B.1.  Modeling Improvements for the IPFIX/PSAMP Model with\n        Complex Types and Typed Instance Identifiers . . . . . . . 40\n  B.2.  IPFIX/PSAMP Model with Complex Types and Typed\n        Instance Identifiers . . . . . . . . . . . . . . . . . . . 41",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "zh-CHS": "1. 介绍"
    },
    {
      "indent": 3,
      "text": "YANG -- the NETCONF Data Modeling Language [RFC6020] -- supports modeling of a tree of data elements that represent the configuration and runtime status of a particular network element managed via NETCONF. This document defines extensions for the modeling language YANG as new language statements, which introduce language abstractions to improve the model extensibility and reuse. The document reports from modeling experience in the telecommunication industry and gives model examples from an actual network management system to highlight the value of proposed language extensions, especially class inheritance and recursiveness. The language extensions defined in this document have been implemented with two open source tools. These tools have been used to validate the model examples through the document. If this experimental specification results in successful usage, it is possible that the language extensions defined herein could be updated to incorporate implementation and deployment experience, then pursued on the Standards Track, possibly as part of a future version of YANG.",
      "zh-CHS": "YANG——NETCONF数据建模语言[RFC6020]——支持对数据元素树进行建模，这些数据元素表示通过NETCONF管理的特定网络元素的配置和运行时状态。本文档将建模语言YANG的扩展定义为新的语言语句，这些语句引入语言抽象以提高模型的可扩展性和重用性。该文档报告了电信行业的建模经验，并给出了实际网络管理系统的模型示例，以突出所建议的语言扩展的价值，特别是类继承性和递归性。本文档中定义的语言扩展已通过两个开源工具实现。这些工具已用于通过文档验证模型示例。如果此实验性规范成功使用，则有可能对本文定义的语言扩展进行更新，以纳入实现和部署经验，然后在标准轨道上继续，可能作为YANG未来版本的一部分。"
    },
    {
      "indent": 0,
      "text": "1.1. Key Words",
      "section_title": true,
      "zh-CHS": "1.1. 关键词"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14, [RFC2119].",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“必需”、“应”、“不应”、“建议”、“不建议”、“可”和“可选”应按照BCP 14[RFC2119]中的说明进行解释。"
    },
    {
      "indent": 0,
      "text": "1.2. Motivation",
      "section_title": true,
      "zh-CHS": "1.2. 动机"
    },
    {
      "indent": 3,
      "text": "Following are non-exhaustive motivation examples highlighting usage scenarios for language abstractions.",
      "zh-CHS": "以下是非详尽的动机示例，重点介绍了语言抽象的使用场景。"
    },
    {
      "indent": 3,
      "text": "o Many systems today have a Management Information Base (MIB) that in effect is organized as a tree build of recursively nested container nodes. For example, the physical resources in the ENTITY-MIB conceptually form a containment tree. The index",
      "zh-CHS": "o 今天，许多系统都有一个管理信息库（MIB），实际上它是作为递归嵌套的容器节点的树构建来组织的。例如，ENTITY-MIB中的物理资源在概念上形成一个包含树。索引"
    },
    {
      "indent": 6,
      "text": "entPhysicalContainedIn points to the containing entity in a flat list. The ability to represent nested, recursive data structures of arbitrary depth would enable the representation of the primary containment hierarchy of physical entities as a node tree in the server MIB and in the NETCONF payload.",
      "zh-CHS": "entPhysicalContainedIn指向平面列表中的包含实体。表示任意深度的嵌套递归数据结构的能力将使物理实体的主包含层次结构能够表示为服务器MIB和NETCONF负载中的节点树。"
    },
    {
      "indent": 3,
      "text": "o A manager scanning the network in order to update the state of an inventory management system might be only interested in data structures that represent a specific type of hardware. Such a manager would then look for entities that are of this specific type, including those that are an extension or specialization of this type. To support this use case, it is helpful to bear the corresponding type information within the data structures, which describe the network element hardware.",
      "zh-CHS": "o 为了更新库存管理系统的状态而扫描网络的管理员可能只对表示特定类型硬件的数据结构感兴趣。这样的管理者会寻找这种特定类型的实体，包括这种类型的扩展或专门化的实体。为了支持这个用例，在描述网元硬件的数据结构中包含相应的类型信息是很有帮助的。"
    },
    {
      "indent": 3,
      "text": "o A system that is managing network elements is concerned, e.g., with managed objects of type \"plug-in modules\" that have a name, a version, and an activation state. In this context, it is useful to define the \"plug-in module\" as a concept that is supposed to be further detailed and extended by additional concrete model elements. In order to realize such a system, it is worthwhile to model abstract entities, which enable reuse and ease concrete refinements of that abstract entity in a second step.",
      "zh-CHS": "o 管理网络元件的系统涉及例如具有名称、版本和激活状态的“插件模块”类型的受管对象。在这种情况下，将“插件模块”定义为一个概念是很有用的，该概念应该通过附加的具体模型元素进一步细化和扩展。为了实现这样一个系统，有必要对抽象实体进行建模，以便在第二步中重用和简化抽象实体的具体细化。"
    },
    {
      "indent": 3,
      "text": "o As particular network elements have specific types of components that need to be managed (OS images, plug-in modules, equipment, etc.), it should be possible to define concrete types, which describe the managed object precisely. By using type-safe extensions of basic concepts, a system in the manager role can safely and explicitly determine that e.g., the \"equipment\" is actually of type \"network card\".",
      "zh-CHS": "o 由于特定网络元素具有需要管理的特定类型的组件（操作系统映像、插件模块、设备等），因此应该可以定义具体类型，精确描述被管理对象。通过使用基本概念的类型安全扩展，具有管理员角色的系统可以安全明确地确定“设备”实际上是“网卡”类型。"
    },
    {
      "indent": 3,
      "text": "o Currently, different SDOs are working on the harmonization of their management information models. Often, a model mapping or transformation between systems becomes necessary. The harmonization of the models is done e.g., by mapping of the two models on the object level or integrating an object hierarchy into an existing information model. On the one hand, extending YANG with language abstractions can simplify the adoption of IETF resource models by other SDOs and facilitate the alignment with other SDOs' resource models (e.g., TM Forum SID [SID_V8]). On the other hand, the proposed YANG extensions can enable the utilization of the YANG modeling language in other SDOs, which usually model complex management systems in a top-down manner and use high-level language features frequently.",
      "zh-CHS": "o 目前，不同的SDO正在协调其管理信息模型。通常，需要在系统之间进行模型映射或转换。模型的协调是通过在对象级别映射两个模型或将对象层次结构集成到现有信息模型中来完成的。一方面，通过语言抽象扩展YANG可以简化其他SDO对IETF资源模型的采用，并有助于与其他SDO的资源模型（例如TM Forum SID[SID_V8]）保持一致。另一方面，提议的YANG扩展可以在其他SDO中使用YANG建模语言，这些SDO通常以自顶向下的方式对复杂的管理系统进行建模，并经常使用高级语言功能。"
    },
    {
      "indent": 3,
      "text": "This memo specifies additional modeling features for the YANG language in the area of structured model abstractions, typed references, as well as recursive data structures, and it discusses how these new features can improve the modeling capabilities of YANG.",
      "zh-CHS": "本备忘录规定了YANG语言在结构化模型抽象、类型化引用以及递归数据结构方面的其他建模功能，并讨论了这些新功能如何提高YANG的建模能力。"
    },
    {
      "indent": 3,
      "text": "Section 1.5.1 contains a physical resource model that deals with some of the modeling challenges illustrated above. Section 1.5.2 gives an example that uses the base classes defined in the physical resource model and derives a model for physical entities defined in the Entity MIB.",
      "zh-CHS": "第1.5.1节包含一个物理资源模型，该模型处理上述一些建模挑战。第1.5.2节给出了一个使用物理资源模型中定义的基类并为实体MIB中定义的物理实体派生模型的示例。"
    },
    {
      "indent": 0,
      "text": "1.3. Modeling Improvements with Language Abstractions",
      "section_title": true,
      "zh-CHS": "1.3. 语言抽象的建模改进"
    },
    {
      "indent": 3,
      "text": "As an enhancement to YANG 1.0, complex types and typed instance identifiers provide different technical improvements on the modeling level:",
      "zh-CHS": "作为对YANG 1.0的增强，复杂类型和类型化实例标识符在建模级别提供了不同的技术改进："
    },
    {
      "indent": 3,
      "text": "o In case the model of a system that should be managed with NETCONF makes use of inheritance, complex types enable an almost one-to-one mapping between the classes in the original model and the YANG module.",
      "zh-CHS": "o 如果应该使用NETCONF管理的系统模型使用继承，那么复杂类型可以在原始模型和模块中的类之间实现几乎一对一的映射。"
    },
    {
      "indent": 3,
      "text": "o Typed instance identifiers allow representing associations between the concepts in a type-safe way to prevent type errors caused by referring to data nodes of incompatible types. This avoids referring to a particular location in the MIB. Referring to a particular location in the MIB is not mandated by the domain model.",
      "zh-CHS": "o 类型化实例标识符允许以类型安全的方式表示概念之间的关联，以防止由于引用不兼容类型的数据节点而导致的类型错误。这样可以避免引用MIB中的特定位置。域模型不强制引用MIB中的特定位置。"
    },
    {
      "indent": 3,
      "text": "o Complex types allow defining complete, self-contained type definitions. It is not necessary to explicitly add a key statement to lists, which use a grouping that defines the data nodes.",
      "zh-CHS": "o 复杂类型允许定义完整、自包含的类型定义。无需向列表显式添加键语句，列表使用定义数据节点的分组。"
    },
    {
      "indent": 3,
      "text": "o Complex types simplify concept refinement by extending a base complex type and make it superfluous to represent concept refinements with workarounds such as huge choice-statements with complex branches.",
      "zh-CHS": "o 复杂类型通过扩展基本复杂类型简化了概念精化，并使使用变通方法（如具有复杂分支的大型choice语句）表示概念精化变得多余。"
    },
    {
      "indent": 3,
      "text": "o Abstract complex types ensure correct usage of abstract concepts by enforcing the refinement of a common set of properties before instantiation.",
      "zh-CHS": "o 抽象复杂类型通过在实例化之前强制细化一组公共属性来确保正确使用抽象概念。"
    },
    {
      "indent": 3,
      "text": "o Complex types allow defining recursive structures. This enables representing complex structures of arbitrary depth by nesting instances of basic complex types that may contain themselves.",
      "zh-CHS": "o 复杂类型允许定义递归结构。这使得能够通过嵌套可能包含自身的基本复杂类型的实例来表示任意深度的复杂结构。"
    },
    {
      "indent": 3,
      "text": "o Complex types avoid introducing metadata types (e.g., type code enumerations) and metadata leafs (e.g., leafs containing a type code) to indicate which concrete type of object is actually represented by a generic container in the MIB. This also avoids explicitly ruling out illegal use of subtype-specific properties in generic containers.",
      "zh-CHS": "o 复杂类型避免引入元数据类型（例如，类型代码枚举）和元数据叶（例如，包含类型代码的叶）来指示MIB中的泛型容器实际表示的对象的具体类型。这还避免了明确排除在泛型容器中非法使用特定于子类型的属性。"
    },
    {
      "indent": 3,
      "text": "o Complex type instances include the type information in the NETCONF payload. This allows determining the actual type of an instance during the NETCONF payload parsing and avoids the use in the model of additional leafs, which provide the type information as content.",
      "zh-CHS": "o 复杂类型实例包括NETCONF负载中的类型信息。这允许在NETCONF负载解析期间确定实例的实际类型，并避免在模型中使用额外的leaf，后者将类型信息作为内容提供。"
    },
    {
      "indent": 3,
      "text": "o Complex types may be declared explicitly as optional features, which is not possible when the actual type of an entity represented by a generic container is indicated with a type code enumeration.",
      "zh-CHS": "o 复杂类型可以显式声明为可选功能，当泛型容器表示的实体的实际类型用类型代码枚举表示时，这是不可能的。"
    },
    {
      "indent": 3,
      "text": "Appendix B, \"Example YANG Module for the IPFIX/PSAMP Model\", lists technical improvements for modeling with complex types and typed instance identifiers and exemplifies the usage of the proposed YANG extensions based on the IP Flow Information Export (IPFIX) / Packet Sampling (PSAMP) configuration model in [IPFIXCONF].",
      "zh-CHS": "附录B“IPFIX/PSAMP模型的示例YANG模块”列出了使用复杂类型和类型化实例标识符进行建模的技术改进，并举例说明了基于[IPFIXCONF]中IP流信息导出（IPFIX）/数据包采样（PSAMP）配置模型的拟议YANG扩展的使用。"
    },
    {
      "indent": 0,
      "text": "1.4. Design Approach",
      "section_title": true,
      "zh-CHS": "1.4. 设计方法"
    },
    {
      "indent": 3,
      "text": "The proposed additional features for YANG in this memo are designed to reuse existing YANG statements whenever possible. Additional semantics is expressed by an extension that is supposed to be used as a substatement of an existing statement.",
      "zh-CHS": "本备忘录中为YANG提出的附加功能旨在尽可能重用现有的YANG语句。附加语义由一个扩展来表示，该扩展应该用作现有语句的子语句。"
    },
    {
      "indent": 3,
      "text": "The proposed features don't change the semantics of models that is valid with respect to the YANG specification [RFC6020].",
      "zh-CHS": "建议的特性不会改变YANG规范[RFC6020]中有效的模型语义。"
    },
    {
      "indent": 0,
      "text": "1.5. Modeling Resource Models with YANG",
      "section_title": true,
      "zh-CHS": "1.5. 基于YANG的资源模型建模"
    },
    {
      "indent": 0,
      "text": "1.5.1. Example of a Physical Network Resource Model",
      "section_title": true,
      "zh-CHS": "1.5.1. 物理网络资源模型示例"
    },
    {
      "indent": 3,
      "text": "The diagram below depicts a portion of an information model for manageable network resources used in an actual network management system.",
      "zh-CHS": "下图描述了实际网络管理系统中使用的可管理网络资源的信息模型的一部分。"
    },
    {
      "indent": 3,
      "text": "Note: The referenced model (UDM, Unified Data Model) is based on key resource modeling concepts from [SID_V8] and is compliant with selected parts of SID Resource Abstract Business Entities domain [UDM].",
      "zh-CHS": "注：参考模型（UDM，统一数据模型）基于[SID_V8]中的关键资源建模概念，并符合SID资源抽象业务实体域[UDM]的选定部分。"
    },
    {
      "indent": 3,
      "text": "The class diagram in Figure 1 and the corresponding YANG module excerpt focus on basic resource (\"Resource\" and the distinction between logical and physical resources) and hardware abstractions (\"Hardware\", \"Equipment\", and \"EquipmentHolder\"). Class attributes were omitted to achieve decent readability.",
      "zh-CHS": "图1中的类图和相应的YANG模块摘录侧重于基本资源（“资源”以及逻辑和物理资源之间的区别）和硬件抽象（“硬件”、“设备”和“设备持有者”）。为了获得良好的可读性，省略了类属性。"
    },
    {
      "indent": 0,
      "text": "+--------+\n|Resource|\n+--------+\n /\\   /\\\n --   --\n |    |\n |  +---------------+\n |  |LogicalResource|\n |  +---------------+\n |\n | +--------+\n | |Physical|      +-----------+\n '-|Resource|<|-+-|PhysicalLink|\n   +---- ---+   | +------------+\n                |     |0..* physicalLink\n                |     |                                       equipment\n                |     |                                       Holder\n                |     |                                       0..*\n                |     |                                       +-------+\n                |     |0..* hardware                          |       |\n                | +--------+     +---------------+     +---------+    |\n                '-|Hardware|<|-+-|ManagedHardware|<|-+-|Equipment|<>--+\n                  +--------+   | +---------------+   | | Holder  |0..1\n                      <>       |                     | +---------+\n                  0..1|        |                     |   <>\n                      |        |                     |   |0..* equipment\n                      |        |                     |   |     Holder\n                      |        |                     |   |\n                      |        |                     |   |0..* equipment\n                      |        |                     |   |\n                      |        |                     |   |    equipment\n                      |        |                     |   |    0..*\n                      |        |                     |   |    +-------+\n                      |        |                     |   |    |       |\n                      |        |                     | +---------+    |\n                      |        |                     '-|Equipment|<>--+\n                      |        |                       +---------+0..1\n                      |        |                    compositeEquipment\n                      |        |\n                      |        | +-----------------+\n                      |        '-|PhysicalConnector|----+0..* source\n                      '----------+-----------------+    |     Physical\n           physicalConnector 0..*           |           |     Connector\n                                            |           |\n                                            +-----------+\n                                            0..* targetPhysicalConnector",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 17,
      "text": "Figure 1: Physical Network Resource Model",
      "zh-CHS": "图1：物理网络资源模型"
    },
    {
      "indent": 3,
      "text": "Since this model is an abstraction of network-element-specific MIB topologies, modeling it with YANG creates some challenges. Some of these challenges and how they can be addressed with complex types are explained below:",
      "zh-CHS": "由于该模型是特定于网元的MIB拓扑的抽象，因此使用YANG对其进行建模会带来一些挑战。下面解释其中一些挑战以及如何使用复杂类型解决这些挑战："
    },
    {
      "indent": 3,
      "text": "o Modeling of abstract concepts: Classes like \"Resource\" represent concepts that primarily serve as a base class for derived classes. With complex types, such an abstract concept could be represented by an abstract complex type (see \"complex-type extension statement\" and \"abstract extension statement\").",
      "zh-CHS": "o 抽象概念的建模：“资源”类表示主要用作派生类基类的概念。对于复杂类型，这样的抽象概念可以用抽象复杂类型表示（请参见“复杂类型扩展语句”和“抽象扩展语句”）。"
    },
    {
      "indent": 3,
      "text": "o Class Inheritance: Information models for complex management domains often use class inheritance to create specialized classes like \"PhysicalConnector\" from a more generic base class (here, \"Hardware\"), which itself might inherit from another base class (\"PhysicalResource\"), etc. Complex types allow creating enhanced versions of an existing (abstract or concrete) base type via an extension (see \"extends extension statement\").",
      "zh-CHS": "o 类继承：复杂管理域的信息模型通常使用类继承从更通用的基类（此处为“硬件”）创建专门的类，如“PhysicalConnector”，其本身可能从另一个基类（“PhysicalResource”）等继承。复杂类型允许创建现有类的增强版本（抽象或具体）通过扩展的基类型（请参阅“扩展扩展语句”）。"
    },
    {
      "indent": 3,
      "text": "o Recursive containment: In order to specify containment hierarchies, models frequently contain different aggregation associations, in which the target (contained element) is either the containing class itself or a base class of the containing class. In the model above, the recursive containment of \"EquipmentHolder\" is an example of such a relationship (see the description for the \"complex-type EquipmentHolder\" in the example model \"udmcore\" below).",
      "zh-CHS": "o 递归包含：为了指定包含层次结构，模型通常包含不同的聚合关联，其中目标（包含的元素）要么是包含类本身，要么是包含类的基类。在上面的模型中，“EquipmentHolder”的递归包含就是这种关系的一个例子（参见下面的示例模型“udmcore”中“复杂类型EquipmentHolder”的描述）。"
    },
    {
      "indent": 3,
      "text": "o Complex types support such a containment by using a complex type (or one of its ancestor types) as the type of an instance or instance list that is part of its definition (see \"instance(-list) extension statement\").",
      "zh-CHS": "o 复杂类型通过使用复杂类型（或其祖先类型之一）作为实例的类型或作为其定义一部分的实例列表（请参阅“实例（-list）扩展语句”）来支持这种包含。"
    },
    {
      "indent": 3,
      "text": "o Reference relationships: A key requirement on large models for network domains with many related managed objects is the ability to define inter-class associations that represent essential relationships between instances of such a class. For example, the relationship between \"PhysicalLink\" and \"Hardware\" tells which physical link is connecting which hardware resources. It is important to notice that this kind of relationship does not mandate any particular location of the two connected hardware instances in any MIB module. Such containment-agnostic relationships can be represented by a typed instance identifier that embodies one direction of such an association (see Section 3, \"Typed Instance Identifier\").",
      "zh-CHS": "o 引用关系：对于具有许多相关托管对象的网络域，大型模型的一个关键要求是能够定义类间关联，这些关联表示此类实例之间的基本关系。例如，“PhysicalLink”和“Hardware”之间的关系告诉我们哪个物理链接正在连接哪些硬件资源。需要注意的是，这种关系并不要求在任何MIB模块中指定两个连接的硬件实例的任何特定位置。这种包含不可知关系可以由类型化实例标识符表示，该标识符体现了这种关联的一个方向（参见第3节“类型化实例标识符”）。"
    },
    {
      "indent": 3,
      "text": "The YANG module excerpt below shows how the challenges listed above can be addressed by the Complex Types extension (module import prefix \"ct:\"). The complete YANG module for the physical resource model in Figure 1 can be found in Appendix A, \"YANG Modules for Physical Network Resource Model and Hardware Entities Model\".",
      "zh-CHS": "下面的模块摘录显示了复杂类型扩展（模块导入前缀“ct:”）如何解决上面列出的挑战。图1中物理资源模型的完整YANG模块可在附录A“物理网络资源模型和硬件实体模型的YANG模块”中找到。"
    },
    {
      "indent": 3,
      "text": "Note: The YANG extensions proposed in this document have been implemented as the open source tools \"Pyang Extension for Complex Types\" [Pyang-ct], [Pyang], and \"Libsmi Extension for Complex Types\" [Libsmi]. All model examples in the document have been validated with the tools Pyang-ct and Libsmi.",
      "zh-CHS": "注：本文档中提出的YANG扩展已作为开源工具“Pyang Extension for Complex Types”[Pyang ct]、[Pyang]和“Libsmi Extension for Complex Types”[Libsmi]实现。文档中的所有模型示例都已使用Pyang ct和Libsmi工具进行了验证。"
    },
    {
      "indent": 0,
      "text": "<CODE BEGINS>",
      "zh-CHS": "<代码开始>"
    },
    {
      "indent": 0,
      "text": "module udmcore {",
      "zh-CHS": "udmcore模块{"
    },
    {
      "indent": 3,
      "text": "namespace \"http://example.com/udmcore\";\nprefix \"udm\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "import ietf-complex-types {prefix \"ct\"; }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 8,
      "text": "// Basic complex types...",
      "zh-CHS": "//基本复杂类型。。。"
    },
    {
      "indent": 3,
      "text": "ct:complex-type PhysicalResource {\n   ct:extends Resource;\n     ct:abstract true;\n     // ...\n     leaf serialNumber {\n      type string;\n      description \"'Manufacturer-allocated part number' as\n        defined in SID, e.g., the part number of a fiber link\n        cable.\";\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "   ct:complex-type Hardware {\n      ct:extends PhysicalResource;\n        ct:abstract true;\n        // ...\n       leaf-list physicalLink {\n          type instance-identifier {ct:instance-type PhysicalLink;}\n       }\n       ct:instance-list containedHardware {\n       ct:instance-type Hardware;\n}\n       ct:instance-list physicalConnector {\n       ct:instance-type PhysicalConnector;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "}\n   }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ct:complex-type PhysicalLink {\n    ct:extends PhysicalResource;\n    // ...\n    leaf-list hardware {\n       type instance-identifier {ct:instance-type Hardware;}\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ct:complex-type ManagedHardware {\n   ct:extends Hardware;\n     ct:abstract true;\n     // ...\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ct:complex-type PhysicalConnector {\n   ct:extends Hardware;\n     leaf location {type string;}\n     // ...\n   leaf-list sourcePhysicalConnector {\n      type instance-identifier {ct:instance-type PhysicalConnector;}\n   }\n   leaf-list targetPhysicalConnector {\n      type instance-identifier {ct:instance-type PhysicalConnector;}\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "   ct:complex-type Equipment {\n      ct:extends ManagedHardware;\n        // ...\n      ct:instance-list equipment {\n    ct:instance-type Equipment;\n}\n   }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ct:complex-type EquipmentHolder {\n   ct:extends ManagedHardware;\n   description \"In the SID V8 definition, this is a class based on\n     the M.3100 specification.  A base class that represents physical\n     objects that are both manageable as well as able to host,\n     hold, or contain other physical objects.  Examples of physical",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "        objects that can be represented by instances of this object\n        class are Racks, Chassis, Cards, and Slots.\n        A piece of equipment with the primary purpose of containing\n        other equipment.\";\n        leaf vendorName {type string;}\n        // ...\n      ct:instance-list equipment {\n       ct:instance-type Equipment;\n        }\n      ct:instance-list equipmentHolder {\n       ct:instance-type EquipmentHolder;\n       }\n   }\n   // ...\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<CODE ENDS>",
      "zh-CHS": "<代码结束>"
    },
    {
      "indent": 0,
      "text": "1.5.2. Modeling Entity MIB Entries as Physical Resources",
      "section_title": true,
      "zh-CHS": "1.5.2. 将实体MIB条目建模为物理资源"
    },
    {
      "indent": 3,
      "text": "The physical resource module described above can now be used to model physical entities as defined in the Entity MIB [RFC4133]. For each physical entity class listed in the \"PhysicalClass\" enumeration, a complex type is defined. Each of these complex types extends the most specific complex type already available in the physical resource module. For example, the type \"HWModule\" extends the complex type \"Equipment\" as a hardware module. Physical entity properties that should be included in a physical entity complex type are combined in a grouping, which is then used in each complex type definition of an entity.",
      "zh-CHS": "上述物理资源模块现在可用于实体MIB[RFC4133]中定义的物理实体建模。对于“PhysicalClass”枚举中列出的每个物理实体类，定义了一个复杂类型。这些复杂类型中的每一个都扩展了物理资源模块中已有的最具体的复杂类型。例如，“HWModule”类型将复杂类型“Equipment”扩展为硬件模块。应包含在物理实体复杂类型中的物理实体属性组合在一个分组中，然后在实体的每个复杂类型定义中使用该分组。"
    },
    {
      "indent": 3,
      "text": "This approach has following benefits:",
      "zh-CHS": "这种方法有以下好处："
    },
    {
      "indent": 3,
      "text": "o The definition of the complex types for hardware entities becomes compact as many of the features can be reused from the basic complex type definition.",
      "zh-CHS": "o 硬件实体的复杂类型定义变得紧凑，因为许多功能可以从基本复杂类型定义中重用。"
    },
    {
      "indent": 3,
      "text": "o Physical entities are modeled in a consistent manner as predefined concepts are extended.",
      "zh-CHS": "o 随着预定义概念的扩展，物理实体以一致的方式建模。"
    },
    {
      "indent": 3,
      "text": "o Entity-MIB-specific attributes as well as vendor-specific attributes can be added without having to define separate extension data nodes.",
      "zh-CHS": "o 可以添加实体MIB特定属性以及供应商特定属性，而无需定义单独的扩展数据节点。"
    },
    {
      "indent": 3,
      "text": "                         Module udmcore  :  Module hardware-entities\n                                         :\n                             equipment   :\n                             Holder      :\n                             0..*        :\n                             +-------+   :\n                             |       |   :\n+---------------+     +---------+    |   :\n|ManagedHardware|<|-+-|Equipment|<>--+   :\n+---------------+   | | Holder  |0..1    :     +-------+\n                    | |         |<|---------+--|Chassis|\n                    | +---------+        :  |  +-------+\n                    |   <>               :  |\n                    |   |0..* equipment  :  |  +---------+\n                    |   |     Holder     :  '--|Container|\n                    |   |                :     +---------+\n                    |   |0..* equipment  :\n                    |   |                :\n                    |   |    equipment   :\n                    |   |    0..*        :\n                    |   |    +-------+   :\n                    |   |    |       |   :\n                    | +---------+    |   :\n                    '-|Equipment|<>--+   :     +--------+\n                      |         |<|---------+--|HWModule|\n                      +---------+        :  |  +--------+\n                   compositeEquipment    :  |\n                                         :  |  +---------+\n                                         :  |--|Backplane|\n                                         :     +---------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 21,
      "text": "Figure 2: Hardware Entities Model",
      "zh-CHS": "图2：硬件实体模型"
    },
    {
      "indent": 3,
      "text": "Below is an excerpt of the corresponding YANG module using complex types to model hardware entities. The complete YANG module for the Hardware Entities model in Figure 2 can be found in Appendix A, \"YANG Modules for Physical Network Resource Model and Hardware Entities Model\".",
      "zh-CHS": "下面是使用复杂类型对硬件实体建模的相应模块的摘录。图2中硬件实体模型的完整YANG模块可在附录A“物理网络资源模型和硬件实体模型的YANG模块”中找到。"
    },
    {
      "indent": 0,
      "text": "<CODE BEGINS>",
      "zh-CHS": "<代码开始>"
    },
    {
      "indent": 0,
      "text": "module hardware-entities {",
      "zh-CHS": "模块硬件实体{"
    },
    {
      "indent": 3,
      "text": "namespace \"http://example.com/hardware-entities\";\nprefix \"hwe\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "import ietf-yang-types {prefix \"yt\";}\nimport ietf-complex-types {prefix \"ct\";}\nimport udmcore {prefix \"uc\";}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "grouping PhysicalEntityProperties {\n   // ...\n   leaf mfgDate {type yang:date-and-time; }\n   leaf-list uris {type string; }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "// Physical entities representing equipment",
      "zh-CHS": "//代表设备的物理实体"
    },
    {
      "indent": 3,
      "text": "ct:complex-type HWModule {\n   ct:extends uc:Equipment;\n   description \"Complex type representing module entries\n                (entPhysicalClass = module(9)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "// ...",
      "zh-CHS": "// ..."
    },
    {
      "indent": 3,
      "text": "// Physical entities representing equipment holders",
      "zh-CHS": "//代表设备持有人的实体"
    },
    {
      "indent": 3,
      "text": "ct:complex-type Chassis {\n   ct:extends uc:EquipmentHolder;\n   description \"Complex type representing chassis entries\n                (entPhysicalClass = chassis(3)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": " // ... }",
      "zh-CHS": "// ... }"
    },
    {
      "indent": 0,
      "text": "<CODE ENDS>",
      "zh-CHS": "<代码结束>"
    },
    {
      "indent": 0,
      "text": "2. Complex Types",
      "section_title": true,
      "zh-CHS": "2. 复杂类型"
    },
    {
      "indent": 0,
      "text": "2.1. Definition",
      "section_title": true,
      "zh-CHS": "2.1. 释义"
    },
    {
      "indent": 3,
      "text": "YANG type concept is currently restricted to simple types, e.g., restrictions of primitive types, enumerations, or union of simple types.",
      "zh-CHS": "YANG类型概念目前仅限于简单类型，例如，基本类型的限制、枚举或简单类型的并集。"
    },
    {
      "indent": 3,
      "text": "Complex types are types with a rich internal structure, which may be composed of substatements defined in Table 1 (e.g., lists, leafs, containers, choices). A new complex type may extend an existing complex type. This allows providing type-safe extensions to existing YANG models as instances of the new type.",
      "zh-CHS": "复杂类型是具有丰富内部结构的类型，可能由表1中定义的子状态组成（例如列表、叶子、容器、选项）。新的复杂类型可以扩展现有的复杂类型。这允许将现有模型作为新类型的实例提供类型安全扩展。"
    },
    {
      "indent": 3,
      "text": "Complex types have the following characteristics:",
      "zh-CHS": "复杂类型具有以下特征："
    },
    {
      "indent": 3,
      "text": "o Introduction of new types, as a named, formal description of a concrete manageable resource as well as abstract concepts.",
      "zh-CHS": "o 引入新类型，作为对具体可管理资源以及抽象概念的命名、形式化描述。"
    },
    {
      "indent": 3,
      "text": "o Types can be extended, i.e., new types can be defined by specializing existing types and adding new features. Instances of such an extended type can be used wherever instances of the base type may appear.",
      "zh-CHS": "o 可以扩展类型，也就是说，可以通过专门化现有类型和添加新功能来定义新类型。无论基类型的实例出现在何处，都可以使用这种扩展类型的实例。"
    },
    {
      "indent": 3,
      "text": "o The type information is made part of the NETCONF payload in case a derived type substitutes a base type. This enables easy and efficient consumption of payload elements representing complex type instances.",
      "zh-CHS": "o 在派生类型替换基类型的情况下，类型信息成为NETCONF有效负载的一部分。这使得能够轻松高效地使用表示复杂类型实例的有效负载元素。"
    },
    {
      "indent": 0,
      "text": "2.2. complex-type Extension Statement",
      "section_title": true,
      "zh-CHS": "2.2. 复杂类型扩展语句"
    },
    {
      "indent": 3,
      "text": "The extension statement \"complex-type\" is introduced; it accepts an arbitrary number of statements that define node trees, among other common YANG statements (\"YANG Statements\", Section 7 of [RFC6020]).",
      "zh-CHS": "引入了扩展语句complex-type；它接受任意数量的定义节点树的语句，以及其他常见的YANG语句（“YANG语句，[RFC6020]第7节”）。"
    },
    {
      "indent": 20,
      "text": "+------------------+-------------+\n|   substatement   | cardinality |\n+------------------+-------------+\n|     abstract     |     0..1    |\n|      anyxml      |     0..n    |\n|      choice      |     0..n    |\n|     container    |     0..n    |\n|    description   |     0..1    |\n|    ct:instance   |     0..n    |\n| ct:instance-list |     0..n    |\n|    ct:extends    |     0..1    |\n|     grouping     |     0..n    |\n|    if-feature    |     0..n    |\n|        key       |     0..1    |\n|       leaf       |     0..n    |\n|     leaf-list    |     0..n    |\n|       list       |     0..n    |\n|       must       |     0..n    |\n|    ordered-by    |     0..n    |\n|     reference    |     0..1    |\n|      refine      |     0..n    |\n|      status      |     0..1    |\n|      typedef     |     0..n    |\n|       uses       |     0..n    |\n+------------------+-------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 19,
      "text": "Table 1: complex-type's Substatements",
      "zh-CHS": "表1：复杂类型的子状态"
    },
    {
      "indent": 3,
      "text": "Complex type definitions may appear at every place where a grouping may be defined. That includes the module, submodule, rpc, input, output, notification, container, and list statements.",
      "zh-CHS": "复杂类型定义可能出现在定义分组的每个位置。包括模块、子模块、rpc、输入、输出、通知、容器和列表语句。"
    },
    {
      "indent": 3,
      "text": "Complex type names populate a distinct namespace. As with YANG groupings, it is possible to define a complex type and a data node (e.g., leaf, list, instance statements) with the same name in the same scope. All complex type names defined within a parent node or at the top level of the module or its submodules share the same type identifier namespace. This namespace is scoped to the parent node or module.",
      "zh-CHS": "复杂类型名称填充不同的命名空间。与YANG分组一样，可以在同一范围内定义具有相同名称的复杂类型和数据节点（例如，叶、列表、实例语句）。在父节点内或在模块或其子模块的顶层定义的所有复杂类型名称共享相同的类型标识符命名空间。此命名空间的作用域为父节点或模块。"
    },
    {
      "indent": 3,
      "text": "A complex type MAY have an instance key. An instance key is either defined with the \"key\" statement as part of the complex type or is inherited from the base complex type. It is not allowed to define an additional key if the base complex type or one of its ancestors already defines a key.",
      "zh-CHS": "复杂类型可能具有实例键。实例键要么是作为复杂类型的一部分使用“key”语句定义的，要么是从基本复杂类型继承的。如果基本复杂类型或其祖先之一已定义了键，则不允许定义其他键。"
    },
    {
      "indent": 3,
      "text": "Complex type definitions do not create nodes in the schema tree.",
      "zh-CHS": "复杂类型定义不会在架构树中创建节点。"
    },
    {
      "indent": 0,
      "text": "2.3. instance Extension Statement",
      "section_title": true,
      "zh-CHS": "2.3. 实例扩展语句"
    },
    {
      "indent": 3,
      "text": "The \"instance\" extension statement is used to instantiate a complex type by creating a subtree in the management information node tree. The instance statement takes one argument that is the identifier of the complex type instance. It is followed by a block of substatements.",
      "zh-CHS": "“instance”扩展语句用于通过在管理信息节点树中创建子树来实例化复杂类型。instance语句接受一个参数，该参数是复杂类型实例的标识符。它后面是一块子语句。"
    },
    {
      "indent": 3,
      "text": "The type of the instance is specified with the mandatory \"ct: instance-type\" substatement. The type of an instance MUST be a complex type. Common YANG statements may be used as substatements of the \"instance\" statement. An instance is optional by default. To make an instance mandatory, \"mandatory true\" has to be applied as a substatement.",
      "zh-CHS": "实例的类型由强制的“ct:instance type”子语句指定。实例的类型必须是复杂类型。公共语句可以用作“实例”语句的子语句。默认情况下，实例是可选的。要使实例成为必需的，必须将“mandatory true”作为子语句应用。"
    },
    {
      "indent": 20,
      "text": "+------------------+-------------+\n|   substatement   | cardinality |\n+------------------+-------------+\n|    description   |     0..1    |\n|      config      |     0..1    |\n| ct:instance-type |      1      |\n|    if-feature    |     0..n    |\n|     mandatory    |     0..1    |\n|       must       |     0..n    |\n|     reference    |     0..1    |\n|      status      |     0..1    |\n|       when       |     0..1    |\n|      anyxml      |     0..n    |\n|      choice      |     0..n    |\n|     container    |     0..n    |\n|    ct:instance   |     0..n    |\n| ct:instance-list |     0..n    |\n|       leaf       |     0..n    |\n|     leaf-list    |     0..n    |\n|       list       |     0..n    |\n+------------------+-------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 21,
      "text": "Table 2: instance's Substatements",
      "zh-CHS": "表2：实例的子语句"
    },
    {
      "indent": 3,
      "text": "The \"instance\" and \"instance-list\" extension statements (see Section 2.4, \"instance-list Extension Statement\") are similar to the existing \"leaf\" and \"leaf-list\" statements, with the exception that the content is composed of subordinate elements according to the instantiated complex type.",
      "zh-CHS": "“实例”和“实例列表”扩展语句（参见第2.4节“实例列表扩展语句”）与现有的“叶”和“叶列表”语句类似，只是内容根据实例化的复杂类型由从属元素组成。"
    },
    {
      "indent": 3,
      "text": "It is also possible to add additional data nodes by using the corresponding leaf, leaf-list, list, and choice-statements, etc., as substatements of the instance declaration. This is an in-place",
      "zh-CHS": "还可以使用相应的叶、叶列表、列表和选择语句等作为实例声明的子语句来添加其他数据节点。这是一个到位的解决方案"
    },
    {
      "indent": 3,
      "text": "augmentation of the used complex type confined to a complex type instantiation (see also Section 2.13, \"Using Complex Types\", for details on augmenting complex types).",
      "zh-CHS": "仅限于复杂类型实例化的已用复杂类型的扩充（有关扩充复杂类型的详细信息，请参见第2.13节“使用复杂类型”）。"
    },
    {
      "indent": 0,
      "text": "2.4. instance-list Extension Statement",
      "section_title": true,
      "zh-CHS": "2.4. 实例列表扩展语句"
    },
    {
      "indent": 3,
      "text": "The \"instance-list\" extension statement is used to instantiate a complex type by defining a sequence of subtrees in the management information node tree. In addition, the \"instance-list\" statement takes one argument that is the identifier of the complex type instances. It is followed by a block of substatements.",
      "zh-CHS": "“instance list”扩展语句用于通过在管理信息节点树中定义一系列子树来实例化复杂类型。此外，“instancelist”语句接受一个参数，该参数是复杂类型实例的标识符。它后面是一块子语句。"
    },
    {
      "indent": 3,
      "text": "The type of the instance is specified with the mandatory \"ct: instance-type\" substatement. In addition, it can be defined how often an instance may appear in the schema tree by using the \"min-elements\" and \"max-elements\" substatements. Common YANG statements may be used as substatements of the \"instance-list\" statement.",
      "zh-CHS": "实例的类型由强制的“ct:instance type”子语句指定。此外，还可以通过使用“最小元素”和“最大元素”子状态来定义实例在模式树中出现的频率。公共语句可以用作“实例列表”语句的子语句。"
    },
    {
      "indent": 3,
      "text": "In analogy to the \"instance\" statement, YANG substatements like \"list\", \"choice\", \"leaf\", etc., MAY be used to augment the \"instance-list\" elements at the root level with additional data nodes.",
      "zh-CHS": "与“instance”语句类似，可以使用诸如“list”、“choice”、“leaf”等子语句在根级别用额外的数据节点扩充“instance list”元素。"
    },
    {
      "indent": 20,
      "text": "+------------------+-------------+\n|   substatementc  | cardinality |\n+------------------+-------------+\n|    description   |     0..1    |\n|      config      |     0..1    |\n| ct:instance-type |      1      |\n|    if-feature    |     0..n    |\n|   max-elements   |     0..1    |\n|   min-elements   |     0..1    |\n|       must       |     0..n    |\n|    ordered-by    |     0..1    |\n|     reference    |     0..1    |\n|      status      |     0..1    |\n|       when       |     0..1    |\n|      anyxml      |     0..n    |\n|      choice      |     0..n    |\n|     container    |     0..n    |\n|    ct:instance   |     0..n    |\n| ct:instance-list |     0..n    |\n|       leaf       |     0..n    |\n|     leaf-list    |     0..n    |\n|       list       |     0..n    |\n+------------------+-------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 18,
      "text": "Table 3: instance-list's Substatements",
      "zh-CHS": "表3：实例列表的子状态"
    },
    {
      "indent": 3,
      "text": "In case the instance list represents configuration data, the used complex type of an instance MUST have an instance key.",
      "zh-CHS": "如果实例列表表示配置数据，则所使用的复杂实例类型必须具有实例密钥。"
    },
    {
      "indent": 3,
      "text": "Instances as well as instance lists may appear as arguments of the \"deviate\" statement.",
      "zh-CHS": "实例以及实例列表可能会显示为“偏离”语句的参数。"
    },
    {
      "indent": 0,
      "text": "2.5. extends Extension Statement",
      "section_title": true,
      "zh-CHS": "2.5. 扩展扩展语句"
    },
    {
      "indent": 3,
      "text": "A complex type MAY extend exactly one existing base complex type by using the \"extends\" extension statement. The keyword \"extends\" MAY occur as a substatement of the \"complex-type\" extension statement. The argument of the \"complex-type\" extension statement refers to the base complex type via its name. In case a complex type represents configuration data (the default), it MUST have a key; otherwise, it MAY have a key. A key is either defined with the \"key\" statement as part of the complex type or is inherited from the base complex type.",
      "zh-CHS": "复杂类型可以通过使用“extends”扩展语句精确扩展一个现有的基本复杂类型。关键字“extends”可以作为“complex type”扩展语句的子语句出现。“复杂类型”扩展语句的参数通过其名称引用基本复杂类型。如果复杂类型表示配置数据（默认值），则必须具有密钥；否则，它可能有一个键。键可以用“key”语句定义为复杂类型的一部分，也可以从基复杂类型继承。"
    },
    {
      "indent": 22,
      "text": "+--------------+-------------+\n| substatement | cardinality |\n+--------------+-------------+\n|  description |     0..1    |\n|   reference  |     0..1    |\n|    status    |     0..1    |\n+--------------+-------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 22,
      "text": "Table 4: extends' Substatements",
      "zh-CHS": "表4：扩展的子状态"
    },
    {
      "indent": 0,
      "text": "2.6. abstract Extension Statement",
      "section_title": true,
      "zh-CHS": "2.6. 抽象扩展语句"
    },
    {
      "indent": 3,
      "text": "Complex types may be declared to be abstract by using the \"abstract\" extension statement. An abstract complex type cannot be instantiated, meaning it cannot appear as the most specific type of an instance in the NETCONF payload. In case an abstract type extends a base type, the base complex type MUST be also abstract. By default, complex types are not abstract.",
      "zh-CHS": "复杂类型可以通过使用“abstract”扩展语句声明为抽象类型。抽象复杂类型无法实例化，这意味着它不能作为NETCONF负载中最具体的实例类型出现。如果抽象类型扩展了基类型，则基复杂类型也必须是抽象的。默认情况下，复杂类型不是抽象类型。"
    },
    {
      "indent": 3,
      "text": "The abstract complex type serves only as a base type for derived concrete complex types and cannot be used as a type for an instance in the NETCONF payload.",
      "zh-CHS": "抽象复杂类型仅用作派生的具体复杂类型的基类型，不能用作NETCONF负载中实例的类型。"
    },
    {
      "indent": 3,
      "text": "The \"abstract\" extension statement takes a single string argument, which is either \"true\" or \"false\". In case a \"complex-type\" statement does not contain an \"abstract\" statement as a substatement, the default is \"false\". The \"abstract\" statement does not support any substatements.",
      "zh-CHS": "“abstract”扩展语句接受单个字符串参数，该参数为“true”或“false”。如果“复杂类型”语句不包含“抽象”语句作为子语句，则默认值为“false”。“abstract”语句不支持任何子语句。"
    },
    {
      "indent": 0,
      "text": "2.7. XML Encoding Rules",
      "section_title": true,
      "zh-CHS": "2.7. XML编码规则"
    },
    {
      "indent": 3,
      "text": "An \"instance\" node is encoded as an XML element, where an \"instance-list\" node is encoded as a series of XML elements. The corresponding XML element names are the \"instance\" and \"instance-list\" identifiers, respectively, and they use the same XML namespace as the module.",
      "zh-CHS": "“实例”节点编码为XML元素，其中“实例列表”节点编码为一系列XML元素。相应的XML元素名称分别是“实例”和“实例列表”标识符，它们使用与模块相同的XML名称空间。"
    },
    {
      "indent": 3,
      "text": "Instance child nodes are encoded as subelements of the instance XML element. Subelements representing child nodes defined in the same complex type may appear in any order. However, child nodes of an extending complex type follow the child nodes of the extended complex type. As such, the XML encoding of lists is similar to the encoding of containers and lists in YANG.",
      "zh-CHS": "实例子节点编码为实例XML元素的子元素。表示在同一复杂类型中定义的子节点的子元素可以以任何顺序出现。但是，扩展复杂类型的子节点跟随扩展复杂类型的子节点。因此，列表的XML编码类似于YANG中容器和列表的编码。"
    },
    {
      "indent": 3,
      "text": "Instance key nodes are encoded as subelements of the instance XML element. Instance key nodes must appear in the same order as they are defined within the \"key\" statement of the corresponding complex type definition and precede all other nodes defined in the same complex type. That is, if key nodes are defined in an extending complex type, XML elements representing key data precede all other XML elements representing child nodes. On the other hand, XML elements representing key data follow the XML elements representing data nodes of the base type.",
      "zh-CHS": "实例键节点编码为实例XML元素的子元素。实例键节点的出现顺序必须与它们在相应复杂类型定义的“key”语句中定义的顺序相同，并且必须位于同一复杂类型中定义的所有其他节点之前。也就是说，如果关键节点是在扩展复杂类型中定义的，则表示关键数据的XML元素优先于表示子节点的所有其他XML元素。另一方面，表示关键数据的XML元素遵循表示基本类型的数据节点的XML元素。"
    },
    {
      "indent": 3,
      "text": "The type of the actual complex type instance is encoded in a type element, which is put in front of all instance child elements, including key nodes, as described in Section 2.8 (\"Type Encoding Rules\").",
      "zh-CHS": "实际复杂类型实例的类型编码在类型元素中，该类型元素放在所有实例子元素（包括关键节点）的前面，如第2.8节（“类型编码规则”）所述。"
    },
    {
      "indent": 3,
      "text": "The proposed XML encoding rules conform to the YANG XML encoding rules in [RFC6020]. Compared to YANG, enabling key definitions in derived hierarchies is a new feature introduced with the complex types extension. As a new language feature, complex types also introduce a new payload entry for the instance type identifier.",
      "zh-CHS": "建议的XML编码规则符合[RFC6020]中的XML编码规则。与YANG相比，在派生层次结构中启用键定义是复杂类型扩展引入的一个新特性。作为一种新的语言特性，复杂类型还为实例类型标识符引入了一个新的有效负载条目。"
    },
    {
      "indent": 3,
      "text": "Based on our implementation experience, the proposed XML encoding rules support consistent mapping of YANG models with complex types to an XML schema using XML complex types.",
      "zh-CHS": "根据我们的实现经验，建议的XML编码规则支持使用XML复杂类型将复杂类型的模型一致映射到XML模式。"
    },
    {
      "indent": 0,
      "text": "2.8. Type Encoding Rules",
      "section_title": true,
      "zh-CHS": "2.8. 类型编码规则"
    },
    {
      "indent": 3,
      "text": "In order to encode the type of an instance in the NETCONF payload, XML elements named \"type\" belonging to the XML namespace \"urn:ietf:params:xml:ns:yang:ietf-complex-type-instance\" are added to the serialized form of instance and instance-list nodes in the payload. The suggested namespace prefix is \"cti\". The \"cti:type\" XML elements are inserted before the serialized form of all members that have been declared in the corresponding complex type definition.",
      "zh-CHS": "为了对NETCONF负载中的实例类型进行编码，将属于XML命名空间“urn:ietf:params:XML:ns:yang:ietf complex type instance”的名为“type”的XML元素添加到负载中实例和实例列表节点的序列化形式中。建议的名称空间前缀为“cti”。“cti:type”XML元素插入到相应复杂类型定义中声明的所有成员的序列化形式之前。"
    },
    {
      "indent": 3,
      "text": "The \"cti:type\" element is inserted for each type in the extension chain to the actual type of the instance (most specific last). Each type name includes its corresponding namespace.",
      "zh-CHS": "将为扩展链中的每个类型插入“cti:type”元素，使其成为实例的实际类型（最具体的最后一个）。每个类型名称都包含其相应的命名空间。"
    },
    {
      "indent": 3,
      "text": "The type of a complex type instance MUST be encoded in the reply to NETCONF <get> and <get-config> operations, and in the payload of a NETCONF <edit-config> operation if the operation is \"create\" or \"replace\". The type of the instance MUST also be specified in case <copy-config> is used to export a configuration to a resource addressed with an URI. The type of the instance has to be specified in user-defined remote procedure calls (RPCs).",
      "zh-CHS": "复杂类型实例的类型必须在对NETCONF<get>和<get config>操作的回复中编码，如果操作为“create”或“replace”，则必须在NETCONF<edit config>操作的有效负载中编码。如果使用<copy config>将配置导出到使用URI寻址的资源，则还必须指定实例的类型。实例的类型必须在用户定义的远程过程调用（RPC）中指定。"
    },
    {
      "indent": 3,
      "text": "The type of the instance MAY be specified in case the operation is \"merge\" (either because this is explicitly specified or no operation attribute is provided).",
      "zh-CHS": "在操作为“merge”的情况下，可以指定实例的类型（因为这是显式指定的，或者没有提供操作属性）。"
    },
    {
      "indent": 3,
      "text": "In case the node already exists in the target configuration and the type attribute (type of a complex type instance) is specified but differs from the data in the target, an <rpc-error> element is returned with an <error-app-tag> value of \"wrong-complex-type\". In case no such element is present in the target configuration but the type attribute is missing in the configuration data, an <rpc-error> element is returned with an <error-tag> value of \"missing-attribute\".",
      "zh-CHS": "如果目标配置中已经存在该节点，并且指定了type属性（复杂类型实例的类型），但与目标中的数据不同，则返回一个<rpc error>元素，其<error app tag>值为“error complex type”。如果目标配置中不存在此类元素，但配置数据中缺少type属性，则返回一个<rpc error>元素，其<error tag>值为“missing attribute”。"
    },
    {
      "indent": 3,
      "text": "The type MUST NOT be specified in case the operation is \"delete\".",
      "zh-CHS": "如果操作为“删除”，则不能指定类型。"
    },
    {
      "indent": 0,
      "text": "2.9. Extension and Feature Definition Module",
      "section_title": true,
      "zh-CHS": "2.9. 扩展和特征定义模块"
    },
    {
      "indent": 3,
      "text": "The module below contains all YANG extension definitions for complex types and typed instance identifiers. In addition, a \"complex-type\" feature is defined, which may be used to provide conditional or alternative modeling, depending on the support status of complex types in a NETCONF server. A NETCONF server that supports the modeling features for complex types and the XML encoding for complex types as defined in this document MUST advertise this as a feature. This is done by including the feature name \"complex-types\" in the feature parameter list as part of the NETCONF <hello> message as described in Section 5.6.4 in [RFC6020].",
      "zh-CHS": "下面的模块包含复杂类型和类型化实例标识符的所有扩展定义。此外，还定义了“复杂类型”功能，该功能可用于提供条件建模或替代建模，具体取决于NETCONF服务器中复杂类型的支持状态。支持复杂类型的建模功能和本文档中定义的复杂类型的XML编码的NETCONF服务器必须将其作为功能进行宣传。如[RFC6020]第5.6.4节所述，通过将功能名称“复杂类型”包含在功能参数列表中，作为NETCONF<hello>消息的一部分来实现。"
    },
    {
      "indent": 1,
      "text": "<CODE BEGINS> file \"ietf-complex-types@2011-03-15.yang\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 1,
      "text": "module ietf-complex-types {",
      "zh-CHS": "模块ietf复杂类型{"
    },
    {
      "indent": 4,
      "text": "namespace \"urn:ietf:params:xml:ns:yang:ietf-complex-types\";\nprefix \"ct\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "organization",
      "zh-CHS": "组织"
    },
    {
      "indent": 6,
      "text": "\"NETMOD WG\";",
      "zh-CHS": "“NETMOD WG”；"
    },
    {
      "indent": 4,
      "text": "contact\n  \"Editor:  Bernd Linowski\n            <bernd.linowski.ext@nsn.com>\n   Editor:  Mehmet Ersue\n            <mehmet.ersue@nsn.com>\n   Editor:  Siarhei Kuryla\n            <s.kuryla@gmail.com>\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "description \"YANG extensions for complex types and typed instance identifiers.",
      "zh-CHS": "description“复杂类型和类型化实例标识符的扩展。"
    },
    {
      "indent": 7,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as authors of the code. All rights reserved.",
      "zh-CHS": "版权所有（c）2011 IETF信托基金和被确定为代码作者的人员。版权所有。"
    },
    {
      "indent": 7,
      "text": "Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).",
      "zh-CHS": "根据IETF信托有关IETF文件的法律规定第4.c节规定的简化BSD许可证中包含的许可条款，允许以源代码和二进制格式重新分发和使用，无论是否修改(http://trustee.ietf.org/license-info)."
    },
    {
      "indent": 7,
      "text": "This version of this YANG module is part of RFC 6095; see the RFC itself for full legal notices.\";",
      "zh-CHS": "此模块的此版本是RFC 6095的一部分；有关完整的法律通知，请参见RFC本身。“；"
    },
    {
      "indent": 8,
      "text": "revision 2011-03-15 {\n    description \"Initial revision.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension complex-type {\n    description \"Defines a complex-type.\";\n    reference \"Section 2.2, complex-type Extension Statement\";\n    argument type-identifier {\n        yin-element true;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension extends {\n    description \"Defines the base type of a complex-type.\";\n    reference \"Section 2.5, extends Extension Statement\";\n    argument base-type-identifier {\n        yin-element true;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension abstract {\n    description \"Makes the complex-type abstract.\";\n    reference \"Section 2.6, abstract Extension Statement\";\n    argument status;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension instance {\n    description \"Declares an instance of the given\n         complex type.\";\n    reference \"Section 2.3, instance Extension Statement\";\n    argument ct-instance-identifier {\n        yin-element true;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension instance-list {\n    description \"Declares a list of instances of the given\n         complex type\";\n    reference \"Section 2.4, instance-list Extension Statement\";\n    argument ct-instance-identifier {\n        yin-element true;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "extension instance-type {\n    description \"Tells to which type instance the instance\n                 identifier refers.\";\n    reference \"Section 3.2, instance-type Extension Statement\";\n    argument target-type-identifier {\n        yin-element true;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "feature complex-types {\n    description \"Indicates that the server supports\n                 complex types and instance identifiers.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 1,
      "text": "<CODE ENDS>",
      "zh-CHS": "<代码结束>"
    },
    {
      "indent": 0,
      "text": "2.10. Example Model for Complex Types",
      "section_title": true,
      "zh-CHS": "2.10. 复杂类型的示例模型"
    },
    {
      "indent": 3,
      "text": "The example model below shows how complex types can be used to represent physical equipment in a vendor-independent, abstract way. It reuses the complex types defined in the physical resource model in Section 1.5.1.",
      "zh-CHS": "下面的示例模型显示了如何使用复杂类型以独立于供应商的抽象方式表示物理设备。它重用第1.5.1节中物理资源模型中定义的复杂类型。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "zh-CHS": "<代码开始>"
    },
    {
      "indent": 3,
      "text": "module hw {",
      "zh-CHS": "模块hw{"
    },
    {
      "indent": 6,
      "text": "namespace \"http://example.com/hw\";\nprefix \"hw\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "import ietf-complex-types {prefix \"ct\"; }\nimport udmcore {prefix \"uc\"; }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Holder types",
      "zh-CHS": "//支架类型"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Slot {\n        ct:extends uc:EquipmentHolder;\n        leaf slotNumber { type uint16; config false; }\n          // ...\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Chassis {\n        ct:extends uc:EquipmentHolder;\n        leaf numberOfChassisSlots { type uint32; config false; }\n          // ..\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Equipment types",
      "zh-CHS": "//设备类型"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Card {\n        ct:extends uc:Equipment;\n        leaf position { type uint32; mandatory true; }\n          leaf slotsRequired {type unit32; }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Root Element\n ct:instance hardware { type uc:ManagedHardware; }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "} // hw module",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "<CODE ENDS>",
      "zh-CHS": "<代码结束>"
    },
    {
      "indent": 0,
      "text": "2.11. NETCONF Payload Example",
      "section_title": true,
      "zh-CHS": "2.11. NETCONF有效负载示例"
    },
    {
      "indent": 3,
      "text": "Following example shows the payload of a reply to a NETCONF <get> command. The actual type of managed hardware instances is indicated with the \"cti:type\" elements as required by the type encoding rules. The containment hierarchy in the NETCONF XML payload reflects the containment hierarchy of hardware instances. This makes filtering based on the containment hierarchy possible without having to deal with values of leafs of type leafref that represent the tree structure in a flattened hierarchy.",
      "zh-CHS": "下面的示例显示了对NETCONF<get>命令的应答的有效负载。托管硬件实例的实际类型由类型编码规则所要求的“cti:type”元素指示。NETCONF XML负载中的包含层次结构反映了硬件实例的包含层次结构。这使得基于包容层次结构的过滤成为可能，而不必处理表示扁平层次结构中树结构的leafref类型的叶的值。"
    },
    {
      "indent": 1,
      "text": "<hardware>\n    <cti:type>uc:BasicObject</cti:type>\n    <distinguishedName>/R-T31/CH-2</distinguishedName>\n    <globalId>6278279001</globalId>\n    <cti:type>uc:Resource</cti:type>\n    <cti:type>uc:PhysicalResource</cti:type>\n    <otherIdentifier>Rack R322-1</otherIdentifier>\n    <serialNumber>R-US-3276279a</serialNumber>\n    <cti:type>uc:Hardware</cti:type>\n    <cti:type>uc:ManagedHardware</cti:type>\n    <cti:type>hw:EquipmentHolder</cti:type>\n    <equipmentHolder>\n        <cti:type>uc:BasicObject</cti:type>\n        <distinguishedName>/R-T31/CH-2/SL-1</distinguishedName>\n        <globalId>548872003</globalId>\n        <cti:type>uc:Resource</cti:type>\n        <cti:type>uc:PhysicalResource</cti:type>\n        <otherIdentifier>CU-Slot</otherIdentifier>\n        <serialNumber>T-K4733890x45</serialNumber>\n        <cti:type>uc:Hardware</cti:type>\n        <cti:type>uc:ManagedHardware</cti:type>\n        <cti:type>uc:EquipmentHolder</cti:type>\n        <equipment>\n            <cti:type>uc:BasicObject</cti:type>\n            <distinguishedName>/R-T31/CH-2/SL-1/C-3</distinguishedName>\n            <globalId>89772001</globalId>\n            <cti:type>uc:Resource</cti:type>\n            <cti:type>uc:PhysicalResource</cti:type>\n            <otherIdentifier>ATM-45252</otherIdentifier>\n            <serialNumber>A-778911-b</serialNumber>\n            <cti:type>uc:Hardware</cti:type>\n            <cti:type>uc:ManagedHardware</cti:type>\n            <cti:type>uc:Equipment</cti:type>\n            <installed>true</installed>\n            <version>A2</version>\n            <redundancy>1</redundancy>\n            <cti:type>hw:Card</cti:type>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 1,
      "text": "            <usedSlots>1</usedSlots>\n        </equipment>\n        <cti:type>hw:Slot</cti:type>\n        <slotNumber>1</slotNumber>\n    </equipmentHolder>\n    <cti:type>hw:Chassis</cti:type>\n    <numberOfChassisSlots>6</numberOfChassisSlots>\n    // ...\n</hardware>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "2.12. Update Rules for Modules Using Complex Types",
      "section_title": true,
      "zh-CHS": "2.12. 使用复杂类型更新模块的规则"
    },
    {
      "indent": 3,
      "text": "In addition to the module update rules specified in Section 10 in [RFC6020], modules that define complex types, instances of complex types, and typed instance identifiers must obey following rules:",
      "zh-CHS": "除了[RFC6020]第10节中规定的模块更新规则外，定义复杂类型、复杂类型实例和类型化实例标识符的模块必须遵守以下规则："
    },
    {
      "indent": 3,
      "text": "o New complex types MAY be added.",
      "zh-CHS": "o 可能会添加新的复杂类型。"
    },
    {
      "indent": 3,
      "text": "o A new complex type MAY extend an existing complex type.",
      "zh-CHS": "o 新的复杂类型可以扩展现有的复杂类型。"
    },
    {
      "indent": 3,
      "text": "o New data definition statements MAY be added to a complex type only if:",
      "zh-CHS": "o 只有在以下情况下，才能将新的数据定义语句添加到复杂类型："
    },
    {
      "indent": 6,
      "text": "* they are not mandatory or",
      "zh-CHS": "* 它们不是强制性的，也不是强制性的"
    },
    {
      "indent": 6,
      "text": "* they are not conditionally dependent on a new feature (i.e., they do not have an \"if-feature\" statement that refers to a new feature).",
      "zh-CHS": "* 它们没有条件地依赖于新特性（即，它们没有引用新特性的“if-feature”语句）。"
    },
    {
      "indent": 3,
      "text": "o The type referred to by the instance-type statement may be changed to a type that derives from the original type only if the original type does not represent configuration data.",
      "zh-CHS": "o 只有当原始类型不表示配置数据时，实例类型语句引用的类型才能更改为从原始类型派生的类型。"
    },
    {
      "indent": 0,
      "text": "2.13. Using Complex Types",
      "section_title": true,
      "zh-CHS": "2.13. 使用复杂类型"
    },
    {
      "indent": 3,
      "text": "All data nodes defined inside a complex type reside in the complex type namespace, which is their parent node namespace.",
      "zh-CHS": "在复杂类型中定义的所有数据节点都位于复杂类型命名空间中，该命名空间是它们的父节点命名空间。"
    },
    {
      "indent": 0,
      "text": "2.13.1. Overriding Complex Type Data Nodes",
      "section_title": true,
      "zh-CHS": "2.13.1. 重写复杂类型数据节点"
    },
    {
      "indent": 3,
      "text": "It is not allowed to override a data node inherited from a base type. That is, it is an error if a type \"base\" with a leaf named \"foo\" is extended by another complex type (\"derived\") with a leaf named \"foo\" in the same module. In case they are derived in different modules, there are two distinct \"foo\" nodes that are mapped to the XML namespaces of the module, where the complex types are specified.",
      "zh-CHS": "不允许重写从基类型继承的数据节点。也就是说，如果具有名为“foo”的叶的类型“base”在同一模块中被另一个具有名为“foo”的叶的复杂类型（“派生”）扩展，则这是一个错误。如果它们是在不同的模块中派生的，则有两个不同的“foo”节点映射到模块的XML名称空间，其中指定了复杂类型。"
    },
    {
      "indent": 3,
      "text": "A complex type that extends a basic complex type may use the \"refine\" statement in order to improve an inherited data node. The target node identifier must be qualified by the module prefix to indicate clearly which inherited node is refined.",
      "zh-CHS": "扩展基本复杂类型的复杂类型可以使用“refine”语句来改进继承的数据节点。目标节点标识符必须由模块前缀限定，以清楚地指示哪个继承节点被细化。"
    },
    {
      "indent": 3,
      "text": "The following refinements can be done:",
      "zh-CHS": "可以进行以下改进："
    },
    {
      "indent": 3,
      "text": "o A leaf or choice node may have a default value, or a new default value if it already had one.",
      "zh-CHS": "o 叶节点或选择节点可以具有默认值，如果已经具有默认值，则可以具有新的默认值。"
    },
    {
      "indent": 3,
      "text": "o Any node may have a different \"description\" or \"reference\" string.",
      "zh-CHS": "o 任何节点都可能具有不同的“描述”或“引用”字符串。"
    },
    {
      "indent": 3,
      "text": "o A leaf, anyxml, or choice node may have a \"mandatory true\" statement. However, it is not allowed to change from \"mandatory true\" to \"mandatory false\".",
      "zh-CHS": "o 叶、anyxml或choice节点可能有一个“强制true”语句。但是，不允许从“强制为真”更改为“强制为假”。"
    },
    {
      "indent": 3,
      "text": "o A leaf, leaf-list, list, container, or anyxml node may have additional \"must\" expressions.",
      "zh-CHS": "o 叶、叶列表、列表、容器或任意XML节点可能有其他“必须”表达式。"
    },
    {
      "indent": 3,
      "text": "o A list, leaf-list, instance, or instance-list node may have a \"min-elements\" statement, if the base type does not have one or does not have one with a value that is greater than the minimum value of the base type.",
      "zh-CHS": "o 如果基类型没有或没有大于基类型最小值的“最小元素”语句，则列表、叶列表、实例或实例列表节点可能有一个“最小元素”语句。"
    },
    {
      "indent": 3,
      "text": "o A list, leaf-list, instance, or instance-list node may have a \"max-elements\" statement, if the base type does not have one or does not have one with a value that is smaller than the maximum value of the base type.",
      "zh-CHS": "o 如果基类型没有“max elements”语句，或者没有值小于基类型最大值的语句，则列表、叶列表、实例或实例列表节点可能有“max elements”语句。"
    },
    {
      "indent": 3,
      "text": "It is not allowed to refine complex-type nodes inside \"instance\" or \"instance-list\" statements.",
      "zh-CHS": "不允许在“instance”或“instance list”语句中细化复杂类型节点。"
    },
    {
      "indent": 0,
      "text": "2.13.2. Augmenting Complex Types",
      "section_title": true,
      "zh-CHS": "2.13.2. 扩充复杂类型"
    },
    {
      "indent": 3,
      "text": "Augmenting complex types is only allowed if a complex type is instantiated in an \"instance\" or \"instance-list\" statement. This confines the effect of the augmentation to the location in the schema tree where the augmentation is done. The argument of the \"augment\" statement MUST be in the descendant form (as defined by the rule \"descendant-schema-nodeid\" in Section 12 in [RFC6020]).",
      "zh-CHS": "只有在“instance”或“instance list”语句中实例化了复杂类型时，才允许扩充复杂类型。这将扩展的效果限制在模式树中进行扩展的位置。“augment”语句的参数必须采用子体形式（如[RFC6020]第12节“子体模式节点ID”规则所定义）。"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Chassis {\n        ct:extends EquipmentHolder;\n        container chassisInfo {\n               config false;\n               leaf numberOfSlots { type uint16; }\n               leaf occupiedSlots { type uint16; }\n               leaf height {type unit16;}\n               leaf width {type unit16;}\n          }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:instance-list chassis {\n        type Chassis;\n        augment \"chassisInfo\" {\n               leaf modelId { type string; }\n        }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "When augmenting a complex type, only the \"container\", \"leaf\", \"list\", \"leaf-list\", \"choice\", \"instance\", \"instance-list\", and \"if-feature\" statements may be used within the \"augment\" statement. The nodes added by the augmentation MUST NOT be mandatory nodes. One or many \"augment\" statements may not cause the creation of multiple nodes with the same name from the same namespace in the target node.",
      "zh-CHS": "在扩充复杂类型时，“augment”语句中只能使用“container”、“leaf”、“list”、“leaf list”、“choice”、“instance”、“instance list”和“if feature”语句。由扩充添加的节点不能是强制节点。一个或多个“augment”语句可能不会导致从目标节点中的同一命名空间创建具有相同名称的多个节点。"
    },
    {
      "indent": 3,
      "text": "To achieve less-complex modeling, this document proposes the augmentation of complex type instances without recursion.",
      "zh-CHS": "为了实现不太复杂的建模，本文建议在不使用递归的情况下扩展复杂类型实例。"
    },
    {
      "indent": 0,
      "text": "2.13.3. Controlling the Use of Complex Types",
      "section_title": true,
      "zh-CHS": "2.13.3. 控制复杂类型的使用"
    },
    {
      "indent": 3,
      "text": "A server might not want to support all complex types defined in a supported module. This issue can be addressed with YANG features as follows:",
      "zh-CHS": "服务器可能不希望支持受支持模块中定义的所有复杂类型。可以通过以下功能解决此问题："
    },
    {
      "indent": 3,
      "text": "o Features are defined that are used inside complex type definitions (by using \"if-feature\" as a substatement) to make them optional. In this case, such complex types may only be instantiated if the feature is supported (advertised as a capability in the NETCONF <hello> message).",
      "zh-CHS": "o 定义了在复杂类型定义中使用的特征（通过使用“if feature”作为子状态），使其成为可选的。在这种情况下，只有在支持该功能的情况下（在NETCONF<hello>消息中作为一种功能公布），才能实例化这种复杂类型。"
    },
    {
      "indent": 3,
      "text": "o The \"deviation\" statement may be applied to node trees, which are created by \"instance\" and \"instance-list\" statements. In this case, only the substatement \"deviate not-supported\" is allowed.",
      "zh-CHS": "o “偏差”语句可应用于节点树，节点树由“实例”和“实例列表”语句创建。在这种情况下，仅允许子状态“不支持偏差”。"
    },
    {
      "indent": 3,
      "text": "o It is not allowed to apply the \"deviation\" statement to node tree elements that may occur because of the recursive use of a complex type. Other forms of deviations (\"deviate add\", \"deviate replace\", \"deviate delete\") are NOT supported inside node trees spanned by \"instance\" or \"instance-list\".",
      "zh-CHS": "o 不允许将“偏差”语句应用于由于递归使用复杂类型而可能出现的节点树元素。“实例”或“实例列表”跨越的节点树中不支持其他形式的偏差（“偏差添加”、“偏差替换”、“偏差删除”）。"
    },
    {
      "indent": 3,
      "text": "As complex type definitions do not contribute by themselves to the data node tree, data node declarations inside complex types cannot be the target of deviations.",
      "zh-CHS": "由于复杂类型定义本身并不影响数据节点树，因此复杂类型中的数据节点声明不能成为偏差的目标。"
    },
    {
      "indent": 3,
      "text": "In the example below, client applications are informed that the leaf \"occupiedSlots\" is not supported in the top-level chassis. However, if a chassis contains another chassis, the contained chassis may support the leaf that reports the number of occupied slots.",
      "zh-CHS": "在下面的示例中，客户端应用程序被告知顶级机箱不支持叶“OccupiedSlot”。但是，如果机箱包含另一个机箱，则包含的机箱可能支持报告已占用插槽数量的叶。"
    },
    {
      "indent": 5,
      "text": "deviation \"/chassis/chassisSpec/occupiedSlots\" {\n   deviate not-supported;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "3. Typed Instance Identifier",
      "section_title": true,
      "zh-CHS": "3. 类型化实例标识符"
    },
    {
      "indent": 0,
      "text": "3.1. Definition",
      "section_title": true,
      "zh-CHS": "3.1. 释义"
    },
    {
      "indent": 3,
      "text": "Typed instance identifier relationships are an addition to the relationship types already defined in YANG, where the leafref relationship is location dependent, and the instance-identifier does not specify to which type of instances the identifier points.",
      "zh-CHS": "类型化实例标识符关系是YANG中已定义的关系类型的补充，其中leafref关系依赖于位置，实例标识符不指定标识符指向的实例类型。"
    },
    {
      "indent": 3,
      "text": "A typed instance identifier represents a reference to an instance of a complex type without being restricted to a particular location in the containment tree. This is done by using the extension statement \"instance-type\" as a substatement of the existing \"type instance identifier\" statement.",
      "zh-CHS": "类型化实例标识符表示对复杂类型实例的引用，而不限于包含树中的特定位置。这是通过使用扩展语句“instance type”作为现有“type instance identifier”语句的子语句来实现的。"
    },
    {
      "indent": 3,
      "text": "Typed instance identifiers allow referring to instances of complex types that may be located anywhere in the schema tree. The \"type\" statement plays the role of a restriction that must be fulfilled by the target node, which is referred to with the instance identifier. The target node MUST be of a particular complex type, either the type itself or any type that extends this complex type.",
      "zh-CHS": "类型化实例标识符允许引用可能位于模式树中任何位置的复杂类型实例。“type”语句扮演着必须由目标节点满足的限制的角色，目标节点用实例标识符引用。目标节点必须是特定的复杂类型，类型本身或扩展此复杂类型的任何类型。"
    },
    {
      "indent": 0,
      "text": "3.2. instance-type Extension Statement",
      "section_title": true,
      "zh-CHS": "3.2. 实例类型扩展语句"
    },
    {
      "indent": 3,
      "text": "The \"instance-type\" extension statement specifies the complex type of the instance to which the instance-identifier refers. The referred instance may also instantiate any complex type that extends the specified complex type.",
      "zh-CHS": "“instance type”扩展语句指定实例标识符引用的实例的复杂类型。引用的实例还可以实例化扩展指定复杂类型的任何复杂类型。"
    },
    {
      "indent": 3,
      "text": "The instance complex type is identified by the single name argument. The referred complex type MUST have a key. This extension statement MUST be used as a substatement of the \"type instance-identifier\" statement. The \"instance-type\" extension statement does not support any substatements.",
      "zh-CHS": "实例复杂类型由单名称参数标识。引用的复杂类型必须具有密钥。此扩展语句必须用作“类型实例标识符”语句的子语句。“实例类型”扩展语句不支持任何子语句。"
    },
    {
      "indent": 0,
      "text": "3.3. Typed Instance Identifier Example",
      "section_title": true,
      "zh-CHS": "3.3. 类型化实例标识符示例"
    },
    {
      "indent": 3,
      "text": "In the example below, a physical link connects an arbitrary number of physical ports. Here, typed instance identifiers are used to denote which \"PhysicalPort\" instances (anywhere in the data tree) are connected by a \"PhysicalLink\".",
      "zh-CHS": "在下面的示例中，物理链路连接任意数量的物理端口。这里，类型化实例标识符用于表示哪些“PhysicalPort”实例（数据树中的任何位置）由“PhysicalLink”连接。"
    },
    {
      "indent": 8,
      "text": "// Extended version of type Card\nct:complex-type Card {\n   ct:extends Equipment;\n   leaf usedSlot { type uint16; mandatory true; }\n   ct:instance-list port {\n       type PhysicalPort;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 8,
      "text": "ct:complex-type PhysicalPort {\n   ct:extends ManagedHardware;\n   leaf portNumber { type int32; mandatory true; }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 8,
      "text": "ct:complex-type PhysicalLink {\n   ct:extends ManagedHardware;\n   leaf media { type string; }\n   leaf-list connectedPort {\n      type instance-identifier {\n        ct:instance-type PhysicalPort;\n      }\n      min-elements 2;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Below is the XML encoding of an element named \"link\" of type \"PhysicalLink\":",
      "zh-CHS": "下面是“PhysicalLink”类型的名为“link”的元素的XML编码："
    },
    {
      "indent": 7,
      "text": "<link>\n    <objectId>FTCL-771</objectId>\n    <media>Fiber</media>\n    <connectedPort>/hw:hardware[objectId='R-11']\n      /hw:equipment[objectId='AT22']/hw:port[objectId='P12']\n    </connectedPort>\n    <connectedPort>/hw:hardware[objectId='R-42]\n      /hw:equipment[objectId='AT30']/hw:port[objectId='P3']\n    </connectedPort>\n    <serialNumber>F-7786828</serialNumber>\n    <commonName>FibCon 7</commonName>\n</link>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "zh-CHS": "4. IANA考虑"
    },
    {
      "indent": 3,
      "text": "This document registers two URIs in the IETF XML registry. IANA registered the following URIs, according to [RFC3688]:",
      "zh-CHS": "本文档在IETF XML注册表中注册了两个URI。IANA根据[RFC3688]注册了以下URI："
    },
    {
      "indent": 3,
      "text": "URI: urn:ietf:params:xml:ns:yang:ietf-complex-types\nURI: urn:ietf:params:xml:ns:yang:ietf-complex-type-instance",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Registrant Contact: Bernd Linowski (bernd.linowski.ext@nsn.com) Mehmet Ersue (mehmet.ersue@nsn.com) Siarhei Kuryla (s.kuryla@gmail.com)",
      "zh-CHS": "注册人联系人：Bernd Linowski（Bernd.Linowski。ext@nsn.com)迈赫迈特·埃尔苏埃（迈赫迈特。ersue@nsn.com)西亚雷·库里拉（s。kuryla@gmail.com)"
    },
    {
      "indent": 3,
      "text": "XML: N/A, the requested URIs are XML namespaces.",
      "zh-CHS": "XML：不适用，请求的URI是XML名称空间。"
    },
    {
      "indent": 3,
      "text": "This document registers one module name in the \"YANG Module Names\" registry, defined in [RFC6020]. name: ietf-complex-types",
      "zh-CHS": "本文件在[RFC6020]中定义的“模块名称”注册表中注册了一个模块名称。名称：ietf复杂类型"
    },
    {
      "indent": 6,
      "text": "namespace: urn:ietf:params:xml:ns:yang:ietf-complex-types",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "prefix: ct",
      "zh-CHS": "前缀：ct"
    },
    {
      "indent": 6,
      "text": "RFC: 6095",
      "zh-CHS": "传真：6095"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "zh-CHS": "5. 安全考虑"
    },
    {
      "indent": 3,
      "text": "The YANG module \"complex-types\" in this memo defines YANG extensions for complex types and typed instance identifiers as new language statements.",
      "zh-CHS": "本备忘录中的YANG模块“复杂类型”将复杂类型的YANG扩展和类型化实例标识符定义为新的语言语句。"
    },
    {
      "indent": 3,
      "text": "Complex types and typed instance identifiers themselves do not have any security impact on the Internet.",
      "zh-CHS": "复杂类型和类型化实例标识符本身对Internet没有任何安全影响。"
    },
    {
      "indent": 3,
      "text": "The security considerations described throughout [RFC6020] apply here as well.",
      "zh-CHS": "[RFC6020]中描述的安全注意事项也适用于此处。"
    },
    {
      "indent": 0,
      "text": "6. Acknowledgements",
      "section_title": true,
      "zh-CHS": "6. 致谢"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank to Martin Bjorklund, Balazs Lengyel, Gerhard Muenz, Dan Romascanu, Juergen Schoenwaelder, and Martin Storch for their valuable review and comments on different versions of the document.",
      "zh-CHS": "作者要感谢Martin Bjorklund、Balazs Lengyel、Gerhard Muenz、Dan Romascanu、Juergen Schoenwaeld和Martin Storch对不同版本文件的宝贵评论和评论。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "zh-CHS": "7. 工具书类"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "zh-CHS": "7.1. 规范性引用文件"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "zh-CHS": "[RFC2119]Bradner，S.，“RFC中用于表示需求水平的关键词”，BCP 14，RFC 2119，1997年3月。"
    },
    {
      "indent": 3,
      "text": "[RFC3688] Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688, January 2004.",
      "zh-CHS": "[RFC3688]Mealling，M.“IETF XML注册表”，BCP 81，RFC 3688，2004年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC6020] Bjorklund, M., \"YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)\", RFC 6020, October 2010.",
      "zh-CHS": "[RFC6020]Bjorklund，M.“YANG-网络配置协议（NETCONF）的数据建模语言”，RFC6020，2010年10月。"
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "zh-CHS": "7.2. 资料性引用"
    },
    {
      "indent": 3,
      "text": "[IPFIXCONF] Muenz, G., Claise, B., and P. Aitken, \"Configuration Data Model for IPFIX and PSAMP\", Work in Progress, March 2011.",
      "zh-CHS": "[IPFIXCONF]Muenz，G.，Claise，B.，和P.Aitken，“IPFIX和PSAMP的配置数据模型”，正在进行的工作，2011年3月。"
    },
    {
      "indent": 3,
      "text": "[Libsmi] Kuryla, S., \"Libsmi Extension for Complex Types\", April 2010, <http://www.ibr.cs.tu-bs.de/svn/libsmi>.",
      "zh-CHS": "[Libsmi]Kuryla，S.，“复杂类型的Libsmi扩展”，2010年4月<http://www.ibr.cs.tu-bs.de/svn/libsmi>."
    },
    {
      "indent": 3,
      "text": "[Pyang] Bjorklund, M., \"An extensible YANG validator and converter in python\", October 2010, <http://code.google.com/p/pyang/>.",
      "zh-CHS": "[Pyang]Bjorklund，M.，“python中的可扩展YANG验证程序和转换器”，2010年10月<http://code.google.com/p/pyang/>."
    },
    {
      "indent": 3,
      "text": "[Pyang-ct] Kuryla, S., \"Complex type extension for an extensible YANG validator and converter in python\", April 2010, <http://code.google.com/p/pyang-ct/>.",
      "zh-CHS": "[Pyang ct]Kuryla，S.，“python中可扩展YANG验证器和转换器的复杂类型扩展”，2010年4月<http://code.google.com/p/pyang-ct/>."
    },
    {
      "indent": 3,
      "text": "[RFC4133] Bierman, A. and K. McCloghrie, \"Entity MIB (Version 3)\", RFC 4133, August 2005.",
      "zh-CHS": "[RFC4133]Bierman，A.和K.McCloghrie，“实体MIB（版本3）”，RFC 41332005年8月。"
    },
    {
      "indent": 3,
      "text": "[SID_V8] TeleManagement Forum, \"GB922, Information Framework (SID) Solution Suite, Release 8.0\", July 2008, <http:// www.tmforum.org/DocumentsInformation/ GB922InformationFramework/35499/article.html>.",
      "zh-CHS": "[SID_V8]远程管理论坛，“GB922，信息框架（SID）解决方案套件，8.0版”，2008年7月，<http://www.tmforum.org/DocumentsInformation/GB922InformationFramework/35499/article.html>。"
    },
    {
      "indent": 3,
      "text": "[UDM] NSN, \"Unified Data Model SID Compliance Statement\", May 2010, <http://www.tmforum.org/InformationFramework/ NokiaSiemensNetworks/8815/home.html>.",
      "zh-CHS": "[UDM]NSN，“统一数据模型SID合规性声明”，2010年5月<http://www.tmforum.org/InformationFramework/ 诺基亚西门子网络/8815/home.html>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. YANG Modules for Physical Network Resource Model and Hardware Entities Model",
      "zh-CHS": "附录A.物理网络资源模型和硬件实体模型的模块"
    },
    {
      "indent": 3,
      "text": "YANG module for the 'Physical Network Resource Model':",
      "zh-CHS": "“物理网络资源模型”的YANG模块："
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "zh-CHS": "<代码开始>"
    },
    {
      "indent": 3,
      "text": "module udmcore {",
      "zh-CHS": "udmcore模块{"
    },
    {
      "indent": 6,
      "text": "namespace \"http://example.com/udmcore\";\nprefix \"udm\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "import ietf-yang-types {prefix \"yang\";}\nimport ietf-complex-types {prefix \"ct\";}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type BasicObject {\n   ct:abstract true;\n   key \"distinguishedName\";\n     leaf globalId {type int64;}\n     leaf distinguishedName {type string; mandatory true;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type ManagedObject {\n   ct:extends BasicObject;\n   ct:abstract true;\n   leaf instance {type string;}\n   leaf objectState {type int32;}\n   leaf release {type string;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Resource {\n         ct:extends ManagedObject;\n         ct:abstract true;\n   leaf usageState {type int16;}\n   leaf managementMethodSupported {type string;}\n   leaf managementMethodCurrent {type string;}\n   leaf managementInfo {type string;}\n   leaf managementDomain {type string;}\n   leaf version {type string;}\n   leaf entityIdentification {type string;}\n   leaf description {type string;}\n   leaf rootEntityType {type string;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type LogicalResource {\n   ct:extends Resource;\n   ct:abstract true;\n   leaf lrStatus {type int32;}\n   leaf serviceState {type int32;}\n   leaf isOperational {type boolean;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type PhysicalResource {\n   ct:extends Resource;\n   ct:abstract true;\n   leaf manufactureDate {type string;}\n   leaf otherIdentifier {type string;}\n   leaf powerState {type int32;}\n   leaf serialNumber {type string;}\n   leaf versionNumber {type string;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Hardware {\n   ct:extends PhysicalResource;\n   ct:abstract true;\n   leaf width {type string;}\n   leaf height {type string;}\n   leaf depth {type string;}\n   leaf measurementUnits {type int32;}\n   leaf weight {type string;}\n   leaf weightUnits {type int32;}\n   leaf-list physicalLink {\n      type instance-identifier {\n         ct:instance-type PhysicalLink;\n      }\n   }\n   ct:instance-list containedHardware {\n      ct:instance-type Hardware;\n   }\n   ct:instance-list physicalConnector {\n      ct:instance-type PhysicalConnector;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type PhysicalLink {\n   ct:extends PhysicalResource;\n   leaf isWireless {type boolean;}\n   leaf currentLength {type string;}\n   leaf maximumLength {type string;}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "   leaf mediaType {type int32;}\n   leaf-list hardware {\n      type instance-identifier {\n         ct:instance-type Hardware;\n      }\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type ManagedHardware {\n   ct:extends Hardware;\n   leaf additionalinfo {type string;}\n   leaf physicalAlarmReportingEnabled {type boolean;}\n   leaf pyhsicalAlarmStatus {type int32;}\n   leaf coolingRequirements {type string;}\n   leaf hardwarePurpose {type string;}\n   leaf isPhysicalContainer {type boolean;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type AuxiliaryComponent {\n   ct:extends ManagedHardware;\n   ct:abstract true;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type PhysicalPort {\n   ct:extends ManagedHardware;\n   leaf portNumber {type int32;}\n   leaf duplexMode {type int32;}\n   leaf ifType {type int32;}\n   leaf vendorPortName {type string;}\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type PhysicalConnector {\n   ct:extends Hardware;\n   leaf location {type string;}\n   leaf cableType {type int32;}\n   leaf gender {type int32;}\n   leaf inUse {type boolean;}\n   leaf pinDescription {type string;}\n   leaf typeOfConnector {type int32;}\n   leaf-list sourcePhysicalConnector {\n      type instance-identifier {\n         ct:instance-type PhysicalConnector;\n      }\n   }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "   leaf-list targetPhysicalConnector {\n      type instance-identifier {\n         ct:instance-type PhysicalConnector;\n      }\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Equipment {\n   ct:extends ManagedHardware;\n   leaf installStatus {type int32;}\n   leaf expectedEquipmentType {type string;}\n   leaf installedEquipmentType {type string;}\n   leaf installedVersion {type string;}\n   leaf redundancy {type int32;}\n   leaf vendorName {type string;}\n   leaf dateOfLastService {type yang:date-and-time;}\n   leaf interchangeability {type string;}\n   leaf identificationCode {type string;}\n   ct:instance-list equipment {\n      ct:instance-type Equipment;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type EquipmentHolder {\n   ct:extends ManagedHardware;\n   leaf vendorName {type string;}\n   leaf locationName {type string;}\n   leaf dateOfLastService {type yang:date-and-time;}\n   leaf partNumber {type string;}\n   leaf availabilityStatus {type int16;}\n   leaf nameFromPlanningSystem {type string;}\n   leaf modelNumber {type string;}\n   leaf acceptableEquipmentList {type string;}\n   leaf isSolitaryHolder {type boolean;}\n   leaf holderStatus {type int16;}\n   leaf interchangeability {type string;}\n   leaf equipmentHolderSpecificType {type string; }\n   leaf position {type string;}\n   leaf atomicCompositeType {type int16;}\n   leaf uniquePhysical {type boolean;}\n   leaf physicalDescription {type string;}\n   leaf serviceApproach {type string;}\n   leaf mountingOptions {type int32;}\n   leaf cableManagementStrategy {type string;}\n   leaf isSecureHolder {type boolean;}\n   ct:instance-list equipment {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "      ct:instance-type Equipment;\n         }\n   ct:instance-list equipmentHolder {\n      ct:instance-type EquipmentHolder;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// ... other resource complex types ...",
      "zh-CHS": "// ... 其他资源复杂类型。。。"
    },
    {
      "indent": 3,
      "text": "} <CODE ENDS>",
      "zh-CHS": "}<代码结束>"
    },
    {
      "indent": 3,
      "text": "YANG module for the 'Hardware Entities Model':",
      "zh-CHS": "“硬件实体模型”的模块："
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>",
      "zh-CHS": "<代码开始>"
    },
    {
      "indent": 3,
      "text": "module hardware-entities {",
      "zh-CHS": "模块硬件实体{"
    },
    {
      "indent": 6,
      "text": "namespace \"http://example.com/:hardware-entities\";\nprefix \"hwe\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "import ietf-yang-types {prefix \"yang\";}\nimport ietf-complex-types {prefix \"ct\";}\nimport udmcore {prefix \"uc\";}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "grouping PhysicalEntityProperties {\n   leaf hardwareRev {type string; }\n   leaf firmwareRev {type string; }\n   leaf softwareRev {type string; }\n   leaf serialNum {type string; }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "   leaf mfgName {type string; }\n   leaf modelName {type string; }\n   leaf alias {type string; }\n   leaf ssetID{type string; }\n   leaf isFRU {type boolean; }\n   leaf mfgDate {type yang:date-and-time; }\n   leaf-list uris {type string; }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Physical entities representing equipment",
      "zh-CHS": "//代表设备的物理实体"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Module {\n   ct:extends uc:Equipment;\n   description \"Complex type representing module entries",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "      (entPhysicalClass = module(9)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Backplane {\n   ct:extends uc:Equipment;\n   description \"Complex type representing backplane entries\n      (entPhysicalClass = backplane(4)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Physical entities representing auxiliary hardware components",
      "zh-CHS": "//表示辅助硬件组件的物理实体"
    },
    {
      "indent": 6,
      "text": "ct:complex-type PowerSupply {\n   ct:extends uc:AuxiliaryComponent;\n   description \"Complex type representing power supply entries\n      (entPhysicalClass = powerSupply(6)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Fan {\n   ct:extends uc:AuxiliaryComponent;\n   description \"Complex type representing fan entries\n      (entPhysicalClass = fan(7)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Sensor {\n   ct:extends uc:AuxiliaryComponent;\n   description \"Complex type representing sensor entries\n      (entPhysicalClass = sensor(8)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Physical entities representing equipment holders",
      "zh-CHS": "//代表设备持有人的实体"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Chassis {\n   ct:extends uc:EquipmentHolder;\n   description \"Complex type representing chassis entries\n      (entPhysicalClass = chassis(3)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Container {\n   ct:extends uc:EquipmentHolder;\n   description \"Complex type representing container entries",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "      (entPhysicalClass = container(5)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type Stack {\n   ct:extends uc:EquipmentHolder;\n   description \"Complex type representing stack entries\n      (entPhysicalClass = stack(11)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "// Other kinds of physical entities",
      "zh-CHS": "//其他种类的物理实体"
    },
    {
      "indent": 6,
      "text": "ct:complex-type Port {\n   ct:extends uc:PhysicalPort;\n   description \"Complex type representing port entries\n      (entPhysicalClass = port(10)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "ct:complex-type CPU {\n   ct:extends uc:Hardware;\n   description \"Complex type representing cpu entries\n      (entPhysicalClass = cpu(12)) in entPhysicalTable\";\n   uses PhysicalEntityProperties;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "} <CODE ENDS>",
      "zh-CHS": "}<代码结束>"
    },
    {
      "indent": 0,
      "text": "Appendix B. Example YANG Module for the IPFIX/PSAMP Model",
      "zh-CHS": "附录B.IPFIX/PSAMP模型的模块示例"
    },
    {
      "indent": 0,
      "text": "B.1. Modeling Improvements for the IPFIX/PSAMP Model with Complex Types and Typed Instance Identifiers",
      "zh-CHS": "B.1. 具有复杂类型和类型化实例标识符的IPFIX/PSAMP模型的建模改进"
    },
    {
      "indent": 3,
      "text": "The module below is a variation of the IPFIX/PSAMP configuration model, which uses complex types and typed instance identifiers to model the concept outlined in [IPFIXCONF].",
      "zh-CHS": "下面的模块是IPFIX/PSAMP配置模型的变体，它使用复杂类型和类型化实例标识符对[IPFIXCONF]中概述的概念进行建模。"
    },
    {
      "indent": 3,
      "text": "When looking at the YANG module with complex types and typed instance identifiers, various technical improvements on the modeling level become apparent.",
      "zh-CHS": "当查看具有复杂类型和类型化实例标识符的YANG模块时，建模级别上的各种技术改进变得显而易见。"
    },
    {
      "indent": 3,
      "text": "o There is almost a one-to-one mapping between the domain concepts introduced in IPFIX and the complex types in the YANG module.",
      "zh-CHS": "o IPFIX中引入的域概念与YANG模块中的复杂类型之间几乎存在一对一的映射。"
    },
    {
      "indent": 3,
      "text": "o All associations between the concepts (besides containment) are represented with typed identifiers. That avoids having to refer to a particular location in the tree. Referring to a particular in the tree is not mandated by the original model.",
      "zh-CHS": "o 概念之间的所有关联（除了包含）都用类型化标识符表示。这样可以避免引用树中的特定位置。原始模型不强制引用树中的特定对象。"
    },
    {
      "indent": 3,
      "text": "o It is superfluous to represent concept refinement (class inheritance in the original model) with containment in the form of quite big choice-statements with complex branches. Instead, concept refinement is realized by complex types extending a base complex type.",
      "zh-CHS": "o 以具有复杂分支的相当大的choice语句的形式表示包含的概念精化（原始模型中的类继承）是多余的。相反，概念细化是通过扩展基本复杂类型的复杂类型来实现的。"
    },
    {
      "indent": 3,
      "text": "o It is unnecessary to introduce metadata identities and leafs (e.g., \"identity cacheMode\" and \"leaf cacheMode\" in \"grouping cacheParameters\") that just serve the purpose of indicating which concrete subtype of a generic type (modeled as grouping, which contains the union of all features of all subtypes) is actually represented in the MIB.",
      "zh-CHS": "o 没有必要引入元数据标识和叶（例如，“分组缓存参数”中的“标识缓存模式”和“叶缓存模式”），这些标识和叶仅用于指示MIB中实际表示泛型类型的哪个具体子类型（建模为分组，其中包含所有子类型的所有特性的联合）。"
    },
    {
      "indent": 3,
      "text": "o Ruling out illegal use of subtype-specific properties (e.g., \"leaf maxFlows\") by using \"when\" statements that refer to a subtype discriminator is not necessary (e.g., when \"../cacheMode != 'immediate'\").",
      "zh-CHS": "o 不需要使用引用子类型鉴别器的“when”语句（例如，“./cacheMode！=”immediate“）来排除非法使用子类型特定属性（例如，“leaf maxFlows”）。"
    },
    {
      "indent": 3,
      "text": "o Defining properties like the configuration status wherever a so called \"parameter grouping\" is used is not necessary. Instead, those definitions can be put inside the complex type definition itself.",
      "zh-CHS": "o 在使用所谓的“参数分组”的地方定义诸如配置状态之类的属性是不必要的。相反，这些定义可以放在复杂类型定义本身中。"
    },
    {
      "indent": 3,
      "text": "o Separating the declaration of the key from the related data nodes definitions in a grouping (see use of \"grouping selectorParameters\") can be avoided.",
      "zh-CHS": "o 可以避免将密钥声明与分组中的相关数据节点定义分离（请参阅“分组选择器参数”的使用）。"
    },
    {
      "indent": 3,
      "text": "o Complex types may be declared as optional features. If the type is indicated with an identity (e.g., \"identity immediate\"), this is not possible, since \"if-feature\" is not allowed as a substatement of \"identity\".",
      "zh-CHS": "o 复杂类型可以声明为可选功能。如果使用标识（例如，“标识立即”）指示类型，则这是不可能的，因为“如果特征”不允许作为“标识”的子状态。"
    },
    {
      "indent": 0,
      "text": "B.2. IPFIX/PSAMP Model with Complex Types and Typed Instance Identifiers",
      "zh-CHS": "B.2. 具有复杂类型和类型化实例标识符的IPFIX/PSAMP模型"
    },
    {
      "indent": 0,
      "text": "<CODE BEGINS>\nmodule ct-ipfix-psamp-example {\n     namespace \"http://example.com/ns/ct-ipfix-psamp-example\";\n     prefix ipfix;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "import ietf-yang-types { prefix yang; }\nimport ietf-inet-types { prefix inet; }\nimport ietf-complex-types {prefix \"ct\"; }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "description \"Example IPFIX/PSAMP Configuration Data Model with complex types and typed instance identifiers\";",
      "zh-CHS": "说明“具有复杂类型和类型化实例标识符的示例IPFIX/PSAMP配置数据模型”；"
    },
    {
      "indent": 4,
      "text": " revision 2011-03-15 {\n    description \"The YANG Module ('YANG Module of the IPFIX/PSAMP\n      Configuration Data Model') in [IPFIXCONF] modeled with\n      complex types and typed instance identifiers.\n      Disclaimer: This example model illustrates the use of the\n      language extensions defined in this document and does not\n      claim to be an exact reproduction of the original YANG\n      model referred above. The original description texts have\n      been shortened to increase the readability of the model\n      example.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Features\n*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature exporter {\n  description \"If supported, the Monitoring Device can be used as\n    an Exporter.  Exporting Processes can be configured.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature collector {\n  description \"If supported, the Monitoring Device can be used as\n    a Collector.  Collecting Processes can be configured.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature meter {\n  description \"If supported, Observation Points, Selection\n    Processes, and Caches can be configured.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampSampCountBased {\n  description \"If supported, the Monitoring Device supports\n    count-based Sampling...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampSampTimeBased {\n  description \"If supported, the Monitoring Device supports\n    time-based Sampling...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampSampRandOutOfN {\n  description \"If supported, the Monitoring Device supports\n    random n-out-of-N Sampling...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampSampUniProb {\n  description \"If supported, the Monitoring Device supports\n    uniform probabilistic Sampling...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampFilterMatch {\n  description \"If supported, the Monitoring Device supports\n    property match Filtering...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature psampFilterHash {\n  description \"If supported, the Monitoring Device supports\n    hash-based Filtering...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature cacheModeImmediate {\n  description \"If supported, the Monitoring Device supports\n    Cache Mode 'immediate'.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature cacheModeTimeout {\n  description \"If supported, the Monitoring Device supports\n    Cache Mode 'timeout'.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature cacheModeNatural {\n  description \"If supported, the Monitoring Device supports\n    Cache Mode 'natural'.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature cacheModePermanent {\n  description \"If supported, the Monitoring Device supports\n    Cache Mode 'permanent'.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature udpTransport {\n  description \"If supported, the Monitoring Device supports UDP\n    as transport protocol.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature tcpTransport {\n  description \"If supported, the Monitoring Device supports TCP\n    as transport protocol.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "feature fileReader {\n  description \"If supported, the Monitoring Device supports the\n    configuration of Collecting Processes as File Readers.\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 5,
      "text": "feature fileWriter {\n  description \"If supported, the Monitoring Device supports the\n    configuration of Exporting Processes as File Writers.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Identities\n*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*** Hash function identities ***/\nidentity hashFunction {\n  description \"Base identity for all hash functions...\";\n}\nidentity BOB {\n  base \"hashFunction\";\n  description \"BOB hash function\";\n  reference \"RFC 5475, Section 6.2.4.1.\";\n}\nidentity IPSX {\n  base \"hashFunction\";\n  description \"IPSX hash function\";\n  reference \"RFC 5475, Section 6.2.4.1.\";\n}\nidentity CRC {\n  base \"hashFunction\";\n  description \"CRC hash function\";\n  reference \"RFC 5475, Section 6.2.4.1.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*** Export mode identities ***/\nidentity exportMode {\n  description \"Base identity for different usages of export\n    destinations configured for an Exporting Process...\";\n}\nidentity parallel {\n  base \"exportMode\";\n  description \"Parallel export of Data Records to all\n    destinations configured for the Exporting Process.\";\n}\nidentity loadBalancing {\n  base \"exportMode\";\n  description \"Load-balancing between the different\n    destinations...\";\n}\nidentity fallback {\n  base \"exportMode\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  description \"Export to the primary destination...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*** Options type identities ***/\nidentity optionsType {\n  description \"Base identity for report types exported\n     with options...\";\n}\nidentity meteringStatistics {\n  base \"optionsType\";\n  description \"Metering Process Statistics.\";\n  reference \"RFC 5101, Section 4.1.\";\n}\nidentity meteringReliability {\n  base \"optionsType\";\n  description \"Metering Process Reliability Statistics.\";\n  reference \"RFC 5101, Section 4.2.\";\n}\nidentity exportingReliability {\n  base \"optionsType\";\n  description \"Exporting Process Reliability\n    Statistics.\";\n  reference \"RFC 5101, Section 4.3.\";\n}\nidentity flowKeys {\n  base \"optionsType\";\n  description \"Flow Keys.\";\n  reference \"RFC 5101, Section 4.4.\";\n}\nidentity selectionSequence {\n  base \"optionsType\";\n  description \"Selection Sequence and Selector Reports.\";\n  reference \"RFC 5476, Sections 6.5.1 and 6.5.2.\";\n}\nidentity selectionStatistics {\n  base \"optionsType\";\n  description \"Selection Sequence Statistics Report.\";\n  reference \"RFC 5476, Sections 6.5.3.\";\n}\nidentity accuracy {\n  base \"optionsType\";\n  description \"Accuracy Report.\";\n  reference \"RFC 5476, Section 6.5.4.\";\n}\nidentity reducingRedundancy {\n  base \"optionsType\";\n  description \"Enables the utilization of Options Templates to\n    reduce redundancy in the exported Data Records.\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  reference \"RFC 5473.\";\n}\nidentity extendedTypeInformation {\n  base \"optionsType\";\n  description \"Export of extended type information for\n    enterprise-specific Information Elements used in the\n    exported Templates.\";\n  reference \"RFC 5610.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Type definitions\n*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "typedef nameType {\n  type string {\n    length \"1..max\";\n    pattern \"\\S(.*\\S)?\";\n  }\n  description \"Type for 'name' leafs...\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "typedef direction {\n  type enumeration {\n    enum ingress {\n      description \"This value is used for monitoring incoming\n        packets.\";\n    }\n    enum egress {\n      description \"This value is used for monitoring outgoing\n        packets.\";\n    }\n    enum both {\n      description \"This value is used for monitoring incoming and\n        outgoing packets.\";\n    }\n  }\n  description \"Direction of packets going through an interface or\n    linecard.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "typedef transportSessionStatus {\n  type enumeration {\n    enum inactive {\n      description \"This value MUST be used for...\";\n    }\n    enum active {\n      description \"This value MUST be used for...\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    }\n    enum unknown {\n      description \"This value MUST be used if the status...\";\n    }\n  }\n  description \"Status of a Transport Session.\";\n  reference \"RFC 5815, Section 8 (ipfixTransportSessionStatus).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Complex types\n*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type ObservationPoint {\n  description \"Observation Point\";\n  key name;\n  leaf name {\n    type nameType;\n    description \"Key of an observation point.\";\n  }\n  leaf observationPointId {\n    type uint32;\n    config false;\n    description \"Observation Point ID...\";\n    reference \"RFC 5102, Section 5.1.10.\";\n  }\n  leaf observationDomainId {\n    type uint32;\n    mandatory true;\n    description \"The Observation Domain ID associates...\";\n    reference \"RFC 5101.\";\n  }\n  choice OPLocation {\n    mandatory true;\n    description \"Location of the Observation Point.\";\n    leaf ifIndex {\n      type uint32;\n      description \"Index of an interface...\";\n      reference \"RFC 2863.\";\n    }\n    leaf ifName {\n      type string;\n      description \"Name of an interface...\";\n      reference \"RFC 2863.\";\n    }\n    leaf entPhysicalIndex {\n      type uint32;\n      description \"Index of a linecard...\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      reference \"RFC 4133.\";\n    }\n    leaf entPhysicalName {\n      type string;\n      description \"Name of a linecard...\";\n      reference \"RFC 4133.\";\n    }\n  }\n  leaf direction {\n    type direction;\n    default both;\n    description \"Direction of packets....\";\n  }\n  leaf-list selectionProcess {\n    type instance-identifier { ct:instance-type SelectionProcess; }\n    description \"Selection Processes in this list process packets\n      in parallel.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type Selector {\n  ct:abstract true;\n  description \"Abstract selector\";\n  key name;\n  leaf name {\n      type nameType;\n      description \"Key of a selector\";\n  }\n  leaf packetsObserved {\n    type yang:counter64;\n    config false;\n    description \"The number of packets observed ...\";\n    reference \"RFC 5815, Section 8\n      (ipfixSelectionProcessStatsPacketsObserved).\";\n  }\n  leaf packetsDropped {\n    type yang:counter64;\n    config false;\n    description \"The total number of packets discarded ...\";\n    reference \"RFC 5815, Section 8\n      (ipfixSelectionProcessStatsPacketsDropped).\";\n  }\n  leaf selectorDiscontinuityTime {\n    type yang:date-and-time;\n    config false;\n    description \"Timestamp of the most recent occasion at which\n      one or more of the Selector counters suffered a\n      discontinuity...\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    reference \"RFC 5815, Section 8\n      (ipfixSelectionProcessStatsDiscontinuityTime).\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SelectAllSelector {\n  ct:extends Selector;\n  description \"Method that selects all packets.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SampCountBasedSelector {\n      if-feature psampSampCountBased;\n      ct:extends Selector;\n      description \"Selector applying systematic count-based\n        packet sampling to the packet stream.\";\n      reference \"RFC 5475, Section 5.1;\n        RFC 5476, Section 6.5.2.1.\";\n      leaf packetInterval {\n        type uint32;\n        units packets;\n        mandatory true;\n        description \"The number of packets that are consecutively\n          sampled between gaps of length packetSpace.\n          This parameter corresponds to the Information Element\n          samplingPacketInterval.\";\n        reference \"RFC 5477, Section 8.2.2.\";\n      }\n      leaf packetSpace {\n        type uint32;\n        units packets;\n        mandatory true;\n        description \"The number of unsampled packets between two\n          sampling intervals.\n          This parameter corresponds to the Information Element\n          samplingPacketSpace.\";\n        reference \"RFC 5477, Section 8.2.3.\";\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SampTimeBasedSelector {\n      if-feature psampSampTimeBased;\n      ct:extends Selector;\n      description \"Selector applying systematic time-based\n        packet sampling to the packet stream.\";\n      reference \"RFC 5475, Section 5.1;\n        RFC 5476, Section 6.5.2.2.\";\n      leaf timeInterval {\n        type uint32;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "        units microseconds;\n        mandatory true;\n        description \"The time interval in microseconds during\n          which all arriving packets are sampled between gaps\n          of length timeSpace.\n          This parameter corresponds to the Information Element\n          samplingTimeInterval.\";\n        reference \"RFC 5477, Section 8.2.4.\";\n      }\n      leaf timeSpace {\n        type uint32;\n        units microseconds;\n        mandatory true;\n        description \"The time interval in microseconds during\n          which no packets are sampled between two sampling\n          intervals specified by timeInterval.\n          This parameter corresponds to the Information Element\n          samplingTimeInterval.\";\n        reference \"RFC 5477, Section 8.2.5.\";\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SampRandOutOfNSelector {\n      if-feature psampSampRandOutOfN;\n      ct:extends Selector;\n      description \"This container contains the configuration\n        parameters of a Selector applying n-out-of-N packet\n        sampling to the packet stream.\";\n      reference \"RFC 5475, Section 5.2.1;\n        RFC 5476, Section 6.5.2.3.\";\n      leaf size {\n        type uint32;\n        units packets;\n        mandatory true;\n        description \"The number of elements taken from the parent\n          population.\n          This parameter corresponds to the Information Element\n          samplingSize.\";\n        reference \"RFC 5477, Section 8.2.6.\";\n      }\n      leaf population {\n        type uint32;\n        units packets;\n        mandatory true;\n        description \"The number of elements in the parent\n          population.\n          This parameter corresponds to the Information Element\n          samplingPopulation.\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "        reference \"RFC 5477, Section 8.2.7.\";\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SampUniProbSelector {\n      if-feature psampSampUniProb;\n      ct:extends Selector;\n      description \"Selector applying uniform probabilistic\n        packet sampling (with equal probability per packet) to the\n        packet stream.\";\n      reference \"RFC 5475, Section 5.2.2.1;\n        RFC 5476, Section 6.5.2.4.\";\n      leaf probability {\n        type decimal64 {\n          fraction-digits 18;\n          range \"0..1\";\n        }\n        mandatory true;\n        description \"Probability that a packet is sampled,\n          expressed as a value between 0 and 1.  The probability\n          is equal for every packet.\n          This parameter corresponds to the Information Element\n          samplingProbability.\";\n        reference \"RFC 5477, Section 8.2.8.\";\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type FilterMatchSelector {\n      if-feature psampFilterMatch;\n      ct:extends Selector;\n      description \"This container contains the configuration\n        parameters of a Selector applying property match filtering\n        to the packet stream.\";\n      reference \"RFC 5475, Section 6.1;\n        RFC 5476, Section 6.5.2.5.\";\n      choice nameOrId {\n        mandatory true;\n        description \"The field to be matched is specified by\n          either the name or the ID of the Information\n          Element.\";\n        leaf ieName {\n          type string;\n          description \"Name of the Information Element.\";\n        }\n        leaf ieId {\n          type uint16 {\n            range \"1..32767\" {\n              description \"Valid range of Information Element",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "                  identifiers.\";\n              reference \"RFC 5102, Section 4.\";\n            }\n          }\n          description \"ID of the Information Element.\";\n        }\n      }\n      leaf ieEnterpriseNumber {\n        type uint32;\n        description \"If present, ... \";\n      }\n      leaf value {\n        type string;\n        mandatory true;\n        description \"Matching value of the Information Element.\";\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type FilterHashSelector {\n      if-feature psampFilterHash;\n      ct:extends Selector;\n      description \"This container contains the configuration\n        parameters of a Selector applying hash-based filtering\n        to the packet stream.\";\n      reference \"RFC 5475, Section 6.2;\n        RFC 5476, Section 6.5.2.6.\";\n      leaf hashFunction {\n        type identityref {\n          base \"hashFunction\";\n        }\n        default BOB;\n        description \"Hash function to be applied.  According to\n          RFC 5475, Section 6.2.4.1, BOB hash function must be\n          used in order to be compliant with PSAMP.\";\n      }\n      leaf ipPayloadOffset {\n        type uint64;\n        units octets;\n        default 0;\n        description \"IP payload offset ... \";\n        reference \"RFC 5477, Section 8.3.2.\";\n      }\n      leaf ipPayloadSize {\n        type uint64;\n        units octets;\n        default 8;\n        description \"Number of IP payload bytes ... \";\n        reference \"RFC 5477, Section 8.3.3.\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      }\n      leaf digestOutput {\n        type boolean;\n        default false;\n        description \"If true, the output ... \";\n        reference \"RFC 5477, Section 8.3.8.\";\n      }\n      leaf initializerValue {\n        type uint64;\n        description \"Initializer value to the hash function.\n          If not configured by the user, the Monitoring Device\n          arbitrarily chooses an initializer value.\";\n        reference \"RFC 5477, Section 8.3.9.\";\n      }\n      list selectedRange {\n        key name;\n        min-elements 1;\n        description \"List of hash function return ranges for\n          which packets are selected.\";\n        leaf name {\n          type nameType;\n          description \"Key of this list.\";\n        }\n        leaf min {\n          type uint64;\n          description \"Beginning of the hash function's selected\n            range.\n            This parameter corresponds to the Information Element\n            hashSelectedRangeMin.\";\n          reference \"RFC 5477, Section 8.3.6.\";\n        }\n        leaf max {\n          type uint64;\n          description \"End of the hash function's selected range.\n            This parameter corresponds to the Information Element\n            hashSelectedRangeMax.\";\n          reference \"RFC 5477, Section 8.3.7.\";\n        }\n      }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type Cache {\n  ct:abstract true;\n  description \"Cache of a Monitoring Device.\";\n  key name;\n  leaf name {\n    type nameType;\n    description \"Key of a cache\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "}\nleaf-list exportingProcess {\n  type leafref { path \"/ipfix/exportingProcess/name\"; }\n  description \"Records are exported by all Exporting Processes\n    in the list.\";\n}\ndescription \"Configuration and state parameters of a Cache.\";\ncontainer cacheLayout {\n  description \"Cache Layout.\";\n  list cacheField {\n    key name;\n    min-elements 1;\n    description \"List of fields in the Cache Layout.\";\n    leaf name {\n      type nameType;\n      description \"Key of this list.\";\n    }\n    choice nameOrId {\n      mandatory true;\n      description \"Name or ID of the Information Element.\";\n      reference \"RFC 5102.\";\n      leaf ieName {\n        type string;\n        description \"Name of the Information Element.\";\n      }\n      leaf ieId {\n        type uint16 {\n          range \"1..32767\" {\n            description \"Valid range of Information Element\n                identifiers.\";\n            reference \"RFC 5102, Section 4.\";\n          }\n        }\n        description \"ID of the Information Element.\";\n      }\n    }\n    leaf ieLength {\n      type uint16;\n      units octets;\n      description \"Length of the field ... \";\n      reference \"RFC 5101, Section 6.2; RFC 5102.\";\n    }\n    leaf ieEnterpriseNumber {\n      type uint32;\n      description \"If present, the Information Element is\n        enterprise-specific. ... \";\n      reference \"RFC 5101; RFC 5102.\";\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      leaf isFlowKey {\n        when \"(../../../cacheMode != 'immediate')\n          and\n          ((count(../ieEnterpriseNumber) = 0)\n          or\n          (../ieEnterpriseNumber != 29305))\" {\n          description \"This parameter is not available\n            for Reverse Information Elements (which have\n            enterprise number 29305) or if the Cache Mode\n            is 'immediate'.\";\n        }\n        type empty;\n        description \"If present, this is a flow key.\";\n      }\n    }\n  }\n  leaf dataRecords {\n    type yang:counter64;\n    units \"Data Records\";\n    config false;\n    description \"The number of Data Records generated ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixMeteringProcessCacheDataRecords).\";\n  }\n  leaf cacheDiscontinuityTime {\n    type yang:date-and-time;\n    config false;\n    description \"Timestamp of the ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixMeteringProcessCacheDiscontinuityTime).\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type ImmediateCache {\n  if-feature cacheModeImmediate;\n  ct:extends Cache;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type NonImmediateCache {\n  ct:abstract true;\n  ct:extends Cache;\n  leaf maxFlows {\n    type uint32;\n    units flows;\n    description \"This parameter configures the maximum number of\n      Flows in the Cache ... \";\n  }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "   leaf activeFlows {\n     type yang:gauge32;\n     units flows;\n     config false;\n     description \"The number of Flows currently active in this\n       Cache.\";\n     reference \"RFC 5815, Section 8\n       (ipfixMeteringProcessCacheActiveFlows).\";\n   }\n   leaf unusedCacheEntries {\n     type yang:gauge32;\n     units flows;\n     config false;\n     description \"The number of unused Cache entries in this\n       Cache.\";\n     reference \"RFC 5815, Section 8\n       (ipfixMeteringProcessCacheUnusedCacheEntries).\";\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type NonPermanentCache {\n  ct:abstract true;\n  ct:extends NonImmediateCache;\n  leaf activeTimeout {\n    type uint32;\n    units milliseconds;\n    description \"This parameter configures the time in\n      milliseconds after which ... \";\n  }\n  leaf inactiveTimeout {\n    type uint32;\n    units milliseconds;\n    description \"This parameter configures the time in\n      milliseconds after which ... \";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type NaturalCache {\n  if-feature cacheModeNatural;\n  ct:extends NonPermanentCache;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type TimeoutCache {\n  if-feature cacheModeTimeout;\n  ct:extends NonPermanentCache;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type PermanentCache {",
      "zh-CHS": "复杂类型永久缓存{"
    },
    {
      "indent": 4,
      "text": "  if-feature cacheModePermanent;\n  ct:extends NonImmediateCache;\n  leaf exportInterval {\n    type uint32;\n    units milliseconds;\n    description \"This parameter configures the interval for\n      periodical export of Flow Records in milliseconds.\n      If not configured by the user, the Monitoring Device sets\n      this parameter.\";\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type ExportDestination {\n  ct:abstract true;\n  description \"Abstract export destination.\";\n  key name;\n  leaf name {\n    type nameType;\n    description \"Key of an export destination.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ct:complex-type IpDestination {\n  ct:abstract true;\n  ct:extends ExportDestination;\n  description \"IP export destination.\";\n  leaf ipfixVersion {\n     type uint16;\n     default 10;\n     description \"IPFIX version number.\";\n   }\n   leaf destinationPort {\n     type inet:port-number;\n     description \"If not configured by the user, the Monitoring\n       Device uses the default port number for IPFIX, which is\n       4739 without Transport Layer Security, and 4740 if Transport\n       Layer Security is activated.\";\n   }\n   choice indexOrName {\n     description \"Index or name of the interface ... \";\n     reference \"RFC 2863.\";\n     leaf ifIndex {\n       type uint32;\n       description \"Index of an interface as stored in the ifTable\n         of IF-MIB.\";\n       reference \"RFC 2863.\";\n     }\n     leaf ifName {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "       type string;\n       description \"Name of an interface as stored in the ifTable\n         of IF-MIB.\";\n       reference \"RFC 2863.\";\n     }\n   }\n   leaf sendBufferSize {\n     type uint32;\n     units bytes;\n     description \"Size of the socket send buffer.\n       If not configured by the user, this parameter is set by\n       the Monitoring Device.\";\n   }\n   leaf rateLimit {\n     type uint32;\n     units \"bytes per second\";\n     description \"Maximum number of bytes per second ... \";\n     reference \"RFC 5476, Section 6.3\";\n   }\n   container transportLayerSecurity {\n     presence \"If transportLayerSecurity is present, DTLS is\n       enabled if the transport protocol is SCTP or UDP, and TLS\n       is enabled if the transport protocol is TCP.\";\n     description \"Transport Layer Security configuration.\";\n     uses transportLayerSecurityParameters;\n   }\n   container transportSession {\n     config false;\n     description \"State parameters of the Transport Session\n       directed to the given destination.\";\n     uses transportSessionParameters;\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SctpExporter {\n  ct:extends IpDestination;\n  description \"SCTP exporter.\";\n  leaf-list sourceIPAddress {\n    type inet:ip-address;\n    description \"List of source IP addresses used ... \";\n    reference \"RFC 4960, Section 6.4\n      (Multi-Homed SCTP Endpoints).\";\n  }\n  leaf-list destinationIPAddress {\n    type inet:ip-address;\n    min-elements 1;\n    description \"One or multiple IP addresses ... \";\n    reference \"RFC 4960, Section 6.4",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      (Multi-Homed SCTP Endpoints).\";\n  }\n  leaf timedReliability {\n    type uint32;\n    units milliseconds;\n    default 0;\n    description \"Lifetime in milliseconds ... \";\n    reference \"RFC 3758; RFC 4960.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type UdpExporter {\n  ct:extends IpDestination;\n  if-feature udpTransport;\n  description \"UDP parameters.\";\n  leaf sourceIPAddress {\n    type inet:ip-address;\n    description \"Source IP address used by the Exporting\n       Process ...\";\n  }\n  leaf destinationIPAddress {\n    type inet:ip-address;\n    mandatory true;\n    description \"IP address of the Collection Process to which\n      IPFIX Messages are sent.\";\n  }\n  leaf maxPacketSize {\n    type uint16;\n    units octets;\n    description \"This parameter specifies the maximum size of\n      IP packets ... \";\n  }\n  leaf templateRefreshTimeout {\n    type uint32;\n    units seconds;\n    default 600;\n    description \"Sets time after which Templates are resent in the\n      UDP Transport Session. ... \";\n    reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n      (ipfixTransportSessionTemplateRefreshTimeout).\";\n  }\n  leaf optionsTemplateRefreshTimeout {\n    type uint32;\n    units seconds;\n    default 600;\n    description \"Sets time after which Options Templates are\n      resent in the UDP Transport Session. ... \";\n    reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "       (ipfixTransportSessionOptionsTemplateRefreshTimeout).\";\n   }\n   leaf templateRefreshPacket {\n     type uint32;\n     units \"IPFIX Messages\";\n     description \"Sets number of IPFIX Messages after which\n       Templates are resent in the UDP Transport Session. ... \";\n     reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n       (ipfixTransportSessionTemplateRefreshPacket).\";\n   }\n   leaf optionsTemplateRefreshPacket {\n     type uint32;\n     units \"IPFIX Messages\";\n     description \"Sets number of IPFIX Messages after which\n       Options Templates are resent in the UDP Transport Session\n       protocol. ... \";\n     reference \"RFC 5101, Section 10.3.6; RFC 5815, Section 8\n       (ipfixTransportSessionOptionsTemplateRefreshPacket).\";\n   }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type TcpExporter {\n  ct:extends IpDestination;\n  if-feature tcpTransport;\n  description \"TCP exporter\";\n  leaf sourceIPAddress {\n    type inet:ip-address;\n    description \"Source IP address used by the Exporting\n      Process...\";\n  }\n  leaf destinationIPAddress {\n    type inet:ip-address;\n    mandatory true;\n    description \"IP address of the Collection Process to which\n      IPFIX Messages are sent.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type FileWriter {\n  ct:extends ExportDestination;\n  if-feature fileWriter;\n  description \"File Writer.\";\n  leaf ipfixVersion {\n    type uint16;\n    default 10;\n    description \"IPFIX version number.\";\n  }\n  leaf file {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "  type inet:uri;\n  mandatory true;\n  description \"URI specifying the location of the file.\";\n}\nleaf bytes {\n  type yang:counter64;\n  units octets;\n  config false;\n  description \"The number of bytes written by the File\n    Writer...\";\n}\nleaf messages {\n  type yang:counter64;\n  units \"IPFIX Messages\";\n  config false;\n  description \"The number of IPFIX Messages written by the File\n    Writer. ... \";\n}\nleaf discardedMessages {\n  type yang:counter64;\n  units \"IPFIX Messages\";\n  config false;\n  description \"The number of IPFIX Messages that could not be\n    written by the File Writer ... \";\n}\nleaf records {\n  type yang:counter64;\n  units \"Data Records\";\n  config false;\n  description \"The number of Data Records written by the File\n    Writer. ... \";\n}\nleaf templates {\n  type yang:counter32;\n  units \"Templates\";\n  config false;\n  description \"The number of Template Records (excluding\n    Options Template Records) written by the File Writer.\n    ... \";\n}\nleaf optionsTemplates {\n  type yang:counter32;\n  units \"Options Templates\";\n  config false;\n  description \"The number of Options Template Records written\n    by the File Writer. ... \";\n}\nleaf fileWriterDiscontinuityTime {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    type yang:date-and-time;\n    config false;\n    description \"Timestamp of the most recent occasion at which\n      one or more File Writer counters suffered a discontinuity.\n      ... \";\n  }\n  list template {\n    config false;\n    description \"This list contains the Templates and Options\n      Templates that have been written by the File Reader. ... \";\n    uses templateParameters;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type ExportingProcess {\n  if-feature exporter;\n  description \"Exporting Process of the Monitoring Device.\";\n  key name;\n  leaf name {\n    type nameType;\n    description \"Key of this list.\";\n  }\n  leaf exportMode {\n    type identityref {\n      base \"exportMode\";\n    }\n    default parallel;\n    description \"This parameter determines to which configured\n      destination(s) the incoming Data Records are exported.\";\n  }\n  ct:instance-list destination {\n    ct:instance-type ExportDestination;\n    min-elements 1;\n    description \"Export destinations.\";\n  }\n  list options {\n    key name;\n    description \"List of options reported by the Exporting\n      Process.\";\n    leaf name {\n      type nameType;\n      description \"Key of this list.\";\n    }\n    leaf optionsType {\n      type identityref {\n        base \"optionsType\";\n      }\n      mandatory true;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      description \"Type of the exported options data.\";\n    }\n    leaf optionsTimeout {\n      type uint32;\n      units milliseconds;\n      description \"Time interval for periodic export of the options\n        data. ... \";\n    }\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type CollectingProcess {\n  description \"A Collecting Process.\";\n  key name;\n  leaf name {\n    type nameType;\n    description \"Key of a collecing process.\";\n  }\n  ct:instance-list sctpCollector {\n    ct:instance-type SctpCollector;\n    description \"List of SCTP receivers (sockets) on which the\n      Collecting Process receives IPFIX Messages.\";\n  }\n  ct:instance-list udpCollector {\n    if-feature udpTransport;\n    ct:instance-type UdpCollector;\n    description \"List of UDP receivers (sockets) on which the\n      Collecting Process receives IPFIX Messages.\";\n  }\n  ct:instance-list tcpCollector {\n    if-feature tcpTransport;\n    ct:instance-type TcpCollector;\n    description \"List of TCP receivers (sockets) on which the\n      Collecting Process receives IPFIX Messages.\";\n  }\n  ct:instance-list fileReader {\n    if-feature fileReader;\n    ct:instance-type FileReader;\n    description \"List of File Readers from which the Collecting\n      Process reads IPFIX Messages.\";\n  }\n  leaf-list exportingProcess {\n    type instance-identifier { ct:instance-type ExportingProcess; }\n    description \"Export of received records without any\n      modifications.  Records are processed by all Exporting\n      Processes in the list.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type Collector {\n    ct:abstract true;\n    description \"Abstract collector.\";\n    key name;\n    leaf name {\n      type nameType;\n      description \"Key of collectors\";\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type IpCollector {\n  ct:abstract true;\n  ct:extends Collector;\n  description \"Collector for IP transport protocols.\";\n  leaf localPort {\n    type inet:port-number;\n    description \"If not configured, the Monitoring Device uses the\n      default port number for IPFIX, which is 4739 without\n      Transport Layer Security, and 4740 if Transport Layer\n      Security is activated.\";\n  }\n  container transportLayerSecurity {\n    presence \"If transportLayerSecurity is present, DTLS is enabled\n      if the transport protocol is SCTP or UDP, and TLS is enabled\n      if the transport protocol is TCP.\";\n    description \"Transport Layer Security configuration.\";\n    uses transportLayerSecurityParameters;\n  }\n  list transportSession {\n    config false;\n    description \"This list contains the currently established\n      Transport Sessions terminating at the given socket.\";\n    uses transportSessionParameters;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SctpCollector {\n  ct:extends IpCollector;\n  description \"Collector listening on an SCTP socket\";\n  leaf-list localIPAddress {\n    type inet:ip-address;\n    description \"List of local IP addresses ... \";\n    reference \"RFC 4960, Section 6.4\n      (Multi-Homed SCTP Endpoints).\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type UdpCollector {",
      "zh-CHS": "ct：复杂型UDP收集器{"
    },
    {
      "indent": 5,
      "text": "  ct:extends IpCollector;\n  description \"Parameters of a listening UDP socket at a\n    Collecting Process.\";\n  leaf-list localIPAddress {\n    type inet:ip-address;\n    description \"List of local IP addresses on which the Collecting\n      Process listens for IPFIX Messages.\";\n  }\n  leaf templateLifeTime {\n    type uint32;\n    units seconds;\n    default 1800;\n    description \"Sets the lifetime of Templates for all UDP\n      Transport Sessions ... \";\n    reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n      (ipfixTransportSessionTemplateRefreshTimeout).\";\n  }\n  leaf optionsTemplateLifeTime {\n    type uint32;\n    units seconds;\n    default 1800;\n    description \"Sets the lifetime of Options Templates for all\n      UDP Transport Sessions terminating at this UDP socket.\n      ... \";\n    reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n      (ipfixTransportSessionOptionsTemplateRefreshTimeout).\";\n  }\n  leaf templateLifePacket {\n    type uint32;\n    units \"IPFIX Messages\";\n    description \"If this parameter is configured, Templates\n      defined in a UDP Transport Session become invalid if ...\";\n    reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n      (ipfixTransportSessionTemplateRefreshPacket).\";\n  }\n  leaf optionsTemplateLifePacket {\n    type uint32;\n    units \"IPFIX Messages\";\n    description \"If this parameter is configured, Options\n      Templates defined in a UDP Transport Session become\n      invalid if ...\";\n    reference \"RFC 5101, Section 10.3.7; RFC 5815, Section 8\n      (ipfixTransportSessionOptionsTemplateRefreshPacket).\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type TcpCollector {\n  ct:extends IpCollector;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  description \"Collector listening on a TCP socket.\";\n  leaf-list localIPAddress {\n    type inet:ip-address;\n    description \"List of local IP addresses on which the Collecting\n      Process listens for IPFIX Messages.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type FileReader {\n  ct:extends Collector;\n  description \"File Reading collector.\";\n  leaf file {\n    type inet:uri;\n    mandatory true;\n    description \"URI specifying the location of the file.\";\n  }\n  leaf bytes {\n    type yang:counter64;\n    units octets;\n    config false;\n    description \"The number of bytes read by the File Reader.\n      ... \";\n  }\n  leaf messages {\n    type yang:counter64;\n    units \"IPFIX Messages\";\n    config false;\n    description \"The number of IPFIX Messages read by the File\n      Reader. ... \";\n  }\n  leaf records {\n    type yang:counter64;\n    units \"Data Records\";\n    config false;\n    description \"The number of Data Records read by the File\n      Reader. ... \";\n  }\n  leaf templates {\n    type yang:counter32;\n    units \"Templates\";\n    config false;\n    description \"The number of Template Records (excluding\n      Options Template Records) read by the File Reader. ...\";\n  }\n  leaf optionsTemplates {\n    type yang:counter32;\n    units \"Options Templates\";\n    config false;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    description \"The number of Options Template Records read by\n      the File Reader. ... \";\n  }\n  leaf fileReaderDiscontinuityTime {\n    type yang:date-and-time;\n    config false;\n    description \"Timestamp of the most recent occasion ... \";\n  }\n  list template {\n    config false;\n    description \"This list contains the Templates and Options\n      Templates that have been read by the File Reader.\n      Withdrawn or invalidated (Options) Templates MUST be removed\n      from this list.\";\n    uses templateParameters;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "ct:complex-type SelectionProcess {\n    description \"Selection Process\";\n    key name;\n    leaf name {\n      type nameType;\n      description \"Key of a selection process.\";\n    }\n    ct:instance-list selector {\n      ct:instance-type Selector;\n      min-elements 1;\n      ordered-by user;\n      description \"List of Selectors that define the action of the\n        Selection Process on a single packet.  The Selectors are\n        serially invoked in the same order as they appear in this\n        list.\";\n    }\n    list selectionSequence {\n      config false;\n      description \"This list contains the Selection Sequence IDs\n        which are assigned by the Monitoring Device ... \";\n      reference \"RFC 5476.\";\n      leaf observationDomainId {\n        type uint32;\n        description \"Observation Domain ID for which the\n          Selection Sequence ID is assigned.\";\n      }\n      leaf selectionSequenceId {\n        type uint64;\n        description \"Selection Sequence ID used in the Selection\n          Sequence (Statistics) Report Interpretation.\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    }\n  }\n  leaf cache {\n    type instance-identifier { ct:instance-type Cache; }\n    description \"Cache which receives the output of the\n      Selection Process.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Groupings\n*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "grouping transportLayerSecurityParameters {\n  description \"Transport layer security parameters.\";\n  leaf-list localCertificationAuthorityDN {\n    type string;\n    description \"Distinguished names of certification authorities\n      whose certificates may be used to identify the local\n      endpoint.\";\n  }\n  leaf-list localSubjectDN {\n    type string;\n    description \"Distinguished names that may be used in the\n      certificates to identify the local endpoint.\";\n  }\n  leaf-list localSubjectFQDN {\n    type inet:domain-name;\n    description \"Fully qualified domain names that may be used to\n      in the certificates to identify the local endpoint.\";\n  }\n  leaf-list remoteCertificationAuthorityDN {\n    type string;\n    description \"Distinguished names of certification authorities\n      whose certificates are accepted to authorize remote\n      endpoints.\";\n  }\n  leaf-list remoteSubjectDN {\n    type string;\n    description \"Distinguished names that are accepted in\n      certificates to authorize remote endpoints.\";\n  }\n  leaf-list remoteSubjectFQDN {\n    type inet:domain-name;\n    description \"Fully qualified domain names that are accepted in\n      certificates to authorize remote endpoints.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "grouping templateParameters {\n  description \"State parameters of a Template used by an Exporting\n    Process or received by a Collecting Process ... \";\n  reference \"RFC 5101; RFC 5815, Section 8 (ipfixTemplateEntry,\n    ipfixTemplateDefinitionEntry, ipfixTemplateStatsEntry)\";\n  leaf observationDomainId {\n    type uint32;\n    description \"The ID of the Observation Domain for which this\n      Template is defined.\";\n    reference \"RFC 5815, Section 8\n      (ipfixTemplateObservationDomainId).\";\n  }\n  leaf templateId {\n    type uint16 {\n      range \"256..65535\" {\n        description \"Valid range of Template Ids.\";\n        reference \"RFC 5101\";\n      }\n    }\n    description \"This number indicates the Template Id in the IPFIX\n      message.\";\n    reference \"RFC 5815, Section 8 (ipfixTemplateId).\";\n  }\n  leaf setId {\n    type uint16;\n    description \"This number indicates the Set Id of the Template.\n      ... \";\n    reference \"RFC 5815, Section 8 (ipfixTemplateSetId).\";\n  }\n  leaf accessTime {\n    type yang:date-and-time;\n    description \"Used for Exporting Processes, ... \";\n    reference \"RFC 5815, Section 8 (ipfixTemplateAccessTime).\";\n  }\n  leaf templateDataRecords {\n    type yang:counter64;\n    description \"The number of transmitted or received Data\n      Records ... \";\n    reference \"RFC 5815, Section 8 (ipfixTemplateDataRecords).\";\n  }\n  leaf templateDiscontinuityTime {\n    type yang:date-and-time;\n    description \"Timestamp of the most recent occasion at which\n      the counter templateDataRecords suffered a discontinuity.\n      ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTemplateDiscontinuityTime).\";\n  }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "list field {\n  description \"This list contains the (Options) Template\n    fields of which the (Options) Template is defined.\n    ... \";\n  leaf ieId {\n    type uint16 {\n      range \"1..32767\" {\n        description \"Valid range of Information Element\n            identifiers.\";\n        reference \"RFC 5102, Section 4.\";\n      }\n    }\n    description \"This parameter indicates the Information\n      Element Id of the field.\";\n    reference \"RFC 5815, Section 8 (ipfixTemplateDefinitionIeId);\n      RFC 5102.\";\n  }\n  leaf ieLength {\n    type uint16;\n    units octets;\n    description \"This parameter indicates the length of the\n      Information Element of the field.\";\n    reference \"RFC 5815, Section 8\n      (ipfixTemplateDefinitionIeLength); RFC 5102.\";\n  }\n  leaf ieEnterpriseNumber {\n    type uint32;\n    description \"This parameter indicates the IANA enterprise\n      number of the authority ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTemplateDefinitionEnterpriseNumber).\";\n  }\n  leaf isFlowKey {\n    when \"../../setId = 2\" {\n      description \"This parameter is available for non-Options\n        Templates (Set Id is 2).\";\n    }\n    type empty;\n    description \"If present, this is a Flow Key field.\";\n    reference \"RFC 5815, Section 8\n      (ipfixTemplateDefinitionFlags).\";\n  }\n  leaf isScope {\n    when \"../../setId = 3\" {\n      description \"This parameter is available for Options\n        Templates (Set Id is 3).\";\n    }\n    type empty;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "      description \"If present, this is a scope field.\";\n      reference \"RFC 5815, Section 8\n        (ipfixTemplateDefinitionFlags).\";\n    }\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "grouping transportSessionParameters {\n  description \"State parameters of a Transport Session ... \";\n  reference \"RFC 5101; RFC 5815, Section 8\n    (ipfixTransportSessionEntry,\n     ipfixTransportSessionStatsEntry)\";\n  leaf ipfixVersion {\n    type uint16;\n    description \"Used for Exporting Processes, this parameter\n      contains the version number of the IPFIX protocol ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionIpfixVersion).\";\n  }\n  leaf sourceAddress {\n    type inet:ip-address;\n    description \"The source address of the Exporter of the\n      IPFIX Transport Session... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionSourceAddressType,\n      ipfixTransportSessionSourceAddress).\";\n  }\n  leaf destinationAddress {\n    type inet:ip-address;\n    description \"The destination address of the Collector of\n      the IPFIX Transport Session... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionDestinationAddressType,\n      ipfixTransportSessionDestinationAddress).\";\n  }\n  leaf sourcePort {\n    type inet:port-number;\n    description \"The transport protocol port number of the\n      Exporter of the IPFIX Transport Session.\";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionSourcePort).\";\n  }\n  leaf destinationPort {\n    type inet:port-number;\n    description \"The transport protocol port number of the\n      Collector of the IPFIX Transport Session... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionDestinationPort).\";",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "}\nleaf sctpAssocId {\n  type uint32;\n  description \"The association id used for the SCTP session\n    between the Exporter and the Collector ... \";\n  reference \"RFC 5815, Section 8\n    (ipfixTransportSessionSctpAssocId),\n    RFC 3871\";\n}\nleaf status {\n  type transportSessionStatus;\n  description \"Status of the Transport Session.\";\n  reference \"RFC 5815, Section 8 (ipfixTransportSessionStatus).\";\n}\nleaf rate {\n  type yang:gauge32;\n  units \"bytes per second\";\n  description \"The number of bytes per second transmitted by the\n    Exporting Process or received by the Collecting Process.\n    This parameter is updated every second.\";\n  reference \"RFC 5815, Section 8 (ipfixTransportSessionRate).\";\n}\nleaf bytes {\n  type yang:counter64;\n  units bytes;\n  description \"The number of bytes transmitted by the\n    Exporting Process or received by the Collecting\n    Process ... \";\n  reference \"RFC 5815, Section 8 (ipfixTransportSessionBytes).\";\n}\nleaf messages {\n  type yang:counter64;\n  units \"IPFIX Messages\";\n  description \"The number of messages transmitted by the\n    Exporting Process or received by the Collecting Process... \";\n  reference \"RFC 5815, Section 8\n    (ipfixTransportSessionMessages).\";\n}\nleaf discardedMessages {\n  type yang:counter64;\n  units \"IPFIX Messages\";\n  description \"Used for Exporting Processes, this parameter\n    indicates the number of messages that could not be\n    sent ...\";\n  reference \"RFC 5815, Section 8\n    (ipfixTransportSessionDiscardedMessages).\";\n}\nleaf records {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    type yang:counter64;\n    units \"Data Records\";\n    description \"The number of Data Records transmitted ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionRecords).\";\n  }\n  leaf templates {\n    type yang:counter32;\n    units \"Templates\";\n    description \"The number of Templates transmitted by the\n      Exporting Process or received by the Collecting Process.\n      ... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionTemplates).\";\n  }\n  leaf optionsTemplates {\n    type yang:counter32;\n    units \"Options Templates\";\n    description \"The number of Option Templates transmitted by the\n      Exporting Process or received by the Collecting Process...\";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionOptionsTemplates).\";\n  }\n  leaf transportSessionStartTime {\n    type yang:date-and-time;\n    description \"Timestamp of the start of the given Transport\n      Session... \";\n  }\n  leaf transportSessionDiscontinuityTime {\n    type yang:date-and-time;\n    description \"Timestamp of the most recent occasion at which\n      one or more of the Transport Session counters suffered a\n      discontinuity... \";\n    reference \"RFC 5815, Section 8\n      (ipfixTransportSessionDiscontinuityTime).\";\n  }\n  list template {\n    description \"This list contains the Templates and Options\n      Templates that are transmitted by the Exporting Process\n      or received by the Collecting Process.\n      Withdrawn or invalidated (Options) Templates MUST be removed\n      from this list.\";\n    uses templateParameters;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/*****************************************************************\n* Main container",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "*****************************************************************/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "container ipfix {\n  description \"Top-level node of the IPFIX/PSAMP configuration\n    data model.\";\n  ct:instance-list collectingProcess {\n    if-feature collector;\n    ct:instance-type CollectingProcess;\n  }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ct:instance-list observationPoint {\n  if-feature meter;\n  ct:instance-type ObservationPoint;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ct:instance-list selectionProcess {\n  if-feature meter;\n  ct:instance-type SelectionProcess;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ct:instance-list cache {\n  if-feature meter;\n  description \"Cache of the Monitoring Device.\";\n  ct:instance-type Cache;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ct:instance-list exportingProcess {\n  if-feature exporter;\n  description \"Exporting Process of the Monitoring Device.\";\n  ct:instance-type ExportingProcess;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "     }\n}\n<CODE ENDS>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "zh-CHS": "作者地址"
    },
    {
      "indent": 3,
      "text": "Bernd Linowski TCS/Nokia Siemens Networks Heltorfer Strasse 1 Duesseldorf 40472 Germany",
      "zh-CHS": "Bernd Linowski TCS/Nokia Siemens Networks Heltorfer Strasse 1 Duesseldorf 40472德国"
    },
    {
      "indent": 3,
      "text": "EMail: bernd.linowski.ext@nsn.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Mehmet Ersue Nokia Siemens Networks St.-Martin-Strasse 76 Munich 81541 Germany",
      "zh-CHS": "德国慕尼黑圣马丁大街76号诺基亚西门子网络公司慕尼黑81541"
    },
    {
      "indent": 3,
      "text": "EMail: mehmet.ersue@nsn.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Siarhei Kuryla 360 Treasury Systems Grueneburgweg 16-18 Frankfurt am Main 60322 Germany",
      "zh-CHS": "Siarhei Kuryla 360财政系统Grueneburgweg 16-18德国缅因州法兰克福60322"
    },
    {
      "indent": 3,
      "text": "EMail: s.kuryla@gmail.com",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}