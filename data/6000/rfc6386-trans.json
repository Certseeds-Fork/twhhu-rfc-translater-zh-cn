{
  "title": {
    "text": "RFC 6386: VP8 Data Format and Decoding Guide",
    "zh-CHS": "RFC 6386"
  },
  "number": 6386,
  "created_at": "2021-11-06 06:51:45.388357+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                       J. Bankoski\nRequest for Comments: 6386                                   J. Koleszar\nCategory: Informational                                       L. Quillio\nISSN: 2070-1721                                               J. Salonen\n                                                              P. Wilkins\n                                                                   Y. Xu\n                                                             Google Inc.\n                                                           November 2011",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 19,
      "text": "VP8 Data Format and Decoding Guide",
      "zh-CHS": "VP8数据格式和解码指南"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "zh-CHS": "摘要"
    },
    {
      "indent": 3,
      "text": "This document describes the VP8 compressed video data format, together with a discussion of the decoding procedure for the format.",
      "zh-CHS": "本文档介绍了VP8压缩视频数据格式，并讨论了该格式的解码过程。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "zh-CHS": "关于下段备忘"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "zh-CHS": "本文件不是互联网标准跟踪规范；它是为了提供信息而发布的。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "zh-CHS": "这是对RFC系列的贡献，独立于任何其他RFC流。RFC编辑器已选择自行发布此文档，并且未声明其对实现或部署的价值。RFC编辑批准发布的文件不适用于任何级别的互联网标准；见RFC 5741第2节。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6386.",
      "zh-CHS": "有关本文件当前状态、任何勘误表以及如何提供反馈的信息，请访问http://www.rfc-editor.org/info/rfc6386."
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "zh-CHS": "版权公告"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2011 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "zh-CHS": "版权所有（c）2011 IETF信托基金和确定为文件作者的人员。版权所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "zh-CHS": "本文件受BCP 78和IETF信托有关IETF文件的法律规定的约束(http://trustee.ietf.org/license-info)自本文件出版之日起生效。请仔细阅读这些文件，因为它们描述了您对本文件的权利和限制。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "zh-CHS": "目录"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................4\n2. Format Overview .................................................5\n3. Compressed Frame Types ..........................................7\n4. Overview of Compressed Data Format ..............................8\n5. Overview of the Decoding Process ................................9\n6. Description of Algorithms ......................................14\n7. Boolean Entropy Decoder ........................................16\n   7.1. Underlying Theory of Coding ...............................17\n   7.2. Practical Algorithm Description ...........................18\n   7.3. Actual Implementation .....................................20\n8. Compressed Data Components .....................................25\n   8.1. Tree Coding Implementation ................................27\n   8.2. Tree Coding Example .......................................28\n9. Frame Header ...................................................30\n   9.1. Uncompressed Data Chunk ...................................30\n   9.2. Color Space and Pixel Type (Key Frames Only) ..............33\n   9.3. Segment-Based Adjustments .................................34\n   9.4. Loop Filter Type and Levels ...............................35\n   9.5. Token Partition and Partition Data Offsets ................36\n   9.6. Dequantization Indices ....................................37\n   9.7. Refresh Golden Frame and Altref Frame .....................38\n   9.8. Refresh Last Frame Buffer .................................39\n   9.9. DCT Coefficient Probability Update ........................39\n   9.10. Remaining Frame Header Data (Non-Key Frame) ..............40\n   9.11. Remaining Frame Header Data (Key Frame) ..................41\n10. Segment-Based Feature Adjustments .............................41\n11. Key Frame Macroblock Prediction Records .......................42\n   11.1. mb_skip_coeff ............................................42\n   11.2. Luma Modes ...............................................42\n   11.3. Subblock Mode Contexts ...................................45\n   11.4. Chroma Modes .............................................46\n   11.5. Subblock Mode Probability Table ..........................47\n12. Intraframe Prediction .........................................50\n   12.1. mb_skip_coeff ............................................51\n   12.2. Chroma Prediction ........................................51\n   12.3. Luma Prediction ..........................................54\n13. DCT Coefficient Decoding ......................................60\n   13.1. Macroblock without Non-Zero Coefficient Values ...........61\n   13.2. Coding of Individual Coefficient Values ..................61\n   13.3. Token Probabilities ......................................63\n   13.4. Token Probability Updates ................................68\n   13.5. Default Token Probability Table ..........................73",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "14. DCT and WHT Inversion and Macroblock Reconstruction ...........76\n   14.1. Dequantization ...........................................76\n   14.2. Inverse Transforms .......................................78\n   14.3. Implementation of the WHT Inversion ......................78\n   14.4. Implementation of the DCT Inversion ......................81\n   14.5. Summation of Predictor and Residue .......................83\n15. Loop Filter ...................................................84\n   15.1. Filter Geometry and Overall Procedure ....................85\n   15.2. Simple Filter ............................................87\n   15.3. Normal Filter ............................................91\n   15.4. Calculation of Control Parameters ........................95\n16. Interframe Macroblock Prediction Records ......................97\n   16.1. Intra-Predicted Macroblocks ..............................97\n   16.2. Inter-Predicted Macroblocks ..............................98\n   16.3. Mode and Motion Vector Contexts ..........................99\n   16.4. Split Prediction ........................................105\n17. Motion Vector Decoding .......................................108\n   17.1. Coding of Each Component ................................108\n   17.2. Probability Updates .....................................110\n18. Interframe Prediction ........................................113\n   18.1. Bounds on, and Adjustment of, Motion Vectors ............113\n   18.2. Prediction Subblocks ....................................115\n   18.3. Sub-Pixel Interpolation .................................115\n   18.4. Filter Properties .......................................118\n19. Annex A: Bitstream Syntax ....................................120\n   19.1. Uncompressed Data Chunk .................................121\n   19.2. Frame Header ............................................122\n   19.3. Macroblock Data .........................................130\n20. Attachment One: Reference Decoder Source Code ................133\n   20.1. bit_ops.h ...............................................133\n   20.2. bool_decoder.h ..........................................133\n   20.3. dequant_data.h ..........................................137\n   20.4. dixie.c .................................................138\n   20.5. dixie.h .................................................151\n   20.6. dixie_loopfilter.c ......................................158\n   20.7. dixie_loopfilter.h ......................................170\n   20.8. idct_add.c ..............................................171\n   20.9. idct_add.h ..............................................174\n   20.10. mem.h ..................................................175\n   20.11. modemv.c ...............................................176\n   20.12. modemv.h ...............................................192\n   20.13. modemv_data.h ..........................................193\n   20.14. predict.c ..............................................198\n   20.15. predict.h ..............................................231\n   20.16. tokens.c ...............................................232\n   20.17. tokens.h ...............................................242\n   20.18. vp8_prob_data.h ........................................243\n   20.19. vpx_codec_internal.h ...................................252",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "   20.20. vpx_decoder.h ..........................................263\n   20.21. vpx_decoder_compat.h ...................................271\n   20.22. vpx_image.c ............................................285\n   20.23. vpx_image.h ............................................291\n   20.24. vpx_integer.h ..........................................298\n   20.25. AUTHORS File ...........................................299\n   20.26. LICENSE ................................................301\n   20.27. PATENTS ................................................302\n21. Security Considerations ......................................302\n22. References ...................................................303\n   22.1. Normative Reference .....................................303\n   22.2. Informative References ..................................303",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "zh-CHS": "1. 介绍"
    },
    {
      "indent": 3,
      "text": "This document describes the VP8 compressed video data format, together with a discussion of the decoding procedure for the format. It is intended to be used in conjunction with, and as a guide to, the reference decoder source code provided in Attachment One (Section 20). If there are any conflicts between this narrative and the reference source code, the reference source code should be considered correct. The bitstream is defined by the reference source code and not this narrative.",
      "zh-CHS": "本文档介绍了VP8压缩视频数据格式，并讨论了该格式的解码过程。其旨在与附件1（第20节）中提供的参考解码器源代码结合使用，并作为指南。如果此叙述与参考源代码之间存在任何冲突，则应认为参考源代码是正确的。比特流由参考源代码定义，而不是此叙述。"
    },
    {
      "indent": 3,
      "text": "Like many modern video compression schemes, VP8 is based on decomposition of frames into square subblocks of pixels, prediction of such subblocks using previously constructed blocks, and adjustment of such predictions (as well as synthesis of unpredicted blocks) using a discrete cosine transform (hereafter abbreviated as DCT). In one special case, however, VP8 uses a Walsh-Hadamard transform (hereafter abbreviated as WHT) instead of a DCT.",
      "zh-CHS": "与许多现代视频压缩方案一样，VP8基于将帧分解为像素的方形子块、使用先前构造的块预测此类子块以及使用离散余弦变换（以下简称为DCT）调整此类预测（以及合成不可预测的块）。然而，在一种特殊情况下，VP8使用沃尔什-阿达玛变换（以下简称WHT）代替DCT。"
    },
    {
      "indent": 3,
      "text": "Roughly speaking, such systems reduce datarate by exploiting the temporal and spatial coherence of most video signals. It is more efficient to specify the location of a visually similar portion of a prior frame than it is to specify pixel values. The frequency segregation provided by the DCT and WHT facilitates the exploitation of both spatial coherence in the original signal and the tolerance of the human visual system to moderate losses of fidelity in the reconstituted signal.",
      "zh-CHS": "粗略地说，这样的系统通过利用大多数视频信号的时间和空间一致性来降低数据速率。指定前一帧的视觉相似部分的位置比指定像素值更有效。DCT和WHT提供的频率分离有助于利用原始信号中的空间相干性和人类视觉系统的容忍度，以缓和重建信号中的保真度损失。"
    },
    {
      "indent": 3,
      "text": "VP8 augments these basic concepts with, among other things, sophisticated usage of contextual probabilities. The result is a significant reduction in datarate at a given quality.",
      "zh-CHS": "VP8增加了这些基本概念，其中包括对上下文概率的复杂使用。结果是在给定质量下，数据速率显著降低。"
    },
    {
      "indent": 3,
      "text": "Unlike some similar schemes (the older MPEG formats, for example), VP8 specifies exact values for reconstructed pixels. Specifically, the specification for the DCT and WHT portions of the reconstruction does not allow for any \"drift\" caused by truncation of fractions. Rather, the algorithm is specified using fixed-precision integer operations exclusively. This greatly facilitates the verification of the correctness of a decoder implementation and also avoids difficult-to-predict visual incongruities between such implementations.",
      "zh-CHS": "与一些类似的方案（例如，较旧的MPEG格式）不同，VP8为重建像素指定精确的值。具体而言，重构的DCT和WHT部分的规范不允许由分数截断引起的任何“漂移”。相反，该算法是专门使用固定精度整数运算指定的。这大大有助于验证解码器实现的正确性，还避免了此类实现之间难以预测的视觉不一致。"
    },
    {
      "indent": 3,
      "text": "It should be remarked that, in a complete video playback system, the displayed frames may or may not be identical to the reconstructed frames. Many systems apply a final level of filtering (commonly referred to as postprocessing) to the reconstructed frames prior to viewing. Such postprocessing has no effect on the decoding and reconstruction of subsequent frames (which are predicted using the completely specified reconstructed frames) and is beyond the scope of this document. In practice, the nature and extent of this sort of postprocessing is dependent on both the taste of the user and on the computational facilities of the playback environment.",
      "zh-CHS": "应当注意，在完整的视频回放系统中，显示的帧可能与重构的帧相同，也可能与重构的帧不同。许多系统在观看之前对重建的帧应用最终级别的过滤（通常称为后处理）。这种后处理对后续帧（使用完全指定的重构帧预测）的解码和重构没有影响，并且超出了本文档的范围。实际上，这种后处理的性质和程度取决于用户的喜好和回放环境的计算设施。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“要求”、“应”、“不应”、“应”、“不应”、“建议”、“可”和“可选”应按照RFC 2119[RFC2119]中所述进行解释。"
    },
    {
      "indent": 0,
      "text": "2. Format Overview",
      "section_title": true,
      "zh-CHS": "2. 格式概述"
    },
    {
      "indent": 3,
      "text": "VP8 works exclusively with an 8-bit YUV 4:2:0 image format. In this format, each 8-bit pixel in the two chroma planes (U and V) corresponds positionally to a 2x2 block of 8-bit luma pixels in the Y plane; coordinates of the upper left corner of the Y block are of course exactly twice the coordinates of the corresponding chroma pixels. When we refer to pixels or pixel distances without specifying a plane, we are implicitly referring to the Y plane or to the complete image, both of which have the same (full) resolution.",
      "zh-CHS": "VP8专用于8位YUV 4:2:0图像格式。在该格式中，两个色度平面（U和V）中的每个8位像素在位置上对应于Y平面中的8位luma像素的2x2块；Y块左上角的坐标当然是相应色度像素坐标的两倍。当我们在不指定平面的情况下引用像素或像素距离时，我们暗指的是Y平面或完整图像，两者具有相同的（完整）分辨率。"
    },
    {
      "indent": 3,
      "text": "As is usually the case, the pixels are simply a large array of bytes stored in rows from top to bottom, each row being stored from left to right. This \"left to right\" then \"top to bottom\" raster-scan order is reflected in the layout of the compressed data as well.",
      "zh-CHS": "通常情况下，像素只是从上到下按行存储的一个大字节数组，每行从左到右存储。这种“从左到右”然后“从上到下”的光栅扫描顺序也反映在压缩数据的布局中。"
    },
    {
      "indent": 3,
      "text": "Provision has been made in the VP8 bitstream header for the support of a secondary YUV color format, in the form of a reserved bit.",
      "zh-CHS": "VP8比特流报头中已规定以保留位的形式支持辅助YUV颜色格式。"
    },
    {
      "indent": 3,
      "text": "Occasionally, at very low datarates, a compression system may decide to reduce the resolution of the input signal to facilitate efficient compression. The VP8 data format supports this via optional upscaling of its internal reconstruction buffer prior to output (this",
      "zh-CHS": "有时，在非常低的数据速率下，压缩系统可能会决定降低输入信号的分辨率，以促进高效压缩。VP8数据格式通过在输出之前可选地放大其内部重建缓冲区（此"
    },
    {
      "indent": 3,
      "text": "is completely distinct from the optional postprocessing discussed earlier, which has nothing to do with decoding per se). This upsampling restores the video frames to their original resolution. In other words, the compression/decompression system can be viewed as a \"black box\", where the input and output are always at a given resolution. The compressor might decide to \"cheat\" and process the signal at a lower resolution. In that case, the decompressor needs the ability to restore the signal to its original resolution.",
      "zh-CHS": "与前面讨论的可选后处理完全不同，后者与解码本身无关）。此上采样将视频帧恢复为其原始分辨率。换句话说，压缩/解压缩系统可以被视为一个“黑匣子”，其中输入和输出总是以给定的分辨率。压缩机可能决定“欺骗”并以较低的分辨率处理信号。在这种情况下，解压器需要能够将信号恢复到其原始分辨率。"
    },
    {
      "indent": 3,
      "text": "Internally, VP8 decomposes each output frame into an array of macroblocks. A macroblock is a square array of pixels whose Y dimensions are 16x16 and whose U and V dimensions are 8x8. Macroblock-level data in a compressed frame occurs (and must be processed) in a raster order similar to that of the pixels comprising the frame.",
      "zh-CHS": "在内部，VP8将每个输出帧分解为宏块数组。宏块是Y尺寸为16x16、U和V尺寸为8x8的正方形像素阵列。压缩帧中的宏块级数据以与构成帧的像素的光栅顺序相似的光栅顺序出现（并且必须进行处理）。"
    },
    {
      "indent": 3,
      "text": "Macroblocks are further decomposed into 4x4 subblocks. Every macroblock has 16 Y subblocks, 4 U subblocks, and 4 V subblocks. Any subblock-level data (and processing of such data) again occurs in raster order, this time in raster order within the containing macroblock.",
      "zh-CHS": "宏块进一步分解为4x4子块。每个宏块有16个Y子块、4个U子块和4个V子块。任何子块级数据（以及对此类数据的处理）再次以光栅顺序出现，这一次是在包含宏块内以光栅顺序出现。"
    },
    {
      "indent": 3,
      "text": "As discussed in further detail below, data can be specified at the levels of both macroblocks and their subblocks.",
      "zh-CHS": "如下文进一步详细讨论的，可以在宏块及其子块的级别指定数据。"
    },
    {
      "indent": 3,
      "text": "Pixels are always treated, at a minimum, at the level of subblocks, which may be thought of as the \"atoms\" of the VP8 algorithm. In particular, the 2x2 chroma blocks corresponding to 4x4 Y subblocks are never treated explicitly in the data format or in the algorithm specification.",
      "zh-CHS": "像素总是至少在子块级别上处理，这可能被认为是VP8算法的“原子”。特别是，与4x4 Y子块相对应的2x2色度块从未在数据格式或算法规范中明确处理。"
    },
    {
      "indent": 3,
      "text": "The DCT and WHT always operate at a 4x4 resolution. The DCT is used for the 16Y, 4U, and 4V subblocks. The WHT is used (with some but not all prediction modes) to encode a 4x4 array comprising the average intensities of the 16 Y subblocks of a macroblock. These average intensities are, up to a constant normalization factor, nothing more than the 0th DCT coefficients of the Y subblocks. This \"higher-level\" WHT is a substitute for the explicit specification of those coefficients, in exactly the same way as the DCT of a subblock substitutes for the specification of the pixel values comprising the subblock. We consider this 4x4 array as a second-order subblock called Y2, and think of a macroblock as containing 24 \"real\" subblocks and, sometimes, a 25th \"virtual\" subblock. This is dealt with further in Section 13.",
      "zh-CHS": "DCT和WHT始终以4x4分辨率运行。DCT用于16Y、4U和4V子块。WHT（与一些但不是所有预测模式一起）用于编码4x4阵列，该4x4阵列包括宏块的16个Y子块的平均强度。这些平均强度，直到一个恒定的归一化因子，只不过是Y子块的第0个DCT系数。该“更高级别”WHT是这些系数的显式规范的替代，其方式与子块的DCT替代包含子块的像素值的规范的方式完全相同。我们认为这个4x4数组是一个称为Y2的二阶子块，并认为宏块包含24个“真实”子块，有时也有第二十五个“虚拟”子块。这将在第13节中进一步讨论。"
    },
    {
      "indent": 3,
      "text": "The frame layout used by the reference decoder may be found in the file vpx_image.h (Section 20.23).",
      "zh-CHS": "参考解码器使用的帧布局可在文件vpx_image.h（第20.23节）中找到。"
    },
    {
      "indent": 0,
      "text": "3. Compressed Frame Types",
      "section_title": true,
      "zh-CHS": "3. 压缩帧类型"
    },
    {
      "indent": 3,
      "text": "There are only two types of frames in VP8.",
      "zh-CHS": "VP8中只有两种类型的帧。"
    },
    {
      "indent": 3,
      "text": "Intraframes (also called key frames and, in MPEG terminology, I-frames) are decoded without reference to any other frame in a sequence; that is, the decompressor reconstructs such frames beginning from its \"default\" state. Key frames provide random access (or seeking) points in a video stream.",
      "zh-CHS": "帧内帧（也称为关键帧，在MPEG术语中称为I帧）在不参考序列中的任何其他帧的情况下被解码；也就是说，解压器从其“默认”状态开始重构这样的帧。关键帧提供视频流中的随机访问（或搜索）点。"
    },
    {
      "indent": 3,
      "text": "Interframes (also called prediction frames and, in MPEG terminology, P-frames) are encoded with reference to prior frames, specifically all prior frames up to and including the most recent key frame. Generally speaking, the correct decoding of an interframe depends on the correct decoding of the most recent key frame and all ensuing frames. Consequently, the decoding algorithm is not tolerant of dropped frames: In an environment in which frames may be dropped or corrupted, correct decoding will not be possible until a key frame is correctly received.",
      "zh-CHS": "帧间（也称为预测帧，在MPEG术语中称为P帧）参照先前帧进行编码，具体地说，参照直到并包括最近关键帧的所有先前帧。一般来说，帧间的正确解码取决于最近的关键帧和所有后续帧的正确解码。因此，解码算法不能容忍丢弃的帧：在帧可能被丢弃或损坏的环境中，在正确接收到关键帧之前，不可能进行正确解码。"
    },
    {
      "indent": 3,
      "text": "In contrast to MPEG, there is no use of bidirectional prediction. No frame is predicted using frames temporally subsequent to it; there is no analog to an MPEG B-frame.",
      "zh-CHS": "与MPEG相比，不使用双向预测。没有帧是使用在其之后的帧来预测的；不存在与MPEG B帧的模拟。"
    },
    {
      "indent": 3,
      "text": "Secondly, VP8 augments these notions with that of alternate prediction frames, called golden frames and altref frames (alternative reference frames). Blocks in an interframe may be predicted using blocks in the immediately previous frame as well as the most recent golden frame or altref frame. Every key frame is automatically golden and altref, and any interframe may optionally replace the most recent golden or altref frame.",
      "zh-CHS": "第二，VP8用交替预测帧（称为golden帧和altref帧（交替参考帧））来增强这些概念。可以使用前一帧中的块以及最近的黄金帧或altref帧中的块来预测帧间中的块。每个关键帧自动为golden和altref，任何帧间帧都可以选择替换最近的golden或altref帧。"
    },
    {
      "indent": 3,
      "text": "Golden frames and altref frames may also be used to partially overcome the intolerance to dropped frames discussed above: If a compressor is configured to code golden frames only with reference to the prior golden frame (and key frame), then the \"substream\" of key and golden frames may be decoded regardless of loss of other interframes. Roughly speaking, the implementation requires (on the compressor side) that golden frames subsume and recode any context updates effected by the intervening interframes. A typical application of this approach is video conferencing, in which retransmission of a prior golden frame and/or a delay in playback until receipt of the next golden frame is preferable to a larger retransmit and/or delay until the next key frame.",
      "zh-CHS": "黄金帧和altref帧也可用于部分克服对上述丢弃帧的不容忍：如果压缩器被配置为仅参考先前的黄金帧（和关键帧）对黄金帧进行编码，则可以解码关键帧和黄金帧的“子流”，而不考虑其他帧间的丢失。粗略地说，实现要求（在压缩器端）黄金帧包含并重新编码由中间帧影响的任何上下文更新。该方法的典型应用是视频会议，其中，与更大的重发和/或直到下一关键帧的延迟相比，优选先前黄金帧的重发和/或直到接收到下一黄金帧的回放延迟。"
    },
    {
      "indent": 0,
      "text": "4. Overview of Compressed Data Format",
      "section_title": true,
      "zh-CHS": "4. 压缩数据格式概述"
    },
    {
      "indent": 3,
      "text": "The input to a VP8 decoder is a sequence of compressed frames whose order matches their order in time. Issues such as the duration of frames, the corresponding audio, and synchronization are generally provided by the playback environment and are irrelevant to the decoding process itself; however, to aid in fast seeking, a start code is included in the header of each key frame.",
      "zh-CHS": "VP8解码器的输入是一个压缩帧序列，其顺序与其时间顺序相匹配。帧的持续时间、相应的音频和同步等问题通常由回放环境提供，与解码过程本身无关；但是，为了帮助快速查找，每个关键帧的标头中都包含一个开始代码。"
    },
    {
      "indent": 3,
      "text": "The decoder is simply presented with a sequence of compressed frames and produces a sequence of decompressed (reconstructed) YUV frames corresponding to the input sequence. As stated in the Introduction, the exact pixel values in the reconstructed frame are part of VP8's specification. This document specifies the layout of the compressed frames and gives unambiguous algorithms for the correct production of reconstructed frames.",
      "zh-CHS": "解码器简单地呈现压缩帧序列，并产生与输入序列对应的解压缩（重构）YUV帧序列。如引言中所述，重建帧中的精确像素值是VP8规范的一部分。本文件规定了压缩帧的布局，并给出了正确生成重建帧的明确算法。"
    },
    {
      "indent": 3,
      "text": "The first frame presented to the decompressor is of course a key frame. This may be followed by any number of interframes; the correct reconstruction of each frame depends on all prior frames up to the key frame. The next key frame restarts this process: The decompressor resets to its default initial condition upon reception of a key frame, and the decoding of a key frame (and its ensuing interframes) is completely independent of any prior decoding.",
      "zh-CHS": "呈现给解压器的第一帧当然是关键帧。这之后可以是任意数量的帧；每个帧的正确重建取决于关键帧之前的所有帧。下一个关键帧重新启动该过程：解压器在接收到关键帧时重置为其默认初始条件，并且关键帧（及其随后的帧间）的解码完全独立于任何先前的解码。"
    },
    {
      "indent": 3,
      "text": "At the highest level, every compressed frame has three or more pieces. It begins with an uncompressed data chunk comprising 10 bytes in the case of key frames and 3 bytes for interframes. This is followed by two or more blocks of compressed data (called partitions). These compressed data partitions begin and end on byte boundaries.",
      "zh-CHS": "在最高级别，每个压缩帧都有三个或更多的片段。它从一个未压缩的数据块开始，对于关键帧，它包含10个字节，对于帧间帧，它包含3个字节。然后是两个或多个压缩数据块（称为分区）。这些压缩数据分区在字节边界上开始和结束。"
    },
    {
      "indent": 3,
      "text": "The first compressed partition has two subsections:",
      "zh-CHS": "第一个压缩分区有两个子部分："
    },
    {
      "indent": 3,
      "text": "1. Header information that applies to the frame as a whole.",
      "zh-CHS": "1. 应用于整个帧的标题信息。"
    },
    {
      "indent": 3,
      "text": "2. Per-macroblock information specifying how each macroblock is predicted from the already-reconstructed data that is available to the decompressor.",
      "zh-CHS": "2. 每个宏块信息，指定如何从解压缩器可用的已重构数据预测每个宏块。"
    },
    {
      "indent": 3,
      "text": "As stated above, the macroblock-level information occurs in raster-scan order.",
      "zh-CHS": "如上所述，宏块级信息以光栅扫描顺序出现。"
    },
    {
      "indent": 3,
      "text": "The rest of the partitions contain, for each block, the DCT/WHT coefficients (quantized and logically compressed) of the residue signal to be added to the predicted block values. It typically accounts for roughly 70% of the overall datarate. VP8 supports packing the compressed DCT/WHT coefficients' data from macroblock",
      "zh-CHS": "对于每个块，其余分区包含要添加到预测块值的剩余信号的DCT/WHT系数（量化和逻辑压缩）。它通常约占总数据速率的70%。VP8支持从宏块打包压缩的DCT/WHT系数数据"
    },
    {
      "indent": 3,
      "text": "rows into separate partitions. If there is more than one partition for these coefficients, the sizes of the partitions -- except the last partition -- in bytes are also present in the bitstream right after the above first partition. Each of the sizes is a 3-byte data item written in little endian format. These sizes provide the decoder direct access to all DCT/WHT coefficient partitions, which enables parallel processing of the coefficients in a decoder.",
      "zh-CHS": "将行划分为单独的分区。如果这些系数有多个分区，则分区的大小（最后一个分区除外）以字节为单位也会出现在上述第一个分区之后的比特流中。每个大小都是一个以little endian格式编写的3字节数据项。这些大小为解码器提供了对所有DCT/WHT系数分区的直接访问，从而实现了解码器中系数的并行处理。"
    },
    {
      "indent": 3,
      "text": "The separate partitioning of the prediction data and coefficient data also allows flexibility in the implementation of a decompressor: An implementation may decode and store the prediction information for the whole frame and then decode, transform, and add the residue signal to the entire frame, or it may simultaneously decode both partitions, calculating prediction information and adding in the residue signal for each block in order. The length field in the frame tag, which allows decoding of the second partition to begin before the first partition has been completely decoded, is necessary for the second \"block-at-a-time\" decoder implementation.",
      "zh-CHS": "预测数据和系数数据的单独分区还允许在解压器的实现中具有灵活性：实现可以解码和存储整个帧的预测信息，然后解码、变换并将剩余信号添加到整个帧，或者可以同时解码两个分区，计算预测信息并按顺序加入每个块的剩余信号。帧标签中的长度字段允许在第一分区被完全解码之前开始第二分区的解码，对于第二“一次分块”解码器实现是必需的。"
    },
    {
      "indent": 3,
      "text": "All partitions are decoded using separate instances of the boolean entropy decoder described in Section 7. Although some of the data represented within the partitions is conceptually \"flat\" (a bit is just a bit with no probabilistic expectation one way or the other), because of the way such coders work, there is never a direct correspondence between a \"conceptual bit\" and an actual physical bit in the compressed data partitions. Only in the 3- or 10-byte uncompressed chunk described above is there such a physical correspondence.",
      "zh-CHS": "使用第7节中描述的布尔熵解码器的单独实例对所有分区进行解码。尽管分区中表示的一些数据在概念上是“平坦的”（一个位只是一个没有概率期望的位），但由于这种编码器的工作方式，“概念位”和压缩数据分区中的实际物理位之间从来没有直接对应关系。只有在上面描述的3字节或10字节未压缩块中才存在这样的物理对应。"
    },
    {
      "indent": 3,
      "text": "A related matter is that seeking within a partition is not supported. The data must be decompressed and processed (or at least stored) in the order in which it occurs in the partition.",
      "zh-CHS": "一个相关的问题是不支持在分区内进行查找。数据必须按照其在分区中出现的顺序进行解压缩和处理（或至少存储）。"
    },
    {
      "indent": 3,
      "text": "While this document specifies the ordering of the partition data correctly, the details and semantics of this data are discussed in a more logical fashion to facilitate comprehension. For example, the frame header contains updates to many probability tables used in decoding per-macroblock data. The per-macroblock data is often described before the layouts of the probabilities and their updates, even though this is the opposite of their order in the bitstream.",
      "zh-CHS": "虽然本文档正确地指定了分区数据的顺序，但以更符合逻辑的方式讨论了该数据的细节和语义，以便于理解。例如，帧报头包含对解码每个宏块数据时使用的许多概率表的更新。每宏块数据通常在概率及其更新的布局之前描述，即使这与它们在比特流中的顺序相反。"
    },
    {
      "indent": 0,
      "text": "5. Overview of the Decoding Process",
      "section_title": true,
      "zh-CHS": "5. 解码过程概述"
    },
    {
      "indent": 3,
      "text": "A VP8 decoder needs to maintain four YUV frame buffers whose resolutions are at least equal to that of the encoded image. These buffers hold the current frame being reconstructed, the immediately previous reconstructed frame, the most recent golden frame, and the most recent altref frame.",
      "zh-CHS": "VP8解码器需要保持四个YUV帧缓冲区，其分辨率至少等于编码图像的分辨率。这些缓冲区保存正在重建的当前帧、上一个重建帧、最近的黄金帧和最近的altref帧。"
    },
    {
      "indent": 3,
      "text": "Most implementations will wish to \"pad\" these buffers with \"invisible\" pixels that extend a moderate number of pixels beyond all four edges of the visible image. This simplifies interframe prediction by allowing all (or most) prediction blocks -- which are not guaranteed to lie within the visible area of a prior frame -- to address usable image data.",
      "zh-CHS": "大多数实现都希望用“不可见”像素“填充”这些缓冲区，这些像素将适度数量的像素扩展到可见图像的所有四个边缘之外。这通过允许所有（或大部分）预测块（不保证位于前一帧的可见区域内）寻址可用图像数据来简化帧间预测。"
    },
    {
      "indent": 3,
      "text": "Regardless of the amount of padding chosen, the invisible rows above (or below) the image are filled with copies of the top (or bottom) row of the image; the invisible columns to the left (or right) of the image are filled with copies of the leftmost (or rightmost) visible row; and the four invisible corners are filled with copies of the corresponding visible corner pixels. The use of these prediction buffers (and suggested sizes for the halo) will be elaborated on in the discussion of motion vectors, interframe prediction, and sub-pixel interpolation later in this document.",
      "zh-CHS": "无论选择了多少填充，图像上方（或下方）的不可见行都会填充图像顶部（或底部）行的副本；图像左侧（或右侧）的不可见列由最左侧（或最右侧）可见行的副本填充；四个不可见角被相应可见角像素的副本填充。这些预测缓冲区（以及光晕的建议大小）的使用将在本文后面的运动矢量、帧间预测和亚像素插值讨论中详细说明。"
    },
    {
      "indent": 3,
      "text": "As will be seen in the description of the frame header, the image dimensions are specified (and can change) with every key frame. These buffers (and any other data structures whose size depends on the size of the image) should be allocated (or re-allocated) immediately after the dimensions are decoded.",
      "zh-CHS": "从帧标题的描述中可以看出，图像尺寸随每个关键帧而指定（并且可以更改）。这些缓冲区（以及大小取决于图像大小的任何其他数据结构）应在尺寸解码后立即分配（或重新分配）。"
    },
    {
      "indent": 3,
      "text": "Leaving most of the details for later elaboration, the following is an outline of the decoding process.",
      "zh-CHS": "下面是解码过程的概要，将大部分细节留给以后的详细阐述。"
    },
    {
      "indent": 3,
      "text": "First, the frame header (the beginning of the first data partition) is decoded. Altering or augmenting the maintained state of the decoder, this provides the context in which the per-macroblock data can be interpreted.",
      "zh-CHS": "首先，对帧头（第一数据分区的开始）进行解码。改变或增加解码器的保持状态，这提供了可以解释每宏块数据的上下文。"
    },
    {
      "indent": 3,
      "text": "The macroblock data occurs (and must be processed) in raster-scan order. This data comes in two or more parts. The first (prediction or mode) part comes in the remainder of the first data partition. The other parts comprise the data partition(s) for the DCT/WHT coefficients of the residue signal. For each macroblock, the prediction data must be processed before the residue.",
      "zh-CHS": "宏块数据以光栅扫描顺序出现（并且必须进行处理）。这些数据分为两部分或更多部分。第一部分（预测或模式）位于第一个数据分区的剩余部分。其他部分包括剩余信号的DCT/WHT系数的数据分区。对于每个宏块，预测数据必须在剩余之前进行处理。"
    },
    {
      "indent": 3,
      "text": "Each macroblock is predicted using one (and only one) of four possible frames. All macroblocks in a key frame, and all intra-coded macroblocks in an interframe, are predicted using the already-decoded macroblocks in the current frame. Macroblocks in an interframe may also be predicted using the previous frame, the golden frame, or the altref frame. Such macroblocks are said to be inter-coded.",
      "zh-CHS": "使用四个可能帧中的一个（且仅一个）预测每个宏块。使用当前帧中已解码的宏块预测关键帧中的所有宏块以及帧间中的所有帧内编码宏块。帧间宏块也可以使用前一帧、黄金帧或altref帧来预测。这种宏块被称为是帧间编码的。"
    },
    {
      "indent": 3,
      "text": "The purpose of prediction is to use already-constructed image data to approximate the portion of the original image being reconstructed. The effect of any of the prediction modes is then to write a macroblock-sized prediction buffer containing this approximation.",
      "zh-CHS": "预测的目的是使用已经构造的图像数据来近似原始图像的被重建部分。然后，任何预测模式的效果都是写入包含该近似值的宏块大小的预测缓冲区。"
    },
    {
      "indent": 3,
      "text": "Regardless of the prediction method, the residue DCT signal is decoded, dequantized, reverse-transformed, and added to the prediction buffer to produce the (almost final) reconstruction value of the macroblock, which is stored in the correct position of the current frame buffer.",
      "zh-CHS": "无论采用何种预测方法，残余DCT信号都将被解码、去量化、反向变换并添加到预测缓冲器中，以产生宏块的（几乎最终）重建值，该重建值存储在当前帧缓冲器的正确位置。"
    },
    {
      "indent": 3,
      "text": "The residue signal consists of 24 (sixteen Y, four U, and four V) 4x4 quantized and losslessly compressed DCT transforms approximating the difference between the original macroblock in the uncompressed source and the prediction buffer. For most prediction modes, the 0th coefficients of the sixteen Y subblocks are expressed via a 25th WHT of the second-order virtual Y2 subblock discussed above.",
      "zh-CHS": "残余信号由24（16个Y、4个U和4个V）4x4量化和无损压缩DCT变换组成，近似于未压缩源和预测缓冲器中原始宏块之间的差值。对于大多数预测模式，十六个Y子块的第0个系数通过上面讨论的二阶虚拟Y2子块的第25个WHT表示。"
    },
    {
      "indent": 3,
      "text": "Intra-prediction exploits the spatial coherence of frames. The 16x16 luma (Y) and 8x8 chroma (UV) components are predicted independently of each other using one of four simple means of pixel propagation, starting from the already-reconstructed (16-pixel-long luma, 8-pixel-long chroma) row above, and column to the left of, the current macroblock. The four methods are:",
      "zh-CHS": "帧内预测利用帧的空间相干性。16x16亮度（Y）和8x8色度（UV）分量通过四种简单的像素传播方式中的一种相互独立地进行预测，从当前宏块上方已重建的（16像素长亮度，8像素长色度）行和左侧的列开始。这四种方法是："
    },
    {
      "indent": 3,
      "text": "1. Copying the row from above throughout the prediction buffer.",
      "zh-CHS": "1. 在整个预测缓冲区中从上面复制行。"
    },
    {
      "indent": 3,
      "text": "2. Copying the column from the left throughout the prediction buffer.",
      "zh-CHS": "2. 在整个预测缓冲区中从左侧复制列。"
    },
    {
      "indent": 3,
      "text": "3. Copying the average value of the row and column throughout the prediction buffer.",
      "zh-CHS": "3. 在整个预测缓冲区中复制行和列的平均值。"
    },
    {
      "indent": 3,
      "text": "4. Extrapolation from the row and column using the (fixed) second difference (horizontal and vertical) from the upper left corner.",
      "zh-CHS": "4. 使用左上角的（固定）第二个差（水平和垂直）从行和列进行外推。"
    },
    {
      "indent": 3,
      "text": "Additionally, the sixteen Y subblocks may be predicted independently of each other using one of ten different modes, four of which are 4x4 analogs of those described above, augmented with six \"diagonal\" prediction methods. There are two types of predictions, one intra and one prediction (among all the modes), for which the residue signal does not use the Y2 block to encode the DC portion of the sixteen 4x4 Y subblock DCTs. This \"independent Y subblock\" mode has no effect on the 8x8 chroma prediction.",
      "zh-CHS": "此外，可以使用十种不同模式中的一种彼此独立地预测十六个Y子块，其中四种是用六种“对角”预测方法增强的上述模式的4x4类似物。存在两种类型的预测，一种是帧内预测，另一种是预测（在所有模式中），对于这两种预测，剩余信号不使用Y2块来编码16个4x4y子块dct的DC部分。此“独立Y子块”模式对8x8色度预测没有影响。"
    },
    {
      "indent": 3,
      "text": "Inter-prediction exploits the temporal coherence between nearby frames. Except for the choice of the prediction frame itself, there is no difference between inter-prediction based on the previous frame and that based on the golden frame or altref frame.",
      "zh-CHS": "帧间预测利用相邻帧之间的时间相关性。除了选择预测帧本身之外，基于前一帧的帧间预测与基于黄金帧或altref帧的帧间预测之间没有区别。"
    },
    {
      "indent": 3,
      "text": "Inter-prediction is conceptually very simple. While, for reasons of efficiency, there are several methods of encoding the relationship between the current macroblock and corresponding sections of the prediction frame, ultimately each of the sixteen Y subblocks is related to a 4x4 subblock of the prediction frame, whose position in that frame differs from the current subblock position by a (usually small) displacement. These two-dimensional displacements are called motion vectors.",
      "zh-CHS": "帧间预测在概念上非常简单。然而，出于效率的原因，存在几种编码当前宏块和预测帧的对应部分之间的关系的方法，最终十六个Y子块中的每一个与预测帧的4x4子块相关，其在该帧中的位置与当前子块位置相差一倍（通常很小）位移。这些二维位移称为运动矢量。"
    },
    {
      "indent": 3,
      "text": "The motion vectors used by VP8 have quarter-pixel precision. Prediction of a subblock using a motion vector that happens to have integer (whole number) components is very easy: The 4x4 block of pixels from the displaced block in the previous, golden, or altref frame is simply copied into the correct position of the current macroblock's prediction buffer.",
      "zh-CHS": "VP8使用的运动矢量具有四分之一像素精度。使用恰好具有整数（整数）分量的运动向量预测子块非常容易：将前一帧、golden帧或altref帧中位移块的4x4像素块复制到当前宏块预测缓冲区的正确位置。"
    },
    {
      "indent": 3,
      "text": "Fractional displacements are conceptually and implementationally more complex. They require the inference (or synthesis) of sample values that, strictly speaking, do not exist. This is one of the most basic problems in signal processing, and readers conversant with that subject will see that the approach taken by VP8 provides a good balance of robustness, accuracy, and efficiency.",
      "zh-CHS": "分数位移在概念上和实施上更为复杂。它们需要推断（或合成）严格来说不存在的样本值。这是信号处理中最基本的问题之一，熟悉该主题的读者将看到VP8所采用的方法在稳健性、准确性和效率之间提供了良好的平衡。"
    },
    {
      "indent": 3,
      "text": "Leaving the details for the implementation discussion below, the pixel interpolation is calculated by applying a kernel filter (using reasonable-precision integer math) three pixels on either side, both horizontally and vertically, of the pixel to be synthesized. The resulting 4x4 block of synthetic pixels is then copied into position exactly as in the case of integer displacements.",
      "zh-CHS": "将细节留给下面的实现讨论，通过在要合成的像素的任意一侧（水平和垂直）应用内核滤波器（使用合理精度的整数数学）三个像素来计算像素插值。然后，生成的4x4合成像素块被复制到与整数位移完全相同的位置。"
    },
    {
      "indent": 3,
      "text": "Each of the eight chroma subblocks is handled similarly. Their motion vectors are never specified explicitly; instead, the motion vector for each chroma subblock is calculated by averaging the vectors of the four Y subblocks that occupy the same area of the frame. Since chroma pixels have twice the diameter (and four times the area) of luma pixels, the calculated chroma motion vectors have 1/8-pixel resolution, but the procedure for copying or generating pixels for each subblock is essentially identical to that done in the luma plane.",
      "zh-CHS": "八个色度子块中的每一个都以类似方式处理。它们的运动矢量从未明确指定；相反，通过平均占据帧的相同区域的四个Y子块的向量来计算每个色度子块的运动向量。由于色度像素的直径是亮度像素的两倍（面积的四倍），因此计算出的色度运动矢量具有1/8像素的分辨率，但用于复制或生成每个子块的像素的过程基本上与在亮度平面中完成的过程相同。"
    },
    {
      "indent": 3,
      "text": "After all the macroblocks have been generated (predicted and corrected with the DCT/WHT residue), a filtering step (the loop filter) is applied to the entire frame. The purpose of the loop filter is to reduce blocking artifacts at the boundaries between macroblocks and between subblocks of the macroblocks. The term \"loop filter\" is used because this filter is part of the \"coding loop\"; that is, it affects the reconstructed frame buffers that are used to predict ensuing frames. This is distinguished from the postprocessing filters discussed earlier, which affect only the viewed video and do not \"feed into\" subsequent frames.",
      "zh-CHS": "在生成所有宏块（使用DCT/WHT残差预测和校正）之后，对整个帧应用滤波步骤（循环滤波器）。循环滤波器的目的是减少宏块之间和宏块的子块之间的边界处的块伪影。使用术语“环路滤波器”是因为该滤波器是“编码环路”的一部分；也就是说，它影响用于预测后续帧的重构帧缓冲区。这与前面讨论的后处理过滤器不同，后者只影响观看的视频，不会“馈送”到后续帧。"
    },
    {
      "indent": 3,
      "text": "Next, if signaled in the data, the current frame may replace the golden frame prediction buffer and/or the altref frame buffer.",
      "zh-CHS": "接下来，如果在数据中发信号，则当前帧可以替换黄金帧预测缓冲器和/或altref帧缓冲器。"
    },
    {
      "indent": 3,
      "text": "The halos of the frame buffers are next filled as specified above. Finally, at least as far as decoding is concerned, the (references to) the \"current\" and \"last\" frame buffers should be exchanged in preparation for the next frame.",
      "zh-CHS": "帧缓冲区的光晕将按上述规定填充。最后，至少就解码而言，（对）“当前”和“最后”帧缓冲器的引用）应交换以准备下一帧。"
    },
    {
      "indent": 3,
      "text": "Various processes may be required (or desired) before viewing the generated frame. As discussed in the frame dimension information below, truncation and/or upscaling of the frame may be required. Some playback systems may require a different frame format (RGB, YUY2, etc.). Finally, as mentioned in the Introduction, further postprocessing or filtering of the image prior to viewing may be desired. Since the primary purpose of this document is a decoding specification, the postprocessing is not specified in this document.",
      "zh-CHS": "在查看生成的帧之前，可能需要（或期望）各种过程。如下文框架尺寸信息中所述，可能需要对框架进行截断和/或放大。某些播放系统可能需要不同的帧格式（RGB、YUY2等）。最后，如引言中所述，可能需要在观看之前对图像进行进一步的后处理或滤波。由于本文件的主要目的是解码规范，因此本文件未规定后处理。"
    },
    {
      "indent": 3,
      "text": "While the basic ideas of prediction and correction used by VP8 are straightforward, many of the details are quite complex. The management of probabilities is particularly elaborate. Not only do the various modes of intra-prediction and motion vector specification have associated probabilities, but they, together with the coding of DCT coefficients and motion vectors, often base these probabilities on a variety of contextual information (calculated from what has been decoded so far), as well as on explicit modification via the frame header.",
      "zh-CHS": "虽然VP8使用的预测和校正的基本思想很简单，但许多细节相当复杂。概率的管理尤其复杂。帧内预测和运动向量规范的各种模式不仅具有相关的概率，而且它们与DCT系数和运动向量的编码一起，通常将这些概率基于各种上下文信息（根据迄今为止解码的内容计算），以及通过帧头进行显式修改。"
    },
    {
      "indent": 3,
      "text": "The \"top-level\" of decoding and frame reconstruction is implemented in the reference decoder file dixie.c (Section 20.4).",
      "zh-CHS": "解码和帧重建的“顶层”在参考解码器文件dixie.c（第20.4节）中实现。"
    },
    {
      "indent": 3,
      "text": "This concludes our summary of decoding and reconstruction; we continue by discussing the individual aspects in more depth.",
      "zh-CHS": "这是我们对解码和重构的总结；我们继续更深入地讨论各个方面。"
    },
    {
      "indent": 3,
      "text": "A reasonable \"divide and conquer\" approach to implementation of a decoder is to begin by decoding streams composed exclusively of key frames. After that works reliably, interframe handling can be added more easily than if complete functionality were attempted",
      "zh-CHS": "实现解码器的一种合理的“分而治之”方法是首先对仅由关键帧组成的流进行解码。在这项工作可靠之后，与尝试完整功能相比，可以更轻松地添加帧间处理"
    },
    {
      "indent": 3,
      "text": "immediately. In accordance with this, we first discuss components needed to decode key frames (most of which are also used in the decoding of interframes) and conclude with topics exclusive to interframes.",
      "zh-CHS": "立即根据这一点，我们首先讨论解码关键帧所需的组件（其中大部分也用于帧间解码），并以帧间专有的主题结束。"
    },
    {
      "indent": 0,
      "text": "6. Description of Algorithms",
      "section_title": true,
      "zh-CHS": "6. 算法描述"
    },
    {
      "indent": 3,
      "text": "As the intent of this document, together with the reference decoder source code, is to specify a platform-independent procedure for the decoding and reconstruction of a VP8 video stream, many (small) algorithms must be described exactly.",
      "zh-CHS": "由于本文件以及参考解码器源代码的目的是为VP8视频流的解码和重建指定独立于平台的过程，因此必须准确描述许多（小型）算法。"
    },
    {
      "indent": 3,
      "text": "Due to its near-universality, terseness, ability to easily describe calculation at specific precisions, and the fact that On2's reference VP8 decoder is written in C, these algorithm fragments are written using the C programming language, augmented with a few simple definitions below.",
      "zh-CHS": "由于其接近通用性、简洁性、能够在特定精度下轻松描述计算，以及On2的参考VP8解码器是用C编写的事实，这些算法片段使用C编程语言编写，并在下面添加了一些简单的定义。"
    },
    {
      "indent": 3,
      "text": "The standard (and best) reference for C is [Kernighan].",
      "zh-CHS": "C的标准（也是最好的）参考是[Kernighan]。"
    },
    {
      "indent": 3,
      "text": "Many code fragments will be presented in this document. Some will be nearly identical to corresponding sections of the reference decoder; others will differ. Roughly speaking, there are three reasons for such differences:",
      "zh-CHS": "本文将介绍许多代码片段。有些将与参考解码器的相应部分几乎相同；其他人则会有所不同。大致来说，造成这种差异的原因有三个："
    },
    {
      "indent": 3,
      "text": "1. For reasons of efficiency, the reference decoder version may be less obvious.",
      "zh-CHS": "1. 出于效率原因，参考解码器版本可能不太明显。"
    },
    {
      "indent": 3,
      "text": "2. The reference decoder often uses large data structures to maintain context that need not be described or used here.",
      "zh-CHS": "2. 参考解码器通常使用大型数据结构来维护此处不需要描述或使用的上下文。"
    },
    {
      "indent": 3,
      "text": "3. The authors of this document felt that a different expression of the same algorithm might facilitate exposition.",
      "zh-CHS": "3. 本文作者认为，同一算法的不同表达式可能有助于阐述。"
    },
    {
      "indent": 3,
      "text": "Regardless of the chosen presentation, the calculation effected by any of the algorithms described here is identical to that effected by the corresponding portion of the reference decoder.",
      "zh-CHS": "不管所选择的呈现方式如何，由本文描述的任何算法影响的计算与由参考解码器的相应部分影响的计算相同。"
    },
    {
      "indent": 3,
      "text": "All VP8 decoding algorithms use integer math. To facilitate specification of arithmetic precision, we define the following types.",
      "zh-CHS": "所有VP8解码算法都使用整数数学。为了便于指定算术精度，我们定义了以下类型。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef   signed char  int8; /* signed int exactly 8 bits wide */\ntypedef unsigned char uint8; /* unsigned \"\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef short int16;         /* signed int exactly 16 bits wide */\ntypedef unsigned int16 uint16; /* unsigned \"\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* int32 is a signed integer type at least 32 bits wide */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef long int32; /* guaranteed to work on all systems */\ntypedef int  int32; /* will be more efficient on some systems */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef unsigned int32 uint32;",
      "zh-CHS": "typedef无符号int32 uint32；"
    },
    {
      "indent": 3,
      "text": "/* unsigned integer type, at least 16 bits wide, whose exact size\n   is most convenient to whatever processor we are using */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef unsigned int uint;",
      "zh-CHS": "typedef无符号整数单元；"
    },
    {
      "indent": 3,
      "text": "/* While pixels themselves are 8-bit unsigned integers,\n   pixel arithmetic often occurs at 16- or 32-bit precision and\n   the results need to be \"saturated\" or clamped to an 8-bit\n   range. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef uint8 Pixel;",
      "zh-CHS": "typedef uint8像素；"
    },
    {
      "indent": 3,
      "text": "Pixel clamp255(int32 v) { return v < 0? 0 : (v < 255? v : 255);}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*  As is elaborated in the discussion of the bool_decoder below,\n    VP8 represents probabilities as unsigned 8-bit numbers. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef uint8 Prob;",
      "zh-CHS": "typedef uint8 Prob；"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "We occasionally need to discuss mathematical functions involving honest-to-goodness \"infinite precision\" real numbers. The DCT is first described via the cosine function cos; the ratio of the lengths of the circumference and diameter of a circle is denoted pi; at one point, we take a (base 1/2) logarithm, denoted log; and pow(x, y) denotes x raised to the power y. If x = 2 and y is a small non-negative integer, pow(2, y) may be expressed in C as 1 << y.",
      "zh-CHS": "我们偶尔需要讨论涉及诚实到善良的“无限精度”实数的数学函数。首先通过余弦函数cos描述DCT；圆周长度与圆直径之比表示为pi；在某一点上，我们取（以1/2为底）对数，表示为log；pow（x，y）表示x升到y的幂。如果x=2且y是一个小的非负整数，则pow（2，y）可以用C表示为1<<y。"
    },
    {
      "indent": 3,
      "text": "Finally, we sometimes need to divide signed integers by powers of two; that is, we occasionally right-shift signed numbers. The behavior of such shifts (i.e., the propagation of the sign bit) is, perhaps surprisingly, not defined by the C language itself and is left up to individual compilers. Because of the utility of this frequently needed operation, it is at least arguable that it should be defined by the language (to naturally propagate the sign bit) and, at a minimum, should be correctly implemented by any reasonable compiler. In the interest of strict portability, we attempt to call attention to these shifts when they arise.",
      "zh-CHS": "最后，我们有时需要将有符号整数除以二的幂；也就是说，我们偶尔会右移有符号的数字。这种移位的行为（即符号位的传播）可能令人惊讶地不是由C语言本身定义的，而是由单个编译器决定的。由于这种经常需要的操作的实用性，它至少应该由语言定义（自然传播符号位），并且至少应该由任何合理的编译器正确实现。为了严格的可移植性，我们试图在出现这些变化时提请注意。"
    },
    {
      "indent": 0,
      "text": "7. Boolean Entropy Decoder",
      "section_title": true,
      "zh-CHS": "7. 布尔熵译码器"
    },
    {
      "indent": 3,
      "text": "As discussed in the overview above, essentially the entire VP8 data stream is encoded using a boolean entropy coder.",
      "zh-CHS": "正如上面概述中所讨论的，整个VP8数据流基本上是使用布尔熵编码器编码的。"
    },
    {
      "indent": 3,
      "text": "An understanding of the bool_decoder is critical to the implementation of a VP8 decompressor, so we discuss the bool_decoder in detail. It is easier to comprehend the bool_decoder in conjunction with the bool_encoder used by the compressor to write the compressed data partitions.",
      "zh-CHS": "了解bool_解码器对于VP8解压器的实现至关重要，因此我们将详细讨论bool_解码器。更容易理解bool_解码器与压缩机用来写入压缩数据分区的bool_编码器。"
    },
    {
      "indent": 3,
      "text": "The bool_encoder encodes (and the bool_decoder decodes) one bool (zero-or-one boolean value) at a time. Its purpose is to losslessly compress a sequence of bools for which the probability of their being zero or one can be well-estimated (via constant or previously coded information) at the time they are written, using identical corresponding probabilities at the time they are read.",
      "zh-CHS": "bool_编码器一次编码（bool_解码器解码）一个bool（零或一个布尔值）。其目的是无损压缩bool序列，在写入bool时，使用读取bool时相同的相应概率（通过常量或先前编码的信息），可以很好地估计bool序列为零或一的概率。"
    },
    {
      "indent": 3,
      "text": "As the reader is probably aware, if a bool is much more likely to be zero than one (for instance), it can, on average, be faithfully encoded using much less than one bit per value. The bool_encoder exploits this.",
      "zh-CHS": "读者可能知道，如果bool很可能是零而不是一（例如），那么平均而言，它可以使用每个值不到一位的数据进行忠实的编码。布尔鲁编码器利用了这一点。"
    },
    {
      "indent": 3,
      "text": "In the 1940s, [Shannon] proved that there is a lower bound for the average datarate of a faithful encoding of a sequence of bools (whose probability distributions are known and are independent of each other) and also that there are encoding algorithms that approximate this lower bound as closely as one wishes.",
      "zh-CHS": "在20世纪40年代，[Shannon]证明了布尔序列（其概率分布已知且相互独立）的忠实编码的平均数据率有一个下界，并且有一些编码算法可以尽可能接近这个下界。"
    },
    {
      "indent": 3,
      "text": "If we encode a sequence of bools whose probability of being zero is p (and whose probability of being 1 is 1-p), the lowest possible datarate per value is",
      "zh-CHS": "如果我们对概率为零的布尔序列进行编码（概率为1的布尔序列为1-p），则每个值的最低可能数据速率为"
    },
    {
      "indent": 3,
      "text": "plog(p) + (1-p)log(1-p);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "taking the logarithms to the base 1/2 expresses the datarate in bits/ value.",
      "zh-CHS": "将对数以1/2为基数表示数据速率，单位为位/值。"
    },
    {
      "indent": 3,
      "text": "We give two simple examples. At one extreme, if p = 1/2, then log(p) = log(1-p) = 1, and the lowest possible datarate per bool is 1/2 + 1/2 = 1; that is, we cannot do any better than simply literally writing out bits. At another extreme, if p is very small, say p = 1/1024, then log(p)=10, log(1-p) is roughly .0014, and the lowest possible datarate is approximately 10/1024 + .0014, roughly 1/100 of a bit per bool.",
      "zh-CHS": "我们给出两个简单的例子。在一个极端，如果p=1/2，那么log（p）=log（1-p）=1，每个bool的最低可能数据速率为1/2+1/2=1；也就是说，我们不能做得比简单地写出比特更好。在另一个极端，如果p非常小，比如p=1/1024，那么log（p）=10，log（1-p）大约为.0014，最低可能的数据速率大约为10/1024+.0014，大约为每bool 1/100位。"
    },
    {
      "indent": 3,
      "text": "Because most of the bools in the VP8 datastream have zero-probabilities nowhere near 1/2, the compression provided by the bool_encoder is critical to the performance of VP8.",
      "zh-CHS": "由于VP8数据流中的大多数布尔值的概率为零，不接近1/2，因此布尔_编码器提供的压缩对VP8的性能至关重要。"
    },
    {
      "indent": 3,
      "text": "The boolean coder used by VP8 is a variant of an arithmetic coder. An excellent discussion of arithmetic coding (and other lossless compression techniques) can be found in [Bell].",
      "zh-CHS": "VP8使用的布尔编码器是算术编码器的变体。在[Bell]中可以找到关于算术编码（和其他无损压缩技术）的精彩讨论。"
    },
    {
      "indent": 0,
      "text": "7.1. Underlying Theory of Coding",
      "section_title": true,
      "zh-CHS": "7.1. 编码的基本理论"
    },
    {
      "indent": 3,
      "text": "The basic idea used by the boolean coder is to consider the entire data stream (either of the partitions in our case) as the binary expansion of a single number x with 0 <= x < 1. The bits (or bytes) in x are of course written from high to low order, and if b[j] (B[j]) is the j^(th) bit (byte) in the partition, the value x is simply the sum (starting with j = 1) of pow(2, -j) * b[j] or pow(256, -j) * B[j].",
      "zh-CHS": "布尔编码器使用的基本思想是将整个数据流（我们的分区中的任一个）考虑为单个数字x的二进制扩展，具有0 <= x＜1。x中的位（或字节）当然是从高到低的顺序写入的，如果b[j]（b[j]）是分区中的第j^（th）位（字节），那么值x只是pow（2，-j）*b[j]或pow（256，-j）*b[j]的和（从j=1开始）。"
    },
    {
      "indent": 3,
      "text": "Before the first bool is coded, all values of x are possible.",
      "zh-CHS": "在编码第一个布尔之前，x的所有值都是可能的。"
    },
    {
      "indent": 3,
      "text": "The coding of each bool restricts the possible values of x in proportion to the probability of what is coded. If p1 is the probability of the first bool being zero and a zero is coded, the range of possible values of x is restricted to 0 <= x < p1. If a one is coded, the range becomes p1 <= x < 1.",
      "zh-CHS": "每个布尔的编码限制x的可能值，该值与编码的概率成比例。如果p1是第一个bool为零的概率，并且编码了零，则x的可能值范围限制为0<=x<p1。如果对1进行编码，则范围变为p1<=x<1。"
    },
    {
      "indent": 3,
      "text": "The coding continues by repeating the same idea. At every stage, there is an interval a <= x < b of possible values of x. If p is the probability of a zero being coded at this stage and a zero is coded, the interval becomes a <= x < a + (p(b-a)). If a one is coded, the possible values of x are restricted to a + (p(b-a)) <= x < b.",
      "zh-CHS": "编码继续重复相同的想法。在每个阶段，都有一个区间a<=x<b的x的可能值。如果p是在该阶段对零进行编码的概率，并且对零进行了编码，则区间变为a<=x<a+（p（b-a））。如果对一进行编码，则x的可能值限制为a+（p（b-a））<=x<b。"
    },
    {
      "indent": 3,
      "text": "Assuming that only finitely many values are to be coded, after the encoder has received the last bool, it can write as its output any value x that lies in the final interval. VP8 simply writes the left endpoint of the final interval. Consequently, the output it would make if encoding were to stop at any time either increases or stays the same as each bool is encoded.",
      "zh-CHS": "假设只对有限多个值进行编码，在编码器接收到最后一个bool后，它可以将最终间隔中的任何值x写入其输出。VP8只写最后一个间隔的左端点。因此，如果编码在任何时候停止，它将产生的输出会随着每个bool的编码而增加或保持不变。"
    },
    {
      "indent": 3,
      "text": "Decoding parallels encoding. The decoder is presented with the number x, which has only the initial restriction 0 <= x < 1. To decode the first bool, the decoder is given the first probability p1. If x < p1, a zero is decoded; if x >= p1, a one is decoded. In either case, the new restriction on x -- that is, the interval of possible values of x -- is remembered.",
      "zh-CHS": "解码与编码并行。解码器以数字x呈现，其仅具有初始限制0<=x<1。为了解码第一bool，解码器被赋予第一概率p1。如果x<p1，则解码零；如果x>=p1，则解码一个。在任何一种情况下，都会记住对x的新限制，即x的可能值的间隔。"
    },
    {
      "indent": 3,
      "text": "Decoding continues in exactly the same way: If a <= x < b is the current interval and we are to decode a bool with zero-probability p, we return a zero if a <= x < a + (p(b-a)) and a one if a + (p(b-a)) <= x < b. In either case, the new restriction is remembered in preparation for decoding the next bool.",
      "zh-CHS": "解码以完全相同的方式继续：如果a<=x<b是当前间隔，并且我们要以零概率p解码bool，那么如果a<=x<a+（p（b-a）），我们将返回零，如果a+（p（b-a））<=x<b，则返回一。在任何一种情况下，新的限制都会被记住，以准备解码下一个bool。"
    },
    {
      "indent": 3,
      "text": "The process outlined above uses real numbers of infinite precision to express the probabilities and ranges. It is true that, if one could actualize this process and coded a large number of bools whose supplied probabilities matched their value distributions, the datarate achieved would approach the theoretical minimum as the number of bools encoded increased.",
      "zh-CHS": "上述过程使用无限精度的实数来表示概率和范围。的确，如果一个人能够实现这一过程并编码大量布尔值，其提供的概率与其值分布相匹配，那么随着编码布尔值数量的增加，所获得的数据速率将接近理论最小值。"
    },
    {
      "indent": 3,
      "text": "Unfortunately, computers operate at finite precision, and an approximation to the theoretically perfect process described above is necessary. Such approximation increases the datarate but, at quite moderate precision and for a wide variety of data sets, this increase is negligible.",
      "zh-CHS": "不幸的是，计算机在有限的精度下运行，必须近似于上述理论上完美的过程。这种近似增加了数据速率，但在相当中等的精度下，对于各种各样的数据集，这种增加可以忽略不计。"
    },
    {
      "indent": 3,
      "text": "The only conceptual limitations are, first, that coder probabilities must be expressed at finite precision and, second, that the decoder be able to detect each individual modification to the value interval via examination of a fixed amount of input. As a practical matter, many of the implementation details stem from the fact that the coder can function using only a small \"window\" to incrementally read or write the arbitrarily precise number x.",
      "zh-CHS": "唯一的概念限制是，首先，编码器概率必须以有限精度表示，其次，解码器能够通过检查固定数量的输入来检测对值间隔的每个单独修改。实际上，许多实现细节源于这样一个事实，即编码器可以只使用一个小“窗口”来递增地读取或写入任意精确的数字x。"
    },
    {
      "indent": 0,
      "text": "7.2. Practical Algorithm Description",
      "section_title": true,
      "zh-CHS": "7.2. 实用算法描述"
    },
    {
      "indent": 3,
      "text": "VP8's boolean coder works with 8-bit probabilities p. The range of such p is 0 <= p <= 255; the actual probability represented by p is p/256. Also, the coder is designed so that decoding of a bool requires no more than an 8-bit comparison, and so that the state of both the encoder and decoder can be easily represented using a small number of unsigned 16-bit integers.",
      "zh-CHS": "VP8的布尔编码器使用8位概率p。该p的范围为0<=p<=255；p表示的实际概率为p/256。此外，编码器的设计使得bool的解码只需要8位比较，并且使得编码器和解码器的状态可以使用少量无符号16位整数轻松表示。"
    },
    {
      "indent": 3,
      "text": "The details are most easily understood if we first describe the algorithm using bit-at-a-time input and output. Aside from the ability to maintain a position in this bitstream and write/read bits, the encoder also needs the ability to add 1 to the bits already output; after writing n bits, adding 1 to the existing output is the same thing as adding pow(2, -n) to x.",
      "zh-CHS": "如果我们首先使用一次一位的输入和输出来描述算法，那么细节最容易理解。除了能够保持在该比特流中的位置和写入/读取比特外，编码器还需要能够向已经输出的比特添加1；写入n位后，将1添加到现有输出与将pow（2，-n）添加到x是相同的。"
    },
    {
      "indent": 3,
      "text": "Together with the bit position, the encoder must maintain two unsigned 8-bit numbers, which we call \"bottom\" and \"range\". Writing w for the n bits already written and S = pow(2, - n - 8) for the scale of the current bit position one byte out, we have the following constraint on all future values v of w (including the final value v = x):",
      "zh-CHS": "连同位位置，编码器必须保持两个无符号8位数字，我们称之为“底部”和“范围”。对于已经写入的n个位写入w，对于当前位位置的比例为1字节，写入S=pow（2，-n-8），我们对w的所有未来值v（包括最终值v=x）有以下约束："
    },
    {
      "indent": 3,
      "text": "w + ( S * bottom ) <= v < w + ( S * ( bottom + range ) )",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Thus, appending bottom to the already-written bits w gives the left endpoint of the interval of possible values, appending bottom + range gives the right endpoint, and range itself (scaled to the current output position) is the length of the interval.",
      "zh-CHS": "因此，将bottom附加到已经写入的位w上，给出可能值间隔的左端点，将bottom+range附加到右端点，range本身（缩放到当前输出位置）是间隔的长度。"
    },
    {
      "indent": 3,
      "text": "So that our probabilistic encodings are reasonably accurate, we do not let range vary by more than a factor of two: It stays within the bounds 128 <= range <= 255.",
      "zh-CHS": "因此，我们的概率编码是相当准确的，我们不让范围变化超过两个因素：它保持在128<=范围<=255的范围内。"
    },
    {
      "indent": 3,
      "text": "The process for encoding a boolean value val whose probability of being zero is prob / 256 -- and whose probability of being one is ( 256 - prob ) / 256 -- with 1 <= prob <= 255 is as follows.",
      "zh-CHS": "对布尔值val进行编码的过程如下：其概率为零的概率为prob/256，其概率为（256-prob）/256，其中1<=prob<=255。"
    },
    {
      "indent": 3,
      "text": "Using an unsigned 16-bit multiply followed by an unsigned right shift, we calculate an unsigned 8-bit split value:",
      "zh-CHS": "使用无符号16位乘法和无符号右移，我们计算无符号8位分割值："
    },
    {
      "indent": 3,
      "text": "split = 1 + (((range - 1) * probability)]] >> 8)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "split is approximately ( prob / 256 ) * range and lies within the bounds 1 <= split <= range - 1. These bounds ensure the correctness of the decoding procedure described below.",
      "zh-CHS": "split大约在（prob/256）*范围内，位于范围1<=split<=范围-1内。这些界限确保了下面描述的解码过程的正确性。"
    },
    {
      "indent": 3,
      "text": "If the incoming boolean val to be encoded is false, we leave the left interval endpoint bottom alone and reduce range, replacing it by split. If the incoming val is true, we move up the left endpoint to bottom + split, propagating any carry to the already-written value w (this is where we need the ability to add 1 to w), and reduce range to range - split.",
      "zh-CHS": "如果要编码的传入布尔值为false，我们将保留左区间端点底部，并缩小范围，用split替换它。如果传入的val为true，我们将左端点向上移动到bottom+split，将任何进位传播到已经写入的值w（这是我们需要将1添加到w的地方），并减少范围到范围-split。"
    },
    {
      "indent": 3,
      "text": "Regardless of the value encoded, range has been reduced and now has the bounds 1 <= range <= 254. If range < 128, the encoder doubles it and shifts the high-order bit out of bottom to the output as it also doubles bottom, repeating this process one bit at a time until 128 <= range <= 255. Once this is completed, the encoder is ready to accept another bool, maintaining the constraints described above.",
      "zh-CHS": "无论编码的值是多少，范围都已缩小，现在的边界为1<=范围<=254。如果范围<128，编码器将其加倍，并将高阶位从底部移到输出，因为它也将底部加倍，每次重复此过程一位，直到128<=范围<=255。一旦完成，编码器准备接受另一个bool，保持上述约束。"
    },
    {
      "indent": 3,
      "text": "After encoding the last bool, the partition may be completed by appending bottom to the bitstream.",
      "zh-CHS": "在编码最后一个bool之后，可以通过向比特流追加bottom来完成分区。"
    },
    {
      "indent": 3,
      "text": "The decoder mimics the state of the encoder. It maintains, together with an input bit position, two unsigned 8-bit numbers, a range identical to that maintained by the encoder and a value. Decoding one bool at a time, the decoder (in effect) tracks the same left interval endpoint as does the encoder and subtracts it from the remaining input. Appending the unread portion of the bitstream to the 8-bit value gives the difference between the actual value encoded and the known left endpoint.",
      "zh-CHS": "解码器模拟编码器的状态。它与输入位位置一起保持两个无符号8位数字，一个与编码器保持的范围相同的范围和一个值。每次解码一个布尔，解码器（实际上）跟踪与编码器相同的左间隔端点，并从剩余输入中减去它。将比特流的未读部分附加到8位值会给出编码的实际值和已知左端点之间的差异。"
    },
    {
      "indent": 3,
      "text": "The decoder is initialized by setting range = 255 and reading the first 16 input bits into value. The decoder maintains range and calculates split in exactly the same way as does the encoder.",
      "zh-CHS": "解码器通过设置range=255并将前16个输入位读入值来初始化。解码器保持范围并以与编码器完全相同的方式计算分割。"
    },
    {
      "indent": 3,
      "text": "To decode a bool, it compares value to split; if value < split, the bool is zero, and range is replaced with split. If value >= split, the bool is one, range is replaced with range - split, and value is replaced with value - split.",
      "zh-CHS": "要解码布尔值，它将值与拆分值进行比较；如果值<拆分，则bool为零，范围替换为拆分。如果值>=split，则布尔值为1，范围替换为范围-split，值替换为值-split。"
    },
    {
      "indent": 3,
      "text": "Again, range is doubled one bit at a time until it is at least 128. The value is doubled in parallel, shifting a new input bit into the bottom each time.",
      "zh-CHS": "同样，范围一次增加一位，直到至少达到128位。该值并行加倍，每次将一个新的输入位移到底部。"
    },
    {
      "indent": 3,
      "text": "Writing Value for value together with the unread input bits and Range for range extended indefinitely on the right by zeros, the condition Value < Range is maintained at all times by the decoder. In particular, the bits shifted out of value as it is doubled are always zero.",
      "zh-CHS": "将Value for Value与未读输入位一起写入，并将右侧的Range for Range无限扩展0，解码器始终保持条件Value<Range。特别是，当值翻倍时移位的位始终为零。"
    },
    {
      "indent": 0,
      "text": "7.3. Actual Implementation",
      "section_title": true,
      "zh-CHS": "7.3. 实际执行"
    },
    {
      "indent": 3,
      "text": "The C code below gives complete implementations of the encoder and decoder described above. While they are logically identical to the \"bit-at-a-time\" versions, they internally buffer a couple of extra bytes of the bitstream. This allows I/O to be done (more practically) a byte at a time and drastically reduces the number of carries the encoder has to propagate into the already-written data.",
      "zh-CHS": "下面的C代码给出了上述编码器和解码器的完整实现。虽然它们在逻辑上与“一次比特”版本相同，但它们在内部缓冲比特流的两个额外字节。这允许I/O一次完成一个字节（更实际），并大幅减少编码器必须传播到已写入数据中的载波数。"
    },
    {
      "indent": 3,
      "text": "Another (logically equivalent) implementation may be found in the reference decoder file bool_decoder.h (Section 20.2).",
      "zh-CHS": "参考解码器文件bool_decoder.h（第20.2节）中可以找到另一个（逻辑等效）实现。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Encoder first */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef struct {\n  uint8 *output;  /* ptr to next byte to be written */\n  uint32 range;   /* 128 <= range <= 255 */\n  uint32 bottom;  /* minimum value of remaining output */\n  int bit_count;  /* # of shifts before an output byte\n                     is available */\n} bool_encoder;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Must set initial state of encoder before writing any bools. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void init_bool_encoder(bool_encoder *e, uint8 *start_partition)\n{\n  e->output = start_partition;\n  e->range = 255;\n  e->bottom = 0;\n  e->bit_count = 24;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Encoding very rarely produces a carry that must be propagated\n   to the already-written output.  The arithmetic guarantees that\n   the propagation will never go beyond the beginning of the\n   output.  Put another way, the encoded value x is always less\n   than one. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void add_one_to_output(uint8 *q)\n{\n  while (*--q == 255)\n    *q = 0;\n  ++*q;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Main function writes a bool_value whose probability of being\n   zero is (expected to be) prob/256. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void write_bool(bool_encoder *e, Prob prob, int bool_value)\n{\n  /* split is approximately (range * prob) / 256 and,\n     crucially, is strictly bigger than zero and strictly\n     smaller than range */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "uint32 split = 1 + (((e->range - 1) * prob) >> 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "if (bool_value) {\n  e->bottom += split; /* move up bottom of interval */\n  e->range -= split;  /* with corresponding decrease in range */\n} else\n  e->range = split;   /* decrease range, leaving bottom alone */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "while (e->range < 128)\n{\n  e->range <<= 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (e->bottom & (1 << 31))  /* detect carry */\n  add_one_to_output(e->output);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "e->bottom <<= 1;        /* before shifting bottom */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!--e->bit_count) {  /* write out high byte of bottom ... */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "*e->output++ = (uint8) (e->bottom >> 24);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": "e->bottom &= (1 << 24) - 1;  /* ... keeping low 3 bytes */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "      e->bit_count = 8;            /* 8 shifts until next output */\n    }\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Call this function (exactly once) after encoding the last\n   bool value for the partition being written */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void flush_bool_encoder(bool_encoder *e)\n{\n  int c = e->bit_count;\n  uint32 v = e->bottom;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  if (v & (1 << (32 - c)))   /* propagate (unlikely) carry */\n    add_one_to_output(e->output);\n  v <<= c & 7;               /* before shifting remaining output */\n  c >>= 3;                   /* to top of internal buffer */\n  while (--c >= 0)\n    v <<= 8;\n  c = 4;\n  while (--c >= 0) {    /* write remaining data, possibly padded */\n    *e->output++ = (uint8) (v >> 24);\n    v <<= 8;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Decoder state exactly parallels that of the encoder.\n   \"value\", together with the remaining input, equals the\n   complete encoded number x less the left endpoint of the\n   current coding interval. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef struct {\n  uint8   *input;     /* pointer to next compressed data byte */\n  uint32  range;      /* always identical to encoder's range */\n  uint32  value;      /* contains at least 8 significant bits */\n  int     bit_count;  /* # of bits shifted out of\n                         value, at most 7 */\n} bool_decoder;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Call this function before reading any bools from the\n   partition. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void init_bool_decoder(bool_decoder *d, uint8 *start_partition)\n{\n  {\n    int i = 0;\n    d->value = 0;           /* value = first 2 input bytes */\n    while (++i <= 2)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "    d->value = (d->value << 8)  |  *start_partition++;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  d->input = start_partition;  /* ptr to next byte to be read */\n  d->range = 255;           /* initial range is full */\n  d->bit_count = 0;         /* have not yet shifted out any bits */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Main function reads a bool encoded at probability prob/256,\n   which of course must agree with the probability used when the\n   bool was written. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int read_bool(bool_decoder *d, Prob prob)\n{\n  /* range and split are identical to the corresponding values\n     used by the encoder when this bool was written */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "uint32  split = 1 + (((d->range - 1) * prob) >> 8);\nuint32  SPLIT = split << 8;\nint     retval;           /* will be 0 or 1 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "if (d->value >= SPLIT) {  /* encoded a one */\n  retval = 1;\n  d->range -= split;  /* reduce range */\n  d->value -= SPLIT;  /* subtract off left endpoint of interval */\n} else {              /* encoded a zero */\n  retval = 0;\n  d->range = split;  /* reduce range, no change in left endpoint */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  while (d->range < 128) {  /* shift out irrelevant value bits */\n    d->value <<= 1;\n    d->range <<= 1;\n    if (++d->bit_count == 8) {  /* shift in new bits 8 at a time */\n      d->bit_count = 0;\n      d->value |= *d->input++;\n    }\n  }\n  return retval;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Convenience function reads a \"literal\", that is, a \"num_bits\"-\n   wide unsigned value whose bits come high- to low-order, with\n   each bit encoded at probability 128 (i.e., 1/2). */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "uint32 read_literal(bool_decoder *d, int num_bits)\n{\n  uint32 v = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  while (num_bits--)\n    v = (v << 1) + read_bool(d, 128);\n  return v;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Variant reads a signed number */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int32 read_signed_literal(bool_decoder *d, int num_bits)\n{\n  int32 v = 0;\n  if (!num_bits)\n    return 0;\n  if (read_bool(d, 128))\n    v = -1;\n  while (--num_bits)\n    v = (v << 1) + read_bool(d, 128);\n  return v;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8. Compressed Data Components",
      "section_title": true,
      "zh-CHS": "8. 压缩数据组件"
    },
    {
      "indent": 3,
      "text": "At the lowest level, VP8's compressed data is simply a sequence of probabilistically encoded bools. Most of this data is composed of (slightly) larger semantic units fashioned from bools, which we describe here.",
      "zh-CHS": "在最底层，VP8的压缩数据只是一个概率编码布尔序列。这些数据中的大多数是由（稍大一点的）bools语义单元组成的，我们在这里描述。"
    },
    {
      "indent": 3,
      "text": "We sometimes use these descriptions in C expressions within data format specifications. In this context, they refer to the return value of a call to an appropriate bool_decoder d, reading (as always) from its current reference point.",
      "zh-CHS": "我们有时在数据格式规范的C表达式中使用这些描述。在这种情况下，它们指的是调用相应bool_解码器d的返回值，从其当前参考点读取（一如既往）。"
    },
    {
      "indent": 3,
      "text": "+--------------+-------+--------------------------------------------+\n| Call         | Alt.  | Return                                     |\n+--------------+-------+--------------------------------------------+\n| Bool(p)      | B(p)  | Bool with probability p/256 of being 0.    |\n|              |       | Return value of read_bool(d, p).           |\n|              |       |                                            |\n| Flag         | F     | A one-bit flag (same thing as a B(128) or  |\n|              |       | an L(1)).  Abbreviated F.  Return value of |\n|              |       | read_bool(d, 128).                         |\n|              |       |                                            |\n| Lit(n)       | L(n)  | Unsigned n-bit number encoded as n flags   |\n|              |       | (a \"literal\").  Abbreviated L(n).  The     |\n|              |       | bits are read from high to low order.      |\n|              |       | Return value of read_literal(d, n).        |\n|              |       |                                            |\n| SignedLit(n) |       | Signed n-bit number encoded similarly to   |\n|              |       | an L(n).  Return value of                  |\n|              |       | read_signed_literal(d, n).  These are      |\n|              |       | rare.                                      |\n|              |       |                                            |\n| P(8)         |       | An 8-bit probability.  No different from   |\n|              |       | an L(8), but we sometimes use this         |\n|              |       | notation to emphasize that a probability   |\n|              |       | is being coded.                            |\n|              |       |                                            |\n| P(7)         |       | A 7-bit specification of an 8-bit          |\n|              |       | probability.  Coded as an L(7) number x;   |\n|              |       | the resulting 8-bit probability is x ? x   |\n|              |       | << 1 : 1.                                  |\n|              |       |                                            |\n| F?  X        |       | A flag that, if true, is followed by a     |\n|              |       | piece of data X.                           |\n|              |       |                                            |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "| F?  X:Y      |       | A flag that, if true, is followed by X     |\n|              |       | and, if false, is followed by Y.  Also     |\n|              |       | used to express a value where Y is an      |\n|              |       | implicit default (not encoded in the data  |\n|              |       | stream), as in F?  P(8):255, which         |\n|              |       | expresses an optional probability: If the  |\n|              |       | flag is true, the probability is specified |\n|              |       | as an 8-bit literal, while if the flag is  |\n|              |       | false, the probability defaults to 255.    |\n|              |       |                                            |\n| B(p)?  X     | B(p)? | Variants of the above using a boolean      |\n|              | X:Y   | indicator whose probability is not         |\n|              |       | necessarily 128.                           |\n|              |       |                                            |\n| T            |       | Tree-encoded value from small alphabet.    |\n+--------------+-------+--------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The last type requires elaboration. We often wish to encode something whose value is restricted to a small number of possibilities (the alphabet).",
      "zh-CHS": "最后一种类型需要细化。我们经常希望编码的东西，其价值被限制在少数可能性（字母表）。"
    },
    {
      "indent": 3,
      "text": "This is done by representing the alphabet as the leaves of a small binary tree. The (non-leaf) nodes of the tree have associated probabilities p and correspond to calls to read_bool(d, p). We think of a zero as choosing the left branch below the node and a one as choosing the right branch.",
      "zh-CHS": "这是通过将字母表表示为小二叉树的叶子来实现的。树的（非叶）节点具有相关概率p，并对应于对read_bool（d，p）的调用。我们认为零表示选择节点下方的左分支，一表示选择右分支。"
    },
    {
      "indent": 3,
      "text": "Thus, every value (leaf) whose tree depth is x is decoded after exactly x calls to read_bool.",
      "zh-CHS": "因此，树深度为x的每个值（叶）在x调用read_bool之后被解码。"
    },
    {
      "indent": 3,
      "text": "A tree representing an encoding of an alphabet of n possible values always contains n-1 non-leaf nodes, regardless of its shape (this is easily seen by induction on n).",
      "zh-CHS": "表示n个可能值的字母表编码的树始终包含n-1个非叶节点，而不管其形状如何（这很容易通过对n的归纳来看出）。"
    },
    {
      "indent": 3,
      "text": "There are many ways that a given alphabet can be so represented. The choice of tree has little impact on datarate but does affect decoder performance. The trees used by VP8 are chosen to (on average) minimize the number of calls to read_bool. This amounts to shaping the tree so that values that are more probable have smaller tree depth than do values that are less probable.",
      "zh-CHS": "一个给定的字母表有很多种表达方式。树的选择对数据速率几乎没有影响，但会影响解码器的性能。VP8使用的树的选择（平均）是为了最小化读取布尔的调用次数。这相当于对树进行整形，以便更可能的值比不太可能的值具有更小的树深度。"
    },
    {
      "indent": 3,
      "text": "Readers familiar with Huffman coding will notice that, given an alphabet together with probabilities for each value, the associated Huffman tree minimizes the expected number of calls to read_bool.",
      "zh-CHS": "熟悉哈夫曼编码的读者会注意到，给定一个字母表以及每个值的概率，关联的哈夫曼树会最小化读取布尔的预期调用数。"
    },
    {
      "indent": 3,
      "text": "Such readers will also realize that the coding method described here never results in higher datarates than does the Huffman method and, indeed, often results in much lower datarates. Huffman coding is, in fact, nothing more than a special case of this method in which each node probability is fixed at 128 (i.e., 1/2).",
      "zh-CHS": "这些读者还将认识到，这里描述的编码方法永远不会产生比哈夫曼方法更高的数据速率，事实上，通常会产生更低的数据速率。事实上，哈夫曼编码不过是这种方法的一种特例，其中每个节点的概率固定在128（即1/2）。"
    },
    {
      "indent": 0,
      "text": "8.1. Tree Coding Implementation",
      "section_title": true,
      "zh-CHS": "8.1. 树编码实现"
    },
    {
      "indent": 3,
      "text": "We give a suggested implementation of a tree data structure followed by a couple of actual examples of its usage by VP8.",
      "zh-CHS": "我们给出了一个树数据结构的建议实现，然后给出了VP8使用它的两个实际示例。"
    },
    {
      "indent": 3,
      "text": "It is most convenient to represent the values using small positive integers, typically an enum counting up from zero. The largest alphabet (used to code DCT coefficients, described in Section 13) that is tree-coded by VP8 has only 12 values. The tree for this alphabet adds 11 interior nodes and so has a total of 23 positions. Thus, an 8-bit number easily accommodates both a tree position and a return value.",
      "zh-CHS": "使用小的正整数表示值是最方便的，通常是从零开始计数的枚举。VP8树编码的最大字母表（用于编码DCT系数，如第13节所述）只有12个值。此字母表的树添加了11个内部节点，因此总共有23个位置。因此，8位数字容易容纳树位置和返回值。"
    },
    {
      "indent": 3,
      "text": "A tree may then be compactly represented as an array of (pairs of) 8-bit integers. Each (even) array index corresponds to an interior node of the tree; the 0th index of course corresponds to the root of the tree. The array entries come in pairs corresponding to the left (0) and right (1) branches of the subtree below the interior node. We use the convention that a positive (even) branch entry is the index of a deeper interior node, while a nonpositive entry v corresponds to a leaf whose value is -v.",
      "zh-CHS": "然后，树可以紧凑地表示为8位整数（对）的数组。每个（偶数）数组索引对应于树的内部节点；当然，第0个索引对应于树的根。数组项成对出现，对应于内部节点下方子树的左（0）和右（1）分支。我们使用的约定是，正（偶数）分支条目是较深内部节点的索引，而非正条目v对应于值为-v的叶。"
    },
    {
      "indent": 3,
      "text": "The node probabilities associated to a tree-coded value are stored in an array whose indices are half the indices of the corresponding tree positions. The length of the probability array is one less than the size of the alphabet.",
      "zh-CHS": "与树编码值相关联的节点概率存储在一个数组中，该数组的索引是相应树位置索引的一半。概率数组的长度比字母表的大小小一个。"
    },
    {
      "indent": 3,
      "text": "Here is C code implementing the foregoing. The advantages of our data structure should be noted. Aside from the smallness of the structure itself, the tree-directed reading algorithm is essentially a single line of code.",
      "zh-CHS": "下面是实现上述功能的C代码。应该注意我们的数据结构的优点。除了结构本身很小之外，树定向读取算法本质上是一行代码。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* A tree specification is simply an array of 8-bit integers. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef int8 tree_index;\ntypedef const tree_index Tree[];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Read and return a tree-coded value at the current decoder\n   position. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int treed_read(\n  bool_decoder * const d, /* bool_decoder always returns a 0 or 1 */\n  Tree t,                 /* tree specification */\n  const Prob p[]     /* corresponding interior node probabilities */\n) {\n  register tree_index i = 0;   /* begin at root */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "/* Descend tree until leaf is reached */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "while ((i = t[ i + read_bool(d, p[i>>1])]) > 0) {}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  return -i;     /* return value is negation of nonpositive index */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Tree-based decoding is implemented in the reference decoder file bool_decoder.h (Section 20.2).",
      "zh-CHS": "基于树的解码在参考解码器文件bool_decoder.h（第20.2节）中实现。"
    },
    {
      "indent": 0,
      "text": "8.2. Tree Coding Example",
      "section_title": true,
      "zh-CHS": "8.2. 树编码示例"
    },
    {
      "indent": 3,
      "text": "As a multi-part example, without getting too far into the semantics of macroblock decoding (which is of course taken up below), we look at the \"mode\" coding for intra-predicted macroblocks.",
      "zh-CHS": "作为一个多部分示例，在不深入宏块解码语义的情况下（这当然在下面讨论），我们来看看帧内预测宏块的“模式”编码。"
    },
    {
      "indent": 3,
      "text": "It so happens that, because of a difference in statistics, the Y (or luma) mode encoding uses two different trees: one for key frames and another for interframes. This is the only instance in VP8 of the same dataset being coded by different trees under different circumstances. The UV (or chroma) modes are a proper subset of the Y modes and, as such, have their own decoding tree.",
      "zh-CHS": "由于统计数据的差异，Y（或luma）模式编码使用两种不同的树：一种用于关键帧，另一种用于帧间。这是VP8中同一数据集在不同情况下由不同树编码的唯一实例。UV（或色度）模式是Y模式的适当子集，因此具有其自己的解码树。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    DC_PRED, /* predict DC using row above and column to the left */\n    V_PRED,  /* predict rows using row above */\n    H_PRED,  /* predict columns using column to the left */\n    TM_PRED, /* propagate second differences a la \"True Motion\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "B_PRED,  /* each Y subblock is independently predicted */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_uv_modes = B_PRED,  /* first four modes apply to chroma */\n    num_ymodes   /* all modes apply to luma */\n}\nintra_mbmode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* The aforementioned trees together with the implied codings as\n   comments.\n   Actual (i.e., positive) indices are always even.\n   Value (i.e., nonpositive) indices are arbitrary. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index ymode_tree [2 * (num_ymodes - 1)] =\n{\n -DC_PRED, 2,        /* root: DC_PRED = \"0\", \"1\" subtree */\n  4, 6,              /* \"1\" subtree has 2 descendant subtrees */\n   -V_PRED, -H_PRED, /* \"10\" subtree: V_PRED = \"100\",\n                        H_PRED = \"101\" */\n   -TM_PRED, -B_PRED /* \"11\" subtree: TM_PRED = \"110\",\n                        B_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index kf_ymode_tree [2 * (num_ymodes - 1)] =\n{\n -B_PRED, 2,            /* root: B_PRED = \"0\", \"1\" subtree */\n  4, 6,                 /* \"1\" subtree has 2 descendant subtrees */\n   -DC_PRED, -V_PRED,   /* \"10\" subtree: DC_PRED = \"100\",\n                           V_PRED = \"101\" */\n   -H_PRED, -TM_PRED    /* \"11\" subtree: H_PRED = \"110\",\n                           TM_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index uv_mode_tree [2 * (num_uv_modes - 1)] =\n{\n -DC_PRED, 2,          /* root: DC_PRED = \"0\", \"1\" subtree */\n  -V_PRED, 4,          /* \"1\" subtree:  V_PRED = \"10\",\n                          \"11\" subtree */\n   -H_PRED, -TM_PRED   /* \"11\" subtree: H_PRED = \"110\",\n                          TM_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Given a bool_decoder d, a Y mode might be decoded as follows. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob pretend_its_huffman [num_ymodes - 1] =\n  { 128, 128, 128, 128};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Ymode = (intra_mbmode) treed_read(d, ymode_tree,\n  pretend_its_huffman);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Since it greatly facilitates re-use of reference code, and since there is no real reason to do otherwise, it is strongly suggested that any decoder implementation use exactly the same enumeration values and probability table layouts as those described in this document (and in the reference code) for all tree-coded data in VP8.",
      "zh-CHS": "由于它极大地促进了参考代码的重复使用，并且没有真正的理由这样做，因此强烈建议任何解码器实现对VP8中的所有树编码数据使用与本文档（以及参考代码）中描述的完全相同的枚举值和概率表布局。"
    },
    {
      "indent": 0,
      "text": "9. Frame Header",
      "section_title": true,
      "zh-CHS": "9. 帧头"
    },
    {
      "indent": 3,
      "text": "The uncompressed data chunk at the start of each frame and at the first part of the first data partition contains information pertaining to the frame as a whole. We list the fields in the order of occurrence. Most of the header decoding occurs in the reference decoder file dixie.c (Section 20.4).",
      "zh-CHS": "每个帧开头和第一个数据分区的第一部分的未压缩数据块包含与整个帧相关的信息。我们按出现的顺序列出字段。大多数头解码发生在参考解码器文件dixie.c中（第20.4节）。"
    },
    {
      "indent": 0,
      "text": "9.1. Uncompressed Data Chunk",
      "section_title": true,
      "zh-CHS": "9.1. 未压缩数据块"
    },
    {
      "indent": 3,
      "text": "The uncompressed data chunk comprises a common (for key frames and interframes) 3-byte frame tag that contains four fields, as follows:",
      "zh-CHS": "未压缩数据块包含一个公共（用于关键帧和帧间）3字节帧标记，该标记包含四个字段，如下所示："
    },
    {
      "indent": 3,
      "text": "1. A 1-bit frame type (0 for key frames, 1 for interframes).",
      "zh-CHS": "1. 1位帧类型（0表示关键帧，1表示干涉帧）。"
    },
    {
      "indent": 3,
      "text": "2. A 3-bit version number (0 - 3 are defined as four different profiles with different decoding complexity; other values may be defined for future variants of the VP8 data format).",
      "zh-CHS": "2. 一个3位版本号（0-3被定义为具有不同解码复杂度的四个不同配置文件；其他值可为VP8数据格式的未来变体定义）。"
    },
    {
      "indent": 3,
      "text": "3. A 1-bit show_frame flag (0 when current frame is not for display, 1 when current frame is for display).",
      "zh-CHS": "3. 1位显示帧标志（当前帧不用于显示时为0，当前帧用于显示时为1）。"
    },
    {
      "indent": 3,
      "text": "4. A 19-bit field containing the size of the first data partition in bytes.",
      "zh-CHS": "4. 包含第一个数据分区大小（字节）的19位字段。"
    },
    {
      "indent": 3,
      "text": "The version number setting enables or disables certain features in the bitstream, as follows:",
      "zh-CHS": "版本号设置启用或禁用位流中的某些功能，如下所示："
    },
    {
      "indent": 12,
      "text": "+---------+-------------------------+-------------+\n| Version | Reconstruction Filter   | Loop Filter |\n+---------+-------------------------+-------------+\n| 0       | Bicubic                 | Normal      |\n|         |                         |             |\n| 1       | Bilinear                | Simple      |\n|         |                         |             |\n| 2       | Bilinear                | None        |\n|         |                         |             |\n| 3       | None                    | None        |\n|         |                         |             |\n| Other   | Reserved for future use |             |\n+---------+-------------------------+-------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The reference software also adjusts the loop filter based on version number, as per the table above. Version number 1 implies a \"simple\" loop filter, and version numbers 2 and 3 imply no loop filter. However, the \"simple\" filter setting in this context has no effect whatsoever on the decoding process, and the \"no loop filter\" setting only forces the reference encoder to set filter level equal to 0. Neither affect the decoding process. In decoding, the only loop filter settings that matter are those in the frame header.",
      "zh-CHS": "参考软件还根据上表，根据版本号调整循环过滤器。版本号1表示“简单”循环过滤器，版本号2和3表示没有循环过滤器。然而，在此上下文中的“简单”滤波器设置对解码过程没有任何影响，“无环路滤波器”设置仅强制参考编码器将滤波器电平设置为0。两者都不影响解码过程。在解码中，唯一重要的循环过滤器设置是帧头中的设置。"
    },
    {
      "indent": 3,
      "text": "For key frames, the frame tag is followed by a further 7 bytes of uncompressed data, as follows:",
      "zh-CHS": "对于关键帧，帧标记后面还有7个字节的未压缩数据，如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Start code byte 0 0x9d Start code byte 1 0x01 Start code byte 2 0x2a",
      "zh-CHS": "开始代码字节0 0x9d开始代码字节1 0x01开始代码字节2 0x2a"
    },
    {
      "indent": 3,
      "text": "16 bits      :     (2 bits Horizontal Scale << 14) | Width (14 bits)\n16 bits      :     (2 bits Vertical Scale << 14) | Height (14 bits)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The following source code segment illustrates validation of the start code and reading the width, height, and scale factors for a key frame.",
      "zh-CHS": "下面的源代码段演示了开始代码的验证以及读取关键帧的宽度、高度和比例因子。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "unsigned char *c = pbi->source+3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "// vet via sync code\nif (c[0]!=0x9d||c[1]!=0x01||c[2]!=0x2a)\n    return -1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where pbi->source points to the beginning of the frame.",
      "zh-CHS": "其中pbi->source指向帧的开头。"
    },
    {
      "indent": 3,
      "text": "The following code reads the image dimension from the bitstream:",
      "zh-CHS": "以下代码从比特流读取图像维度："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "pc->Width      = swap2(*(unsigned short*)(c+3))&0x3fff;\npc->horiz_scale = swap2(*(unsigned short*)(c+3))>>14;\npc->Height     = swap2(*(unsigned short*)(c+5))&0x3fff;\npc->vert_scale  = swap2(*(unsigned short*)(c+5))>>14;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where the swap2 macro takes care of the endian on a different platform:",
      "zh-CHS": "swap2宏在不同平台上处理endian时："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if defined(__ppc__) || defined(__ppc64__)\n# define swap2(d)  \\\n  ((d&0x000000ff)<<8) |  \\\n  ((d&0x0000ff00)>>8)\n#else\n  # define swap2(d) d\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "While each frame is encoded as a raster scan of 16x16 macroblocks, the frame dimensions are not necessarily evenly divisible by 16. In this case, write ew = 16 - (width & 15) and eh = 16 - (height & 15) for the excess width and height, respectively. Although they are",
      "zh-CHS": "虽然每个帧编码为16x16宏块的光栅扫描，但帧尺寸不一定能被16整除。在这种情况下，将多余的宽度和高度分别写入ew=16-（宽度和高度15）和eh=16-（高度和高度15）。虽然他们是"
    },
    {
      "indent": 3,
      "text": "encoded, the last ew columns and eh rows are not actually part of the image and should be discarded before final output. However, these \"excess pixels\" should be maintained in the internal reconstruction buffer used to predict ensuing frames.",
      "zh-CHS": "编码后，最后的ew列和eh行实际上不是图像的一部分，应该在最终输出之前丢弃。然而，这些“多余像素”应该保留在用于预测后续帧的内部重建缓冲区中。"
    },
    {
      "indent": 3,
      "text": "The scaling specifications for each dimension are encoded as follows.",
      "zh-CHS": "每个维度的缩放规格编码如下。"
    },
    {
      "indent": 13,
      "text": "+-------+--------------------------------------+\n| Value | Scaling                              |\n+-------+--------------------------------------+\n| 0     | No upscaling (the most common case). |\n|       |                                      |\n| 1     | Upscale by 5/4.                      |\n|       |                                      |\n| 2     | Upscale by 5/3.                      |\n|       |                                      |\n| 3     | Upscale by 2.                        |\n+-------+--------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Upscaling does not affect the reconstruction buffer, which should be maintained at the encoded resolution. Any reasonable method of upsampling (including any that may be supported by video hardware in the playback environment) may be used. Since scaling has no effect on decoding, we do not discuss it any further.",
      "zh-CHS": "放大不影响重建缓冲区，重建缓冲区应保持编码分辨率。可以使用任何合理的上采样方法（包括回放环境中视频硬件支持的任何上采样方法）。由于缩放对解码没有影响，我们不再进一步讨论它。"
    },
    {
      "indent": 3,
      "text": "As discussed in Section 5, allocation (or re-allocation) of data structures (such as the reconstruction buffer) whose size depends on dimension will be triggered here.",
      "zh-CHS": "如第5节所述，此处将触发大小取决于维度的数据结构（如重建缓冲区）的分配（或重新分配）。"
    },
    {
      "indent": 0,
      "text": "9.2. Color Space and Pixel Type (Key Frames Only)",
      "section_title": true,
      "zh-CHS": "9.2. 颜色空间和像素类型（仅限关键帧）"
    },
    {
      "indent": 11,
      "text": "+-------+------------------------------------------+\n| Field | Value                                    |\n+-------+------------------------------------------+\n| L(1)  | 1-bit color space type specification     |\n|       |                                          |\n| L(1)  | 1-bit pixel value clamping specification |\n+-------+------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The color space type bit is encoded as follows:",
      "zh-CHS": "颜色空间类型位编码如下："
    },
    {
      "indent": 3,
      "text": "o 0 - YUV color space similar to the YCrCb color space defined in [ITU-R_BT.601]",
      "zh-CHS": "o 0-YUV颜色空间，类似于[ITU-R_BT.601]中定义的YCrCb颜色空间"
    },
    {
      "indent": 3,
      "text": "o 1 - Reserved for future use",
      "zh-CHS": "o 1-保留供将来使用"
    },
    {
      "indent": 3,
      "text": "The pixel value clamping type bit is encoded as follows:",
      "zh-CHS": "像素值箝位类型位编码如下："
    },
    {
      "indent": 3,
      "text": "o 0 - Decoders are required to clamp the reconstructed pixel values to between 0 and 255 (inclusive).",
      "zh-CHS": "o 0-需要使用解码器将重建的像素值钳制在0和255（包括0和255）之间。"
    },
    {
      "indent": 3,
      "text": "o 1 - Reconstructed pixel values are guaranteed to be between 0 and 255; no clamping is necessary.",
      "zh-CHS": "o 1-重建像素值保证在0到255之间；无需夹紧。"
    },
    {
      "indent": 3,
      "text": "Information in this subsection does not appear in interframes.",
      "zh-CHS": "本小节中的信息不会出现在干涉图中。"
    },
    {
      "indent": 0,
      "text": "9.3. Segment-Based Adjustments",
      "section_title": true,
      "zh-CHS": "9.3. 基于分部的调整"
    },
    {
      "indent": 3,
      "text": "This subsection contains probability and value information for implementing segment adaptive adjustments to default decoder behavior. The data in this subsection is used in the decoding of the ensuing per-segment information and applies to the entire frame. When segment adaptive adjustments are enabled, each macroblock will be assigned a segment ID. Macroblocks with the same segment ID belong to the same segment and have the same adaptive adjustments over default baseline values for the frame. The adjustments can be quantizer level or loop filter strength.",
      "zh-CHS": "本小节包含对默认解码器行为实施段自适应调整的概率和值信息。本小节中的数据用于随后的每段信息的解码，并应用于整个帧。启用段自适应调整时，将为每个宏块分配一个段ID。具有相同段ID的宏块属于同一段，并且在帧的默认基线值上具有相同的自适应调整。调整可以是量化器电平或环路滤波器强度。"
    },
    {
      "indent": 3,
      "text": "The context for decoding this feature at the macroblock level is provided by a subsection in the frame header, which contains:",
      "zh-CHS": "在宏块级别解码该特征的上下文由帧头中的子部分提供，该子部分包含："
    },
    {
      "indent": 3,
      "text": "1. A segmentation_enabled flag that enables the feature for this frame if set to 1, and disables it if set to 0. The following fields occur if the feature is enabled.",
      "zh-CHS": "1. 一个segmentation_enabled标志，如果设置为1，则启用此帧的功能，如果设置为0，则禁用该功能。如果启用该功能，则会出现以下字段。"
    },
    {
      "indent": 3,
      "text": "2. L(1) indicates if the segment map is updated for the current frame (update_mb_segmentation_map).",
      "zh-CHS": "2. L（1）表示是否为当前帧更新了段映射（更新\\u mb\\u segmentation\\u映射）。"
    },
    {
      "indent": 3,
      "text": "3. L(1) indicates if the segment feature data items are updated for the current frame (update_segment_feature_data).",
      "zh-CHS": "3. L（1）表示是否为当前帧更新段特征数据项（更新段特征数据）。"
    },
    {
      "indent": 3,
      "text": "4. If Item 3 above (update_segment_feature_data) is 1, the following fields occur:",
      "zh-CHS": "4. 如果上面的第3项（更新\\段\\特征\\数据）为1，则出现以下字段："
    },
    {
      "indent": 7,
      "text": "a. L(1), the mode of segment feature data (segment_feature_mode), can be absolute-value mode (0) or delta value mode (1).",
      "zh-CHS": "a. L（1），段特征数据的模式（段特征模式），可以是绝对值模式（0）或增量值模式（1）。"
    },
    {
      "indent": 7,
      "text": "b. Segment feature data items are decoded segment by segment for each segment feature. For every data item, a one-bit flag indicates whether the item is 0, or a non-zero value to be decoded. If the value is non-zero, then the value is decoded as a magnitude L(n), followed by a one-bit sign (L(1) -- 0 for positive and 1 for negative). The length n can be looked up from a pre-defined length table for all feature data.",
      "zh-CHS": "b. 段特征数据项针对每个段特征逐段解码。对于每个数据项，一位标志指示该项是0还是要解码的非零值。如果该值不为零，则该值被解码为幅值L（n），后跟一位符号（L（1）——0表示正，1表示负）。可以从预定义的长度表中查找所有特征数据的长度n。"
    },
    {
      "indent": 3,
      "text": "5. If the L(1) flag as noted in Item 2 above is set to 1, the probabilities of the decoding tree for the segment map are decoded from the bitstream. Each probability is decoded with a one-bit flag indicating whether the probability is the default value of 255 (flag is set to 0), or an 8-bit value, L(8), from the bitstream.",
      "zh-CHS": "5. 如果如上面项目2中所述的L（1）标志被设置为1，则从比特流解码段映射的解码树的概率。使用一位标志对每个概率进行解码，该标志指示概率是来自比特流的默认值255（标志设置为0）还是8位值L（8）。"
    },
    {
      "indent": 3,
      "text": "The layout and semantics supporting this feature at the macroblock level are described in Section 10.",
      "zh-CHS": "第10节描述了在宏块级别支持此功能的布局和语义。"
    },
    {
      "indent": 0,
      "text": "9.4. Loop Filter Type and Levels",
      "section_title": true,
      "zh-CHS": "9.4. 环路滤波器类型和电平"
    },
    {
      "indent": 3,
      "text": "VP8 supports two types of loop filters having different computational complexity. The following bits occur in the header to support the selection of the baseline type, strength, and sharpness behavior of the loop filter used for the current frame.",
      "zh-CHS": "VP8支持两种计算复杂度不同的环路滤波器。以下位出现在标题中，以支持选择用于当前帧的循环过滤器的基线类型、强度和锐度行为。"
    },
    {
      "indent": 23,
      "text": "+-------+-------------------+\n| Index | Description       |\n+-------+-------------------+\n| L(1)  | filter_type       |\n|       |                   |\n| L(6)  | loop_filter_level |\n|       |                   |\n| L(3)  | sharpness_level   |\n+-------+-------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The meaning of these numbers will be further explained in Section 15.",
      "zh-CHS": "第15节将进一步解释这些数字的含义。"
    },
    {
      "indent": 3,
      "text": "VP8 has a feature in the bitstream that enables adjustment of the loop filter level based on a macroblock's prediction mode and reference frame. The per-macroblock adjustment is done through delta values against the default loop filter level for the current frame. This subsection contains flag and value information for implementing per-macroblock loop filter level adjustment to default decoder behavior. The data in this section is used in the decoding of the ensuing per-macroblock information and applies to the entire frame.",
      "zh-CHS": "VP8在比特流中具有一个特性，该特性使得能够基于宏块的预测模式和参考帧来调整循环滤波器电平。每宏块调整是根据当前帧的默认循环过滤器级别，通过增量值完成的。本小节包含用于将每个宏块循环滤波器电平调整到默认解码器行为的标志和值信息。该部分中的数据用于随后的每个宏块信息的解码，并应用于整个帧。"
    },
    {
      "indent": 3,
      "text": "L(1) is a one-bit flag indicating if the macroblock loop filter adjustment is on for the current frame. 0 means that such a feature is not supported in the current frame, and 1 means this feature is enabled for the current frame.",
      "zh-CHS": "L（1）是一位标志，指示当前帧的宏块循环滤波器调整是否开启。0表示当前帧不支持此功能，1表示当前帧已启用此功能。"
    },
    {
      "indent": 3,
      "text": "Whether the adjustment is based on a reference frame or encoding mode, the adjustment of the loop filter level is done via a delta value against a baseline loop filter value. The delta values are updated for the current frame if an L(1) bit, mode_ref_lf_delta_update, takes the value 1. There are two groups of delta values: One group of delta values is for reference frame-based adjustments, and the other group is for mode-based adjustments. The number of delta values in the two groups is MAX_REF_LF_DELTAS and MAX_MODE_LF_DELTAS, respectively. For every value within the two groups, there is a one-bit L(1) to indicate if the particular value is updated. When one is updated (1), it is transmitted as a six-bit-magnitude L(6) followed by a one-bit sign flag (L(1) -- 0 for positive and 1 for negative).",
      "zh-CHS": "无论调整是基于参考帧还是编码模式，循环滤波器电平的调整都是通过相对于基线循环滤波器值的增量值来完成的。如果L（1）位mode_ref_lf_delta_update的值为1，则更新当前帧的delta值。有两组增量值：一组增量值用于基于参考帧的调整，另一组用于基于模式的调整。两组中的增量值数量分别为MAX_REF_LF_delta和MAX_MODE_LF_delta。对于两个组中的每个值，都有一个1位L（1）来指示是否更新了特定值。当一个被更新（1）时，它被传输为一个六位幅值L（6），后跟一位符号标志（L（1）——0表示正，1表示负）。"
    },
    {
      "indent": 0,
      "text": "9.5. Token Partition and Partition Data Offsets",
      "section_title": true,
      "zh-CHS": "9.5. 令牌分区和分区数据偏移"
    },
    {
      "indent": 3,
      "text": "VP8 allows DCT coefficients to be packed into multiple partitions, besides the first partition with header and per-macroblock prediction information, so the decoder can perform parallel decoding in an efficient manner. A two-bit L(2) is used to indicate the number of coefficient data partitions within a compressed frame. The two bits are defined in the following table:",
      "zh-CHS": "VP8允许将DCT系数打包到多个分区中，除了第一个分区具有报头和每宏块预测信息之外，因此解码器可以高效地执行并行解码。两位L（2）用于指示压缩帧内系数数据分区的数量。下表中定义了这两个位："
    },
    {
      "indent": 17,
      "text": "+-------+-------+----------------------+\n| Bit 1 | Bit 0 | Number of Partitions |\n+-------+-------+----------------------+\n| 0     | 0     | 1                    |\n|       |       |                      |\n| 0     | 1     | 2                    |\n|       |       |                      |\n| 1     | 0     | 4                    |\n|       |       |                      |\n| 1     | 1     | 8                    |\n+-------+-------+----------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Offsets are embedded in the bitstream to provide the decoder direct access to token partitions. If the number of data partitions is greater than 1, the size of each partition (except the last) is written in 3 bytes (24 bits). The size of the last partition is the remainder of the data not used by any of the previous partitions.",
      "zh-CHS": "偏移量嵌入在比特流中，以便解码器直接访问令牌分区。如果数据分区的数量大于1，则每个分区（最后一个除外）的大小以3字节（24位）写入。最后一个分区的大小是前一个分区未使用的剩余数据。"
    },
    {
      "indent": 3,
      "text": "The partitioned data are consecutive in the bitstream, so the size can also be used to calculate the offset of each partition. The following pseudocode illustrates how the size/offset is defined by the three bytes in the bitstream.",
      "zh-CHS": "分区数据在比特流中是连续的，因此大小也可用于计算每个分区的偏移量。以下伪代码说明了如何通过位流中的三个字节定义大小/偏移量。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Offset/size  =  (uint32)(byte0) + ((uint32)(byte1)<<8)\n  + ((uint32)(byte2)<<16);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "9.6. Dequantization Indices",
      "section_title": true,
      "zh-CHS": "9.6. 去量化指数"
    },
    {
      "indent": 3,
      "text": "All residue signals are specified via a quantized 4x4 DCT applied to the Y, U, V, or Y2 subblocks of a macroblock. As detailed in Section 14, before inverting the transform, each decoded coefficient is multiplied by one of six dequantization factors, the choice of which depends on the plane (Y, chroma = U or V, Y2) and coefficient position (DC = coefficient 0, AC = coefficients 1-15). The six values are specified using 7-bit indices into six corresponding fixed tables (the tables are given in Section 14).",
      "zh-CHS": "所有剩余信号通过应用于宏块的Y、U、V或Y2子块的量化4x4 DCT来指定。如第14节所述，在逆变换变换之前，每个解码系数乘以六个去量化因子中的一个，其选择取决于平面（Y，色度=U或V，Y2）和系数位置（DC=系数0，AC=系数1-15）。使用7位索引将六个值指定为六个相应的固定表（表在第14节中给出）。"
    },
    {
      "indent": 3,
      "text": "The first 7-bit index gives the dequantization table index for Y-plane AC coefficients, called yac_qi. It is always coded and acts as a baseline for the other 5 quantization indices, each of which is represented by a delta from this baseline index. Pseudocode for reading the indices follows:",
      "zh-CHS": "第一个7位索引给出Y平面AC系数的去量化表索引，称为yac_qi。它总是被编码并充当其他5个量化索引的基线，每个量化索引都由该基线索引的增量表示。用于读取索引的伪代码如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "yac_qi     = L(7);           /* Y ac index always specified */\nydc_delta  = F? delta(): 0;  /* Y dc delta specified if\n                                flag is true */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "y2dc_delta = F? delta(): 0;  /* Y2 dc delta specified if\n                                flag is true */\ny2ac_delta = F? delta(): 0;  /* Y2 ac delta specified if\n                                flag is true */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "uvdc_delta = F? delta(): 0;  /* chroma dc delta specified\n                                if flag is true */\nuvac_delta = F? delta(): 0;  /* chroma ac delta specified\n                                if flag is true */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where delta() is the process to read 5 bits from the bitstream to determine a signed delta value:",
      "zh-CHS": "其中delta（）是从比特流中读取5位以确定有符号delta值的过程："
    },
    {
      "indent": 7,
      "text": "+-------+--------------------------------------------------+\n| Index | Description                                      |\n+-------+--------------------------------------------------+\n| L(4)  | Magnitude of delta                               |\n|       |                                                  |\n| L(1)  | Sign of delta, 0 for positive and 1 for negative |\n+-------+--------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "9.7. Refresh Golden Frame and Altref Frame",
      "section_title": true,
      "zh-CHS": "9.7. 刷新金色框架和Altref框架"
    },
    {
      "indent": 3,
      "text": "For key frames, both the golden frame and the altref frame are refreshed/ replaced by the current reconstructed frame, by default. For non-key frames, VP8 uses two bits to indicate whether the two frame buffers are refreshed, using the reconstructed current frame:",
      "zh-CHS": "对于关键帧，默认情况下，黄金帧和altref帧都将刷新/替换为当前重建帧。对于非关键帧，VP8使用两个位指示是否使用重建的当前帧刷新两个帧缓冲区："
    },
    {
      "indent": 3,
      "text": "+-------+----------------------------------------------------------+\n| Index | Description                                              |\n+-------+----------------------------------------------------------+\n| L(1)  | Whether golden frame is refreshed (0 for no, 1 for yes). |\n|       |                                                          |\n| L(1)  | Whether altref frame is refreshed (0 for no, 1 for yes). |\n+-------+----------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "When the flag for the golden frame is 0, VP8 uses 2 more bits in the bitstream to indicate whether the buffer (and which buffer) is copied to the golden frame, or if no buffer is copied:",
      "zh-CHS": "当黄金帧的标志为0时，VP8在比特流中再使用2位来指示是否将缓冲区（以及哪个缓冲区）复制到黄金帧，或者如果没有复制缓冲区："
    },
    {
      "indent": 11,
      "text": "+-------+------------------------------------------+\n| Index | Description                              |\n+-------+------------------------------------------+\n| L(2)  | Buffer copy flag for golden frame buffer |\n+-------+------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where:",
      "zh-CHS": "哪里："
    },
    {
      "indent": 3,
      "text": "o 0 means no buffer is copied to the golden frame",
      "zh-CHS": "o 0表示没有缓冲区复制到黄金帧"
    },
    {
      "indent": 3,
      "text": "o 1 means last_frame is copied to the golden frame",
      "zh-CHS": "o 1表示最后一帧复制到黄金帧"
    },
    {
      "indent": 3,
      "text": "o 2 means alt_ref_frame is copied to the golden frame",
      "zh-CHS": "o 2表示alt_ref_帧复制到黄金帧"
    },
    {
      "indent": 3,
      "text": "Similarly, when the flag for altref is 0, VP8 uses 2 bits in the bitstream to indicate which buffer is copied to alt_ref_frame.",
      "zh-CHS": "类似地，当altref的标志为0时，VP8使用位流中的2位来指示将哪个缓冲区复制到alt_ref_帧。"
    },
    {
      "indent": 11,
      "text": "+-------+------------------------------------------+\n| Index | Description                              |\n+-------+------------------------------------------+\n| L(2)  | Buffer copy flag for altref frame buffer |\n+-------+------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where:",
      "zh-CHS": "哪里："
    },
    {
      "indent": 3,
      "text": "o 0 means no buffer is copied to the altref frame",
      "zh-CHS": "o 0表示未将缓冲区复制到altref帧"
    },
    {
      "indent": 3,
      "text": "o 1 means last_frame is copied to the altref frame",
      "zh-CHS": "o 1表示最后一帧复制到altref帧"
    },
    {
      "indent": 3,
      "text": "o 2 means golden_frame is copied to the altref frame",
      "zh-CHS": "o 2表示金色框架复制到altref框架"
    },
    {
      "indent": 3,
      "text": "Two bits are transmitted for ref_frame_sign_bias for golden_frame and alt_ref_frame, respectively.",
      "zh-CHS": "分别为黄金帧和alt\\u ref\\u帧的ref\\u frame\\u sign\\u bias发送两位。"
    },
    {
      "indent": 16,
      "text": "+-------+---------------------------------+\n| Index | Description                     |\n+-------+---------------------------------+\n| L(1)  | Sign bias flag for golden frame |\n|       |                                 |\n| L(1)  | Sign bias flag for altref frame |\n+-------+---------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "These values are used to control the sign of the motion vectors when a golden frame or an altref frame is used as the reference frame for a macroblock.",
      "zh-CHS": "当黄金帧或altref帧用作宏块的参考帧时，这些值用于控制运动向量的符号。"
    },
    {
      "indent": 0,
      "text": "9.8. Refresh Last Frame Buffer",
      "section_title": true,
      "zh-CHS": "9.8. 刷新最后一帧缓冲区"
    },
    {
      "indent": 3,
      "text": "VP8 uses one bit, L(1), to indicate if the last frame reference buffer is refreshed using the constructed current frame. On a key frame, this bit is overridden, and the last frame buffer is always refreshed.",
      "zh-CHS": "VP8使用一个位L（1）来指示是否使用构造的当前帧刷新最后一个帧参考缓冲区。在关键帧上，此位被覆盖，并且始终刷新最后一个帧缓冲区。"
    },
    {
      "indent": 0,
      "text": "9.9. DCT Coefficient Probability Update",
      "section_title": true,
      "zh-CHS": "9.9. DCT系数概率更新"
    },
    {
      "indent": 3,
      "text": "This field contains updates to the probability tables used to decode DCT coefficients. For each of the probabilities in the tables, there is an L(1) flag indicating if the probability is updated for the current frame, and if the L(1) flag is set to 1, there follows an additional 8-bit value representing the new probability value. These tables are maintained across interframes but are of course replaced with their defaults at the beginning of every key frame.",
      "zh-CHS": "此字段包含用于解码DCT系数的概率表的更新。对于表中的每个概率，存在一个L（1）标志，指示是否针对当前帧更新了概率，并且如果L（1）标志被设置为1，则跟随表示新概率值的附加8位值。这些表格在帧间进行维护，但在每个关键帧的开头，当然会替换为其默认值。"
    },
    {
      "indent": 3,
      "text": "The layout and semantics of this field will be taken up in Section 13.",
      "zh-CHS": "该字段的布局和语义将在第13节中讨论。"
    },
    {
      "indent": 0,
      "text": "9.10. Remaining Frame Header Data (Non-Key Frame)",
      "section_title": true,
      "zh-CHS": "9.10. 剩余帧头数据（非关键帧）"
    },
    {
      "indent": 3,
      "text": "+-------+-----------------------------------------------------------+\n| Index | Description                                               |\n+-------+-----------------------------------------------------------+\n| L(1)  | mb_no_skip_coeff.  This flag indicates at the frame level |\n|       | if skipping of macroblocks with no non-zero coefficients  |\n|       | is enabled.  If it is set to 0, then prob_skip_false is   |\n|       | not read and mb_skip_coeff is forced to 0 for all         |\n|       | macroblocks (see Sections 11.1 and 12.1).                 |\n|       |                                                           |\n| L(8)  | prob_skip_false = probability used for decoding a         |\n|       | macroblock-level flag, which indicates if a macroblock    |\n|       | has any non-zero coefficients.  Only read if              |\n|       | mb_no_skip_coeff is 1.                                    |\n|       |                                                           |\n| L(8)  | prob_intra = probability that a macroblock is \"intra\"     |\n|       | predicted (that is, predicted from the already-encoded    |\n|       | portions of the current frame), as opposed to \"inter\"     |\n|       | predicted (that is, predicted from the contents of a      |\n|       | prior frame).                                             |\n|       |                                                           |\n| L(8)  | prob_last = probability that an inter-predicted           |\n|       | macroblock is predicted from the immediately previous     |\n|       | frame, as opposed to the most recent golden frame or      |\n|       | altref frame.                                             |\n|       |                                                           |\n| L(8)  | prob_gf = probability that an inter-predicted macroblock  |\n|       | is predicted from the most recent golden frame, as        |\n|       | opposed to the altref frame.                              |\n|       |                                                           |\n| F     | If true, followed by four L(8)s updating the              |\n|       | probabilities for the different types of intra-prediction |\n|       | for the Y plane.  These probabilities correspond to the   |\n|       | four interior nodes of the decoding tree for intra-Y      |\n|       | modes in an interframe, that is, the even positions in    |\n|       | the ymode_tree array given above.                         |\n|       |                                                           |\n| F     | If true, followed by three L(8)s updating the             |\n|       | probabilities for the different types of intra-prediction |\n|       | for the chroma planes.  These probabilities correspond to |\n|       | the even positions in the uv_mode_tree array given above. |\n|       |                                                           |\n| X     | Motion vector probability update.  Details are given in   |\n|       | Section 17.2, \"Probability Updates\".                      |\n+-------+-----------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Decoding of this portion of the frame header is handled in the reference decoder file dixie.c (Section 20.4).",
      "zh-CHS": "这部分帧头的解码在参考解码器文件dixie.c（第20.4节）中处理。"
    },
    {
      "indent": 0,
      "text": "9.11. Remaining Frame Header Data (Key Frame)",
      "section_title": true,
      "zh-CHS": "9.11. 剩余帧头数据（关键帧）"
    },
    {
      "indent": 3,
      "text": "+-------+-----------------------------------------------------------+\n| Index | Description                                               |\n+-------+-----------------------------------------------------------+\n| L(1)  | mb_no_skip_coeff.  This flag indicates at the frame level |\n|       | if skipping of macroblocks with no non-zero coefficients  |\n|       | is enabled.  If it is set to 0, then prob_skip_false is   |\n|       | not read and mb_skip_coeff is forced to 0 for all         |\n|       | macroblocks (see Sections 11.1 and 12.1).                 |\n|       |                                                           |\n| L(8)  | prob_skip_false = Probability used for decoding a         |\n|       | macroblock-level flag, which indicates if a macroblock    |\n|       | has any non-zero coefficients.  Only read if              |\n|       | mb_no_skip_coeff is 1.                                    |\n+-------+-----------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Decoding of this portion of the frame header is handled in the reference decoder file modemv.c (Section 20.11).",
      "zh-CHS": "帧头这一部分的解码在参考解码器文件modemv.c（第20.11节）中处理。"
    },
    {
      "indent": 3,
      "text": "This completes the layout of the frame header. The remainder of the first data partition consists of macroblock-level prediction data.",
      "zh-CHS": "这就完成了框架标题的布局。第一数据分区的其余部分由宏块级预测数据组成。"
    },
    {
      "indent": 3,
      "text": "After the frame header is processed, all probabilities needed to decode the prediction and residue data are known and will not change until the next frame.",
      "zh-CHS": "在处理帧头之后，解码预测和剩余数据所需的所有概率都是已知的，并且在下一帧之前不会改变。"
    },
    {
      "indent": 0,
      "text": "10. Segment-Based Feature Adjustments",
      "section_title": true,
      "zh-CHS": "10. 基于段的特征调整"
    },
    {
      "indent": 3,
      "text": "Every macroblock may optionally override some of the default behaviors of the decoder. Specifically, VP8 uses segment-based adjustments to support changing quantizer level and loop filter level for a macroblock. When the segment-based adjustment feature is enabled for a frame, each macroblock within the frame is coded with a segment_id. This effectively segments all the macroblocks in the current frame into a number of different segments. Macroblocks within the same segment behave exactly the same for quantizer and loop filter level adjustments.",
      "zh-CHS": "每个宏块可以选择性地覆盖解码器的一些默认行为。具体而言，VP8使用基于段的调整来支持改变宏块的量化器电平和环路滤波器电平。当为帧启用基于段的调整功能时，帧内的每个宏块都使用段id进行编码。这有效地将当前帧中的所有宏块分割为多个不同的段。对于量化器和环路滤波器电平调整，同一段中的宏块的行为完全相同。"
    },
    {
      "indent": 3,
      "text": "If both the segmentation_enabled and update_mb_segmentation_map flags in subsection B of the frame header take a value of 1, the prediction data for each (intra- or inter-coded) macroblock begins with a specification of segment_id for the current macroblock. It is decoded using this simple tree ...",
      "zh-CHS": "如果帧头的分段B中的分段启用和更新分段映射标志的值均为1，则每个（帧内或帧间编码的）宏块的预测数据从当前宏块的分段id的指定开始。它是用这个简单的树解码的。。。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index mb_segment_tree [2 * (4-1)] =\n  {\n    2,  4,     /* root: \"0\", \"1\" subtrees */\n    -0, -1,    /* \"00\" = 0th value, \"01\" = 1st value */\n     -2, -3    /* \"10\" = 2nd value, \"11\" = 3rd value */\n  }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "... combined with a 3-entry probability table, mb_segment_tree_probs[3]. The macroblock's segment_id is used later in the decoding process to look into the segment_feature_data table and determine how the quantizer and loop filter levels are adjusted.",
      "zh-CHS": "... 结合一个三项概率表，mb_段_树_问题[3]。宏块的segment_id稍后在解码过程中用于查看segment_feature_数据表并确定如何调整量化器和环路滤波器电平。"
    },
    {
      "indent": 3,
      "text": "The decoding of segment_id, together with the parsing of intra-prediction modes (which is taken up next), is implemented in the reference decoder file modemv.c.",
      "zh-CHS": "在参考解码器文件modemv.c中实现段_id的解码以及帧内预测模式的解析（下一步讨论）。"
    },
    {
      "indent": 0,
      "text": "11. Key Frame Macroblock Prediction Records",
      "section_title": true,
      "zh-CHS": "11. 关键帧宏块预测记录"
    },
    {
      "indent": 3,
      "text": "After specifying the features described above, the macroblock prediction record next specifies the prediction mode used for the macroblock.",
      "zh-CHS": "在指定上述特征之后，宏块预测记录接下来指定用于宏块的预测模式。"
    },
    {
      "indent": 0,
      "text": "11.1. mb_skip_coeff",
      "section_title": true,
      "zh-CHS": "11.1. mb_skip_coeff"
    },
    {
      "indent": 3,
      "text": "The single bool flag is decoded using prob_skip_false if and only if mb_no_skip_coeff is set to 1 (see Sections 9.10 and 9.11). If mb_no_skip_coeff is set to 0, then this value defaults to 0.",
      "zh-CHS": "当且仅当mb_no_skip_coeff设置为1时（见第9.10节和第9.11节），使用prob_skip_false对单个bool标志进行解码。如果mb_no_skip_coeff设置为0，则该值默认为0。"
    },
    {
      "indent": 0,
      "text": "11.2. Luma Modes",
      "section_title": true,
      "zh-CHS": "11.2. 亮度模式"
    },
    {
      "indent": 3,
      "text": "First comes the luma specification of type intra_mbmode, coded using the kf_ymode_tree, as described in Section 8 and repeated here for convenience:",
      "zh-CHS": "首先是intra_mbmode类型的luma规范，使用kf_ymode_树进行编码，如第8节所述，为了方便起见在此处重复："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    DC_PRED, /* predict DC using row above and column to the left */\n    V_PRED,  /* predict rows using row above */\n    H_PRED,  /* predict columns using column to the left */\n    TM_PRED, /* propagate second differences a la \"True Motion\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "B_PRED,  /* each Y subblock is independently predicted */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_uv_modes = B_PRED,  /* first four modes apply to chroma */\n    num_ymodes   /* all modes apply to luma */\n}\nintra_mbmode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index kf_ymode_tree [2 * (num_ymodes - 1)] =\n{\n -B_PRED, 2,            /* root: B_PRED = \"0\", \"1\" subtree */\n  4, 6,                 /* \"1\" subtree has 2 descendant subtrees */\n   -DC_PRED, -V_PRED,   /* \"10\" subtree: DC_PRED = \"100\",\n                           V_PRED = \"101\" */\n   -H_PRED, -TM_PRED    /* \"11\" subtree: H_PRED = \"110\",\n                           TM_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "For key frames, the Y mode is decoded using a fixed probability array as follows:",
      "zh-CHS": "对于关键帧，使用固定概率数组解码Y模式，如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob kf_ymode_prob [num_ymodes - 1] = { 145, 156, 163, 128};\nYmode = (intra_mbmode) treed_read(d, kf_ymode_tree, kf_ymode_prob);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "d is of course the bool_decoder being used to read the first data partition.",
      "zh-CHS": "d当然是用于读取第一个数据分区的bool_解码器。"
    },
    {
      "indent": 3,
      "text": "If the Ymode is B_PRED, it is followed by a (tree-coded) mode for each of the 16 Y subblocks. The 10 subblock modes and their coding tree are as follows:",
      "zh-CHS": "如果Ymode是B_PRED，则16个Y子块中的每一个子块后面都有一个（树编码）模式。10个子块模式及其编码树如下："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    B_DC_PRED,  /* predict DC using row above and column\n                   to the left */\n    B_TM_PRED,  /* propagate second differences a la\n                   \"True Motion\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "B_VE_PRED,  /* predict rows using row above */\nB_HE_PRED,  /* predict columns using column to the left */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "B_LD_PRED,  /* southwest (left and down) 45 degree diagonal\n               prediction */\nB_RD_PRED,  /* southeast (right and down) \"\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "B_VR_PRED,  /* SSE (vertical right) diagonal prediction */\nB_VL_PRED,  /* SSW (vertical left) \"\" */\nB_HD_PRED,  /* ESE (horizontal down) \"\" */\nB_HU_PRED,  /* ENE (horizontal up) \"\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_intra_bmodes\n}\nintra_bmode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Coding tree for the above, with implied codings as comments */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index bmode_tree [2 * (num_intra_bmodes - 1)] =\n{\n -B_DC_PRED, 2,                   /* B_DC_PRED = \"0\" */\n  -B_TM_PRED, 4,                  /* B_TM_PRED = \"10\" */\n   -B_VE_PRED, 6,                 /* B_VE_PRED = \"110\" */\n    8, 12,\n     -B_HE_PRED, 10,              /* B_HE_PRED = \"11100\" */\n      -B_RD_PRED, -B_VR_PRED,     /* B_RD_PRED = \"111010\",\n                                     B_VR_PRED = \"111011\" */\n     -B_LD_PRED, 14,              /* B_LD_PRED = \"111110\" */\n       -B_VL_PRED, 16,            /* B_VL_PRED = \"1111110\" */\n         -B_HD_PRED, -B_HU_PRED   /* HD = \"11111110\",\n                                     HU = \"11111111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The first four modes are smaller versions of the similarly named 16x16 modes above, albeit with slightly different numbering. The last six \"diagonal\" modes are unique to luma subblocks.",
      "zh-CHS": "前四种模式是上述类似命名的16x16模式的较小版本，尽管编号略有不同。最后六个“对角”模式是luma子块所特有的。"
    },
    {
      "indent": 0,
      "text": "11.3. Subblock Mode Contexts",
      "section_title": true,
      "zh-CHS": "11.3. 子块模式上下文"
    },
    {
      "indent": 3,
      "text": "The coding of subblock modes in key frames uses the modes already coded for the subblocks to the left of and above the subblock to select a probability array for decoding the current subblock mode. This is our first instance of contextual prediction, and there are several caveats associated with it:",
      "zh-CHS": "关键帧中的子块模式的编码使用已经为子块左侧和上方的子块编码的模式来选择用于解码当前子块模式的概率阵列。这是我们的第一个上下文预测实例，有几个与之相关的注意事项："
    },
    {
      "indent": 3,
      "text": "1. The adjacency relationships between subblocks are based on the normal default raster placement of the subblocks.",
      "zh-CHS": "1. 子块之间的邻接关系基于子块的正常默认光栅放置。"
    },
    {
      "indent": 3,
      "text": "2. The adjacent subblocks need not lie in the current macroblock. The subblocks to the left of the left-edge subblocks 0, 4, 8, and 12 are the right-edge subblocks 3, 7, 11, and 15, respectively, of the (already coded) macroblock immediately to the left. Similarly, the subblocks above the top-edge subblocks 0, 1, 2, and 3 are the bottom-edge subblocks 12, 13, 14, and 15 of the already-coded macroblock immediately above us.",
      "zh-CHS": "2. 相邻子块不必位于当前宏块中。左边缘子块0、4、8和12左侧的子块分别是紧靠左侧的（已编码的）宏块的右边缘子块3、7、11和15。类似地，上边缘子块0、1、2和3上方的子块是紧挨着我们上方的已编码宏块的下边缘子块12、13、14和15。"
    },
    {
      "indent": 3,
      "text": "3. For macroblocks on the top row or left edge of the image, some of the predictors will be non-existent. Such predictors are taken to have had the value B_DC_PRED, which, perhaps conveniently, takes the value 0 in the enumeration above. A simple management scheme for these contexts might maintain a row of above predictors and four left predictors. Before decoding the frame, the entire row is initialized to B_DC_PRED; before decoding each row of macroblocks, the four left predictors are also set to B_DC_PRED. After decoding a macroblock, the bottom four subblock modes are copied into the row predictor (at the current position, which then advances to be above the next macroblock), and the right four subblock modes are copied into the left predictor.",
      "zh-CHS": "3. 对于图像顶行或左边缘的宏块，某些预测器将不存在。这些预测值被认为具有值B_DC_PRED，这可能很方便，在上面的枚举中取值0。对于这些上下文，一个简单的管理方案可能会维护一行上述预测器和四个左预测器。在解码帧之前，整行被初始化为B_DC_PRED；在解码每行宏块之前，四个左预测器也被设置为B_DC_PRED。解码宏块后，将底部的四个子块模式复制到行预测器中（在当前位置，然后前进到下一个宏块的上方），并将右侧的四个子块模式复制到左侧预测器中。"
    },
    {
      "indent": 3,
      "text": "4. Many macroblocks will of course be coded using a 16x16 luma prediction mode. For the purpose of predicting ensuing subblock modes (only), such macroblocks derive a subblock mode, constant throughout the macroblock, from the 16x16 luma mode as follows: DC_PRED uses B_DC_PRED, V_PRED uses B_VE_PRED, H_PRED uses B_HE_PRED, and TM_PRED uses B_TM_PRED.",
      "zh-CHS": "4. 当然，许多宏块将使用16x16 luma预测模式进行编码。为了预测随后的子块模式（仅限），此类宏块从16x16 luma模式导出整个宏块恒定的子块模式，如下所示：DC_PRED使用B_DC_PRED，V_PRED使用B_VE_PRED，H_PRED使用B_HE_PRED，TM_PRED使用B_TM_PRED。"
    },
    {
      "indent": 3,
      "text": "5. Although we discuss interframe modes in Section 16, we remark here that, while interframes do use all the intra-coding modes described here and below, the subblock modes in an interframe are coded using a single constant probability array that does not depend on any context.",
      "zh-CHS": "5. 尽管我们在第16节中讨论了帧间模式，但我们在这里指出，虽然帧间确实使用这里和下面描述的所有帧内编码模式，但帧间中的子块模式使用不依赖于任何上下文的单个恒定概率数组进行编码。"
    },
    {
      "indent": 3,
      "text": "The dependence of subblock mode probability on the nearby subblock mode context is most easily handled using a three-dimensional constant array:",
      "zh-CHS": "子块模式概率对附近子块模式上下文的依赖性最容易使用三维常量数组处理："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob kf_bmode_prob [num_intra_bmodes] [num_intra_bmodes] [num_intra_bmodes-1];",
      "zh-CHS": "const Prob kf_bmode_Prob[num_intra_bmodes][num_intra_bmodes][num_intra_bmodes][num_intra_bmodes-1]；"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The outer two dimensions of this array are indexed by the already-coded subblock modes above and to the left of the current block, respectively. The inner dimension is a typical tree probability list whose indices correspond to the even indices of the bmode_tree above. The mode for the j^(th) luma subblock is then",
      "zh-CHS": "此数组的外部二维分别由当前块上方和左侧已编码的子块模式索引。内维是一个典型的树概率列表，其索引对应于上面bmode_树的偶数索引。然后，j^（th）luma子块的模式为"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Bmode = (intra_bmode) treed_read(d, bmode_tree, kf_bmode_prob\n  [A] [L]);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where the 4x4 Y subblock index j varies from 0 to 15 in raster order, and A and L are the modes used above and to the left of the j^(th) subblock.",
      "zh-CHS": "其中，4x4 Y子块索引j按光栅顺序从0到15变化，A和L是上面和j^（th）子块左侧使用的模式。"
    },
    {
      "indent": 3,
      "text": "The contents of the kf_bmode_prob array are given at the end of this section.",
      "zh-CHS": "kf_bmode_prob数组的内容在本节末尾给出。"
    },
    {
      "indent": 0,
      "text": "11.4. Chroma Modes",
      "section_title": true,
      "zh-CHS": "11.4. 色度模式"
    },
    {
      "indent": 3,
      "text": "After the Y mode (and optional subblock mode) specification comes the chroma mode. The chroma modes are a subset of the Y modes and are coded using the uv_mode_tree, as described in Section 8 and repeated here for convenience:",
      "zh-CHS": "在Y模式（和可选子块模式）规范之后是色度模式。色度模式是Y模式的子集，并使用uv_模式_树进行编码，如第8节所述，为方便起见，在此重复："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index uv_mode_tree [2 * (num_uv_modes - 1)] =\n{\n -DC_PRED, 2,           /* root: DC_PRED = \"0\", \"1\" subtree */\n  -V_PRED, 4,           /* \"1\" subtree:  V_PRED = \"10\",\n                           \"11\" subtree */\n   -H_PRED, -TM_PRED    /* \"11\" subtree: H_PRED = \"110\",\n                           TM_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "As for the Y modes (in a key frame), the chroma modes are coded using a fixed, contextless probability table:",
      "zh-CHS": "对于Y模式（在关键帧中），色度模式使用固定的、无上下文的概率表进行编码："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob kf_uv_mode_prob [num_uv_modes - 1] = { 142, 114, 183};\nuv_mode = (intra_mbmode) treed_read(d, uv_mode_tree,\n  kf_uv_mode_prob);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "This completes the description of macroblock prediction coding for key frames. As will be discussed in Section 16, the coding of intra modes within interframes is similar, but not identical, to that described here (and in the reference code) for prediction modes and, indeed, for all tree-coded data in VP8.",
      "zh-CHS": "这就完成了对关键帧的宏块预测编码的描述。如将在第16节中讨论的，帧间内模式的编码与此处（和参考代码中）针对预测模式以及VP8中的所有树编码数据描述的编码相似，但不相同。"
    },
    {
      "indent": 0,
      "text": "11.5. Subblock Mode Probability Table",
      "section_title": true,
      "zh-CHS": "11.5. 子块模式概率表"
    },
    {
      "indent": 3,
      "text": "Finally, here is the fixed probability table used to decode subblock modes in key frames.",
      "zh-CHS": "最后，这里是用于解码关键帧中的子块模式的固定概率表。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob kf_bmode_prob [num_intra_bmodes] [num_intra_bmodes]\n  [num_intra_bmodes-1] =\n{\n  {\n    { 231, 120,  48,  89, 115, 113, 120, 152, 112},\n    { 152, 179,  64, 126, 170, 118,  46,  70,  95},\n    { 175,  69, 143,  80,  85,  82,  72, 155, 103},\n    {  56,  58,  10, 171, 218, 189,  17,  13, 152},\n    { 144,  71,  10,  38, 171, 213, 144,  34,  26},\n    { 114,  26,  17, 163,  44, 195,  21,  10, 173},\n    { 121,  24,  80, 195,  26,  62,  44,  64,  85},\n    { 170,  46,  55,  19, 136, 160,  33, 206,  71},\n    {  63,  20,   8, 114, 114, 208,  12,   9, 226},\n    {  81,  40,  11,  96, 182,  84,  29,  16,  36}\n  },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "{\n  { 134, 183,  89, 137,  98, 101, 106, 165, 148},\n  {  72, 187, 100, 130, 157, 111,  32,  75,  80},\n  {  66, 102, 167,  99,  74,  62,  40, 234, 128},\n  {  41,  53,   9, 178, 241, 141,  26,   8, 107},\n  { 104,  79,  12,  27, 217, 255,  87,  17,   7},\n  {  74,  43,  26, 146,  73, 166,  49,  23, 157},\n  {  65,  38, 105, 160,  51,  52,  31, 115, 128},\n  {  87,  68,  71,  44, 114,  51,  15, 186,  23},\n  {  47,  41,  14, 110, 182, 183,  21,  17, 194},\n  {  66,  45,  25, 102, 197, 189,  23,  18,  22}\n},\n{\n  {  88,  88, 147, 150,  42,  46,  45, 196, 205},\n  {  43,  97, 183, 117,  85,  38,  35, 179,  61},\n  {  39,  53, 200,  87,  26,  21,  43, 232, 171},\n  {  56,  34,  51, 104, 114, 102,  29,  93,  77},\n  { 107,  54,  32,  26,  51,   1,  81,  43,  31},\n  {  39,  28,  85, 171,  58, 165,  90,  98,  64},\n  {  34,  22, 116, 206,  23,  34,  43, 166,  73},\n  {  68,  25, 106,  22,  64, 171,  36, 225, 114},\n  {  34,  19,  21, 102, 132, 188,  16,  76, 124},\n  {  62,  18,  78,  95,  85,  57,  50,  48,  51}\n},\n{\n  { 193, 101,  35, 159, 215, 111,  89,  46, 111},\n  {  60, 148,  31, 172, 219, 228,  21,  18, 111},\n  { 112, 113,  77,  85, 179, 255,  38, 120, 114},\n  {  40,  42,   1, 196, 245, 209,  10,  25, 109},\n  { 100,  80,   8,  43, 154,   1,  51,  26,  71},\n  {  88,  43,  29, 140, 166, 213,  37,  43, 154},\n  {  61,  63,  30, 155,  67,  45,  68,   1, 209},\n  { 142,  78,  78,  16, 255, 128,  34, 197, 171},\n  {  41,  40,   5, 102, 211, 183,   4,   1, 221},\n  {  51,  50,  17, 168, 209, 192,  23,  25,  82}\n},\n{\n  { 125,  98,  42,  88, 104,  85, 117, 175,  82},\n  {  95,  84,  53,  89, 128, 100, 113, 101,  45},\n  {  75,  79, 123,  47,  51, 128,  81, 171,   1},\n  {  57,  17,   5,  71, 102,  57,  53,  41,  49},\n  { 115,  21,   2,  10, 102, 255, 166,  23,   6},\n  {  38,  33,  13, 121,  57,  73,  26,   1,  85},\n  {  41,  10,  67, 138,  77, 110,  90,  47, 114},\n  { 101,  29,  16,  10,  85, 128, 101, 196,  26},\n  {  57,  18,  10, 102, 102, 213,  34,  20,  43},\n  { 117,  20,  15,  36, 163, 128,  68,   1,  26}\n},",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "{\n  { 138,  31,  36, 171,  27, 166,  38,  44, 229},\n  {  67,  87,  58, 169,  82, 115,  26,  59, 179},\n  {  63,  59,  90, 180,  59, 166,  93,  73, 154},\n  {  40,  40,  21, 116, 143, 209,  34,  39, 175},\n  {  57,  46,  22,  24, 128,   1,  54,  17,  37},\n  {  47,  15,  16, 183,  34, 223,  49,  45, 183},\n  {  46,  17,  33, 183,   6,  98,  15,  32, 183},\n  {  65,  32,  73, 115,  28, 128,  23, 128, 205},\n  {  40,   3,   9, 115,  51, 192,  18,   6, 223},\n  {  87,  37,   9, 115,  59,  77,  64,  21,  47}\n},\n{\n  { 104,  55,  44, 218,   9,  54,  53, 130, 226},\n  {  64,  90,  70, 205,  40,  41,  23,  26,  57},\n  {  54,  57, 112, 184,   5,  41,  38, 166, 213},\n  {  30,  34,  26, 133, 152, 116,  10,  32, 134},\n  {  75,  32,  12,  51, 192, 255, 160,  43,  51},\n  {  39,  19,  53, 221,  26, 114,  32,  73, 255},\n  {  31,   9,  65, 234,   2,  15,   1, 118,  73},\n  {  88,  31,  35,  67, 102,  85,  55, 186,  85},\n  {  56,  21,  23, 111,  59, 205,  45,  37, 192},\n  {  55,  38,  70, 124,  73, 102,   1,  34,  98}\n},\n{\n  { 102,  61,  71,  37,  34,  53,  31, 243, 192},\n  {  69,  60,  71,  38,  73, 119,  28, 222,  37},\n  {  68,  45, 128,  34,   1,  47,  11, 245, 171},\n  {  62,  17,  19,  70, 146,  85,  55,  62,  70},\n  {  75,  15,   9,   9,  64, 255, 184, 119,  16},\n  {  37,  43,  37, 154, 100, 163,  85, 160,   1},\n  {  63,   9,  92, 136,  28,  64,  32, 201,  85},\n  {  86,   6,  28,   5,  64, 255,  25, 248,   1},\n  {  56,   8,  17, 132, 137, 255,  55, 116, 128},\n  {  58,  15,  20,  82, 135,  57,  26, 121,  40}\n},\n{\n  { 164,  50,  31, 137, 154, 133,  25,  35, 218},\n  {  51, 103,  44, 131, 131, 123,  31,   6, 158},\n  {  86,  40,  64, 135, 148, 224,  45, 183, 128},\n  {  22,  26,  17, 131, 240, 154,  14,   1, 209},\n  {  83,  12,  13,  54, 192, 255,  68,  47,  28},\n  {  45,  16,  21,  91,  64, 222,   7,   1, 197},\n  {  56,  21,  39, 155,  60, 138,  23, 102, 213},\n  {  85,  26,  85,  85, 128, 128,  32, 146, 171},\n  {  18,  11,   7,  63, 144, 171,   4,   4, 246},\n  {  35,  27,  10, 146, 174, 171,  12,  26, 128}\n},",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  {\n    { 190,  80,  35,  99, 180,  80, 126,  54,  45},\n    {  85, 126,  47,  87, 176,  51,  41,  20,  32},\n    { 101,  75, 128, 139, 118, 146, 116, 128,  85},\n    {  56,  41,  15, 176, 236,  85,  37,   9,  62},\n    { 146,  36,  19,  30, 171, 255,  97,  27,  20},\n    {  71,  30,  17, 119, 118, 255,  17,  18, 138},\n    { 101,  38,  60, 138,  55,  70,  43,  26, 142},\n    { 138,  45,  61,  62, 219,   1,  81, 188,  64},\n    {  32,  41,  20, 117, 151, 142,  20,  21, 163},\n    { 112,  19,  12,  61, 195, 128,  48,   4,  24}\n  }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "12. Intraframe Prediction",
      "section_title": true,
      "zh-CHS": "12. 帧内预测"
    },
    {
      "indent": 3,
      "text": "Intraframe prediction uses already-coded macroblocks within the current frame to approximate the contents of the current macroblock. It applies to intra-coded macroblocks in an interframe and to all macroblocks in a key frame.",
      "zh-CHS": "帧内预测使用当前帧内已编码的宏块来近似当前宏块的内容。它适用于帧间中的帧内编码宏块和关键帧中的所有宏块。"
    },
    {
      "indent": 3,
      "text": "Relative to the current macroblock \"M\", the already-coded macroblocks include all macroblocks above M together with the macroblocks on the same row as, and to the left of, M, though at most four of these macroblocks are actually used: the block \"A\" directly above M, the blocks immediately to the left and right of A, and the block immediately to the left of M.",
      "zh-CHS": "相对于当前宏块“M”，已经编码的宏块包括M上方的所有宏块以及与M同一行且在M左侧的宏块，尽管实际使用的这些宏块中最多有四个：直接在M上方的块“A”、紧靠M左右的块，和M左边的街区。"
    },
    {
      "indent": 3,
      "text": "Each of the prediction modes (i.e., means of extrapolation from already-calculated values) uses fairly simple arithmetic on pixel values whose positions, relative to the current position, are defined by the mode.",
      "zh-CHS": "每个预测模式（即，从已经计算的值外推的手段）对像素值使用相当简单的算法，其相对于当前位置的位置由模式定义。"
    },
    {
      "indent": 3,
      "text": "The chroma (U and V) and luma (Y) predictions are independent of each other.",
      "zh-CHS": "色度（U和V）和亮度（Y）预测相互独立。"
    },
    {
      "indent": 3,
      "text": "The relative addressing of pixels applied to macroblocks on the upper row or left column of the frame will sometimes cause pixels outside the visible frame to be referenced. Usually such out-of-bounds pixels have an assumed value of 129 for pixels to the left of the leftmost column of the visible frame and 127 for pixels above the top row of the visible frame (including the special case of the pixel above and to the left of the top-left pixel in the visible frame). Exceptions to this (associated to certain modes) will be noted below.",
      "zh-CHS": "应用于帧的上行或左列上的宏块的像素的相对寻址有时会导致引用可见帧之外的像素。通常，对于可见帧最左列左侧的像素，此类越界像素的假设值为129，对于可见帧顶行上方的像素，此类越界像素的假设值为127（包括可见帧中左上像素上方和左侧的像素的特殊情况）。以下将说明例外情况（与某些模式相关）。"
    },
    {
      "indent": 3,
      "text": "The already-coded macroblocks referenced by intra-prediction have been \"reconstructed\", that is, have been predicted and residue-adjusted (as described in Section 14), but have not been loop-filtered. While it does process the edges between individual macroblocks and individual subblocks, loop filtering (described in Section 15) is applied to the frame as a whole, after all of the macroblocks have been reconstructed.",
      "zh-CHS": "帧内预测所引用的已经编码的宏块已经被“重构”，也就是说，已经被预测和残余调整（如第14节所述），但是没有被循环滤波。虽然它确实处理各个宏块和各个子块之间的边缘，但是在所有宏块都被重构之后，循环滤波（在第15节中描述）被应用于作为一个整体的帧。"
    },
    {
      "indent": 0,
      "text": "12.1. mb_skip_coeff",
      "section_title": true,
      "zh-CHS": "12.1. mb_skip_coeff"
    },
    {
      "indent": 3,
      "text": "The single bool flag is decoded using prob_skip_false if and only if mb_no_skip_coeff is set to 1 (see Sections 9.10 and 9.11). If mb_no_skip_coeff is set to 0, then this value defaults to 0.",
      "zh-CHS": "当且仅当mb_no_skip_coeff设置为1时（见第9.10节和第9.11节），使用prob_skip_false对单个bool标志进行解码。如果mb_no_skip_coeff设置为0，则该值默认为0。"
    },
    {
      "indent": 0,
      "text": "12.2. Chroma Prediction",
      "section_title": true,
      "zh-CHS": "12.2. 色度预测"
    },
    {
      "indent": 3,
      "text": "The chroma prediction is a little simpler than the luma prediction, so we treat it first. Each of the chroma modes treats U and V identically; that is, the U and V prediction values are calculated in parallel, using the same relative addressing and arithmetic in each of the two planes.",
      "zh-CHS": "色度预测比亮度预测简单一点，所以我们先处理它。每个色度模式都相同地处理U和V；也就是说，U和V预测值是并行计算的，在两个平面的每个平面中使用相同的相对寻址和算法。"
    },
    {
      "indent": 3,
      "text": "The modes extrapolate prediction values using the 8-pixel row \"A\" lying immediately above the block (that is, the bottom chroma row of the macroblock immediately above the current macroblock) and the 8-pixel column \"L\" immediately to the left of the block (that is, the rightmost chroma column of the macroblock immediately to the left of the current macroblock).",
      "zh-CHS": "模式使用紧靠块上方的8像素行“A”（即，紧靠当前宏块上方的宏块的底部色度行）和紧靠块左侧的8像素列“L”来外推预测值（即，紧靠当前宏块左侧的宏块最右边的色度列）。"
    },
    {
      "indent": 3,
      "text": "Vertical prediction (chroma mode V_PRED) simply fills each 8-pixel row of the 8x8 chroma block with a copy of the \"above\" row (A). If the current macroblock lies on the top row of the frame, all 8 of the pixel values in A are assigned the value 127.",
      "zh-CHS": "垂直预测（色度模式V_PRED）仅用“以上”行（a）的副本填充8x8色度块的每个8像素行。如果当前宏块位于帧的顶行上，则A中的所有8个像素值被分配值127。"
    },
    {
      "indent": 3,
      "text": "Similarly, horizontal prediction (H_PRED) fills each 8-pixel column of the 8x8 chroma block with a copy of the \"left\" column (L). If the current macroblock is in the left column of the frame, all 8 pixel values in L are assigned the value 129.",
      "zh-CHS": "类似地，水平预测（H_PRED）用“左”列（L）的副本填充8x8色度块的每个8像素列。如果当前宏块在帧的左列中，则L中的所有8个像素值被分配值129。"
    },
    {
      "indent": 3,
      "text": "DC prediction (DC_PRED) fills the 8x8 chroma block with a single value. In the generic case of a macroblock lying below the top row and right of the leftmost column of the frame, this value is the average of the 16 (genuinely visible) pixels in the (union of the) above row A and left column L.",
      "zh-CHS": "直流预测（DC_PRED）用单个值填充8x8色度块。在一般情况下，宏块位于帧的顶行和最左列的右侧下方，该值是行a和左列L上方（并集）的16个（真正可见）像素的平均值。"
    },
    {
      "indent": 3,
      "text": "Otherwise, if the current macroblock lies on the top row of the frame, the average of the 8 pixels in L is used; if it lies in the left column of the frame, the average of the 8 pixels in A is used.",
      "zh-CHS": "否则，如果当前宏块位于帧的顶行上，则使用L中的8个像素的平均值；如果它位于帧的左列，则使用A中8个像素的平均值。"
    },
    {
      "indent": 3,
      "text": "Note that the averages used in these exceptional cases are not the same as those that would be arrived at by using the out-of-bounds A and L values defined for V_PRED and H_PRED. In the case of the leftmost macroblock on the top row of the frame, the 8x8 block is simply filled with the constant value 128.",
      "zh-CHS": "请注意，这些例外情况下使用的平均值与使用为V_PRED和H_PRED定义的越界A和L值得出的平均值不同。对于帧顶行最左侧的宏块，8x8块仅用常量值128填充。"
    },
    {
      "indent": 3,
      "text": "For DC_PRED, apart from the exceptional case of the top-left macroblock, we are averaging either 16 or 8 pixel values to get a single prediction value that fills the 8x8 block. The rounding is done as follows:",
      "zh-CHS": "对于DC_PRED，除了左上宏块的例外情况外，我们对16或8个像素值进行平均，以获得填充8x8块的单个预测值。四舍五入操作如下："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int sum;  /* sum of 8 or 16 pixels at (at least) 16-bit precision */\nint shf;  /* base 2 logarithm of the number of pixels (3 or 4) */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel DCvalue = (sum + (1 << (shf-1))) >> shf;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Because the summands are all valid pixels, no \"clamp\" is necessary in the calculation of DCvalue.",
      "zh-CHS": "由于总和都是有效像素，因此在计算DCvalue时不需要“钳制”。"
    },
    {
      "indent": 3,
      "text": "The remaining \"True Motion\" (TM_PRED) chroma mode gets its name from an older technique of video compression used by On2 Technologies, to which it bears some relation. In addition to the row \"A\" and column \"L\", TM_PRED uses the pixel \"P\" above and to the left of the chroma block.",
      "zh-CHS": "剩下的“真实运动”（TM_PRED）色度模式的名称来自On2 Technologies使用的一种较旧的视频压缩技术，与此有一定关系。除了行“A”和列“L”之外，TM_PRED使用色度块上方和左侧的像素“P”。"
    },
    {
      "indent": 3,
      "text": "The following figure gives an example of how TM_PRED works:",
      "zh-CHS": "下图给出了TM_PRED如何工作的示例："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| P   | A0  | A1  | A2  | A3  | A4  | A5  | A6  | A7  |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L0  | X00 | X01 | X02 | X03 | X04 | X05 | X06 | X07 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L1  | X10 | X11 | X12 | X13 | X14 | X15 | X16 | X17 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L2  | X20 | X21 | X22 | X23 | X24 | X25 | X26 | X27 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L3  | X30 | X31 | X32 | X33 | X34 | X35 | X36 | X37 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L4  | X40 | X41 | X42 | X43 | X44 | X45 | X46 | X47 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L5  | X50 | X51 | X52 | X53 | X54 | X55 | X56 | X57 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L6  | X60 | X61 | X62 | X63 | X64 | X65 | X66 | X67 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|\n| L7  | X70 | X71 | X72 | X73 | X74 | X75 | X76 | X77 |\n|-----|-----|-----|-----|-----|-----|-----|-----|-----|",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where P, As, and Ls represent reconstructed pixel values from previously coded blocks, and X00 through X77 represent predicted values for the current block. TM_PRED uses the following equation to calculate X_ij:",
      "zh-CHS": "其中P、As和Ls表示来自先前编码块的重构像素值，X00到X77表示当前块的预测值。TM_PRED使用以下方程式计算X_ij："
    },
    {
      "indent": 3,
      "text": "X_ij = L_i + A_j - P (i, j=0, 1, 2, 3)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The exact algorithm is as follows:",
      "zh-CHS": "具体算法如下："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void TMpred(\n    Pixel b[8][8],      /* chroma (U or V) prediction block */\n    const Pixel A[8],   /* row of already-constructed pixels\n                           above block */\n    const Pixel L[8],   /* column of \"\" just to the left of\n                           block */\n    const Pixel P       /* pixel just to the left of A and\n                           above L*/\n) {\n    int r = 0;          /* row */\n    do {\n        int c = 0;      /* column */\n        do {\n            b[r][c] = clamp255(L[r]+ A[c] - P);\n        } while (++c < 8);\n    } while (++r < 8);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Note that the process could equivalently be described as propagating the vertical differences between pixels in L (starting from P), using the pixels from A to start each column.",
      "zh-CHS": "注意，该过程可以等效地描述为传播L中的像素之间的垂直差异（从P开始），使用A中的像素来开始每个列。"
    },
    {
      "indent": 3,
      "text": "An implementation of chroma intra-prediction may be found in the reference decoder file predict.c (Section 20.14).",
      "zh-CHS": "色度帧内预测的实现可在参考解码器文件predict.c（第20.14节）中找到。"
    },
    {
      "indent": 3,
      "text": "Unlike DC_PRED, for macroblocks on the top row or left edge, TM_PRED does use the out-of-bounds values of 127 and 129 (respectively) defined for V_PRED and H_PRED.",
      "zh-CHS": "与DC_PRED不同，对于顶行或左边缘上的宏块，TM_PRED使用为V_PRED和H_PRED定义的127和129（分别）越界值。"
    },
    {
      "indent": 0,
      "text": "12.3. Luma Prediction",
      "section_title": true,
      "zh-CHS": "12.3. 亮度预测"
    },
    {
      "indent": 3,
      "text": "The prediction processes for the first four 16x16 luma modes (DC_PRED, V_PRED, H_PRED, and TM_PRED) are essentially identical to the corresponding chroma prediction processes described above, the only difference being that we are predicting a single 16x16 luma block instead of two 8x8 chroma blocks.",
      "zh-CHS": "前四个16x16亮度模式（DC_PRED、V_PRED、H_PRED和TM_PRED）的预测过程基本上与上述相应的色度预测过程相同，唯一的区别是我们预测的是一个16x16亮度块而不是两个8x8色度块。"
    },
    {
      "indent": 3,
      "text": "Thus, the row \"A\" and column \"L\" here contain 16 pixels, the DC prediction is calculated using 16 or 32 pixels (and shf is 4 or 5), and we of course fill the entire prediction buffer, that is, 16 rows (or columns) containing 16 pixels each. The reference implementation of 16x16 luma prediction is also in predict.c.",
      "zh-CHS": "因此，这里的行“A”和列“L”包含16个像素，使用16或32个像素计算DC预测（并且shf是4或5），并且我们当然填充整个预测缓冲区，即，16行（或列）每个包含16个像素。16x16 luma预测的参考实现也在predict.c中。"
    },
    {
      "indent": 3,
      "text": "In the remaining luma mode (B_PRED), each 4x4 Y subblock is independently predicted using one of ten modes (listed, along with their encodings, in Section 11).",
      "zh-CHS": "在剩余的luma模式（B_PRED）中，每个4x4 Y子块使用十种模式中的一种进行独立预测（在第11节中列出，以及它们的编码）。"
    },
    {
      "indent": 3,
      "text": "Also, unlike the full-macroblock modes already described, some of the subblock modes use prediction pixels above and to the right of the current subblock. In detail, each 4x4 subblock \"B\" is predicted using (at most) the 4-pixel column \"L\" immediately to the left of B and the 8-pixel row \"A\" immediately above B, consisting of the 4 pixels above B followed by the 4 adjacent pixels above and to the right of B, together with the single pixel \"P\" immediately to the left of A (and immediately above L).",
      "zh-CHS": "此外，与已经描述的全宏块模式不同，一些子块模式使用当前子块上方和右侧的预测像素。具体地说，每个4x4子块“B”使用（最多）紧靠B左侧的4像素列“L”和紧靠B上方的8像素行“A”进行预测，该行由B上方的4个像素和B上方和右侧的4个相邻像素以及紧靠A左侧（紧靠L上方）的单个像素“P”组成。"
    },
    {
      "indent": 3,
      "text": "For the purpose of subblock intra-prediction, the pixels immediately to the left and right of a pixel in a subblock are the same as the pixels immediately to the left and right of the corresponding pixel in the frame buffer \"F\". Vertical offsets behave similarly: The above row A lies immediately above B in F, and the adjacent pixels in the left column L are separated by a single row in F.",
      "zh-CHS": "为了子块内预测的目的，子块中的像素的紧邻左侧和右侧的像素与帧缓冲器“F”中的对应像素的紧邻左侧和右侧的像素相同。垂直偏移的行为类似：上面的行A位于F中B的正上方，左列L中的相邻像素由F中的一行分隔。"
    },
    {
      "indent": 3,
      "text": "Because entire macroblocks (as opposed to their constituent subblocks) are reconstructed in raster-scan order, for subblocks lying along the right edge (and not along the top row) of the current macroblock, the four \"extra\" prediction pixels in A above and to the right of B have not yet actually been constructed.",
      "zh-CHS": "由于以光栅扫描顺序重建整个宏块（与其组成的子块相反），因此对于沿当前宏块的右边缘（而不是沿顶行）的子块，还没有实际构造B的上方和右侧A中的四个“额外”预测像素。"
    },
    {
      "indent": 3,
      "text": "Subblocks 7, 11, and 15 are affected. All three of these subblocks use the same extra pixels as does subblock 3 (at the upper right corner of the macroblock), namely the 4 pixels immediately above and to the right of subblock 3. Writing (R,C) for a frame buffer position offset from the upper left corner of the current macroblock by R rows and C columns, the extra pixels for all the right-edge subblocks (3, 7, 11, and 15) are at positions (-1,16), (-1,17), (-1,18), and (-1,19). For the rightmost macroblock in each macroblock row except the top row, the extra pixels shall use the same value as the pixel at position (-1,15), which is the rightmost visible pixel on the line immediately above the macroblock row. For the top macroblock row, all the extra pixels assume a value of 127.",
      "zh-CHS": "子块7、11和15受到影响。所有这三个子块使用与子块3（在宏块的右上角）相同的额外像素，即子块3正上方和右侧的4个像素。为从当前宏块左上角偏移R行和C列的帧缓冲区位置写入（R，C），所有右边缘子块（3、7、11和15）的额外像素位于位置（-1,16），（-1,17），（-1,18）和（-1,19）。对于除顶行之外的每个宏块行中最右边的宏块，额外像素应使用与位置（-1,15）处的像素相同的值，该位置是宏块行正上方行上最右边的可见像素。对于顶部宏块行，所有额外像素的值均为127。"
    },
    {
      "indent": 3,
      "text": "The details of the prediction modes are most easily described in code.",
      "zh-CHS": "预测模式的细节最容易在代码中描述。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Result pixels are often averages of two or three predictor\n   pixels.  The following subroutines are used to calculate\n   these averages.  Because the arguments are valid pixels, no\n   clamping is necessary.  An actual implementation would\n   probably use inline functions or macros. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Compute weighted average centered at y w/adjacent x, z */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel avg3(Pixel x, Pixel y, Pixel z) {\n  return (x + y + y + z + 2) >> 2;}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Weighted average of 3 adjacent pixels centered at p */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel avg3p(const Pixel *p) { return avg3(p[-1], p[0], p[1]);}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Simple average of x and y */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel avg2(Pixel x, Pixel y) { return (x + y + 1) >> 1;}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Average of p[0] and p[1] may be considered to be a synthetic\n   pixel lying between the two, that is, one half-step past p. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel avg2p(const Pixel *p) { return avg2(p[0], p[1]);}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void subblock_intra_predict(\n    Pixel B[4][4],     /* Y subblock prediction buffer */\n    const Pixel *A,    /* A[0]...A[7] = above row, A[-1] = P */\n    const Pixel *L,    /* L[0]...L[3] = left column, L[-1] = P */\n    intra_bmode mode   /* enum is in Section 11.2 */\n) {\n    Pixel E[9];        /* 9 already-constructed edge pixels */\n    E[0] = L[3];  E[1] = L[2];  E[2] = L[1];  E[3] = L[0];\n    E[4] = A[-1];      /* == L[-1] == P */\n    E[5] = A[0];  E[6] = A[1];  E[7] = A[2];  E[8] = A[3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "switch(mode) {\n  /* First four modes are similar to corresponding\n     full-block modes. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_DC_PRED:\n{\n    int v = 4;      /* DC sum/avg, 4 is rounding adjustment */\n    int i = 0;  do { v += A[i] + L[i];}  while (++i < 4);\n    v >>= 3;        /* averaging 8 pixels */\n    i = 0;  do {    /* fill prediction buffer with constant DC\n                       value */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        int j = 0;  do { B[i][j] = v;}  while (++j < 4);\n    } while (++i < 4);\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_TM_PRED: /* just like 16x16 TM_PRED */\n{\n    int r = 0;  do {\n        int c = 0;  do {\n            B[r][c] = clamp255(L[r] + A[c] - A[-1]);\n        } while (++c < 4);\n    } while (++r < 4);\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_VE_PRED: /* like 16x16 V_PRED except using averages */\n{\n    int c = 0;  do { /* all 4 rows = smoothed top row */\n        B[0][c] = B[1][c] = B[2][c] = B[3][c] = avg3p(A + c);\n    } while (++c < 4);\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_HE_PRED: /* like 16x16 H_PRED except using averages */\n{\n    /* Bottom row is exceptional because L[4] does not exist */\n    int v = avg3(L[2], L[3], L[3]);\n    int r = 3;  while (1) {  /* all 4 columns = smoothed left\n                                column */\n        B[r][0] = B[r][1] = B[r][2] = B[r][3] = v;\n        if (--r < 0)\n            break;\n        v = avg3p(L + r);  /* upper 3 rows use average of\n                               3 pixels */\n    }\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* The remaining six \"diagonal\" modes subdivide the\n   prediction buffer into diagonal lines.  All the pixels\n   on each line are assigned the same value; this value is\n   (a smoothed or synthetic version of) an\n   already-constructed predictor value lying on the same\n   line.  For clarity, in the comments, we express the\n   positions of these predictor pixels relative to the\n   upper left corner of the destination array B.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 10,
      "text": "These modes are unique to subblock prediction and have\nno full-block analogs.  The first two use lines at\n+|- 45 degrees from horizontal (or, equivalently,\nvertical), that is, lines whose slopes are +|- 1. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_LD_PRED:    /* southwest (left and down) step =\n                      (-1, 1) or (1,-1) */\n    /* avg3p(A + j) is the \"smoothed\" pixel at (-1,j) */\n    B[0][0] = avg3p(A + 1);\n    B[0][1] = B[1][0] = avg3p(A + 2);\n    B[0][2] = B[1][1] = B[2][0] = avg3p(A + 3);\n    B[0][3] = B[1][2] = B[2][1] = B[3][0] = avg3p(A + 4);\n    B[1][3] = B[2][2] = B[3][1] = avg3p(A + 5);\n    B[2][3] = B[3][2] = avg3p(A + 6);\n    B[3][3] = avg3(A[6], A[7], A[7]); /* A[8] does not exist */\n    break;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_RD_PRED: /* southeast (right and down) step =\n                   (1,1) or (-1,-1) */\n    B[3][0] = avg3p(E + 1);  /* predictor is from (2, -1) */\n    B[3][1] = B[2][0] = avg3p(E + 2);  /* (1, -1) */\n    B[3][2] = B[2][1] = B[1][0] = avg3p(E + 3);  /* (0, -1) */\n    B[3][3] = B[2][2] = B[1][1] = B[0][0] =\n      avg3p(E + 4);  /* (-1, -1) */\n    B[2][3] = B[1][2] = B[0][1] = avg3p(E + 5);  /* (-1, 0) */\n    B[1][3] = B[0][2] = avg3p(E + 6);  /* (-1, 1) */\n    B[0][3] = avg3p(E + 7);  /* (-1, 2) */\n    break;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* The remaining 4 diagonal modes use lines whose slopes are\n   +|- 2 and +|- 1/2.  The angles of these lines are roughly\n   +|- 27 degrees from horizontal or vertical.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 10,
      "text": "Unlike the 45 degree diagonals, here we often need to\n\"synthesize\" predictor pixels midway between two actual\npredictors using avg2p(p), which we think of as returning\nthe pixel \"at\" p[1/2]. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_VR_PRED:    /* SSE (vertical right) step =\n                      (2,1) or (-2,-1) */\n    B[3][0] = avg3p(E + 2);  /* predictor is from (1, -1) */\n    B[2][0] = avg3p(E + 3);  /* (0, -1) */\n    B[3][1] = B[1][0] = avg3p(E + 4);  /* (-1,   -1) */\n    B[2][1] = B[0][0] = avg2p(E + 4);  /* (-1, -1/2) */\n    B[3][2] = B[1][1] = avg3p(E + 5);  /* (-1,    0) */\n    B[2][2] = B[0][1] = avg2p(E + 5);  /* (-1,  1/2) */\n    B[3][3] = B[1][2] = avg3p(E + 6);  /* (-1,    1) */\n    B[2][3] = B[0][2] = avg2p(E + 6);  /* (-1,  3/2) */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "B[1][3] = avg3p(E + 7);  /* (-1, 2) */\nB[0][3] = avg2p(E + 7);  /* (-1, 5/2) */\nbreak;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_VL_PRED:    /* SSW (vertical left) step =\n                      (2,-1) or (-2,1) */\n    B[0][0] = avg2p(A);  /* predictor is from (-1, 1/2) */\n    B[1][0] = avg3p(A + 1);  /* (-1, 1) */\n    B[2][0] = B[0][1] = avg2p(A + 1);  /* (-1, 3/2) */\n    B[1][1] = B[3][0] = avg3p(A + 2);  /* (-1,   2) */\n    B[2][1] = B[0][2] = avg2p(A + 2);  /* (-1, 5/2) */\n    B[3][1] = B[1][2] = avg3p(A + 3);  /* (-1,   3) */\n    B[2][2] = B[0][3] = avg2p(A + 3);  /* (-1, 7/2) */\n    B[3][2] = B[1][3] = avg3p(A + 4);  /* (-1,   4) */\n    /* Last two values do not strictly follow the pattern. */\n    B[2][3] = avg3p(A + 5);  /* (-1, 5) [avg2p(A + 4) =\n                                 (-1,9/2)] */\n    B[3][3] = avg3p(A + 6);  /* (-1, 6) [avg3p(A + 5) =\n                                 (-1,5)] */\n    break;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_HD_PRED:    /* ESE (horizontal down) step =\n                      (1,2) or (-1,-2) */\n    B[3][0] = avg2p(E);  /* predictor is from (5/2, -1) */\n    B[3][1] = avg3p(E + 1);  /* (2, -1) */\n    B[2][0] = B[3][2] = svg2p(E + 1);  /* ( 3/2, -1) */\n    B[2][1] = B[3][3] = avg3p(E + 2);  /* (   1, -1) */\n    B[2][2] = B[1][0] = avg2p(E + 2);  /* ( 1/2, -1) */\n    B[2][3] = B[1][1] = avg3p(E + 3);  /* (   0, -1) */\n    B[1][2] = B[0][0] = avg2p(E + 3);  /* (-1/2, -1) */\n    B[1][3] = B[0][1] = avg3p(E + 4);  /* (  -1, -1) */\n    B[0][2] = avg3p(E + 5);  /* (-1, 0) */\n    B[0][3] = avg3p(E + 6);  /* (-1, 1) */\n    break;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "case B_HU_PRED:    /* ENE (horizontal up) step = (1,-2)\n                      or (-1,2) */\n    B[0][0] = avg2p(L);  /* predictor is from (1/2, -1) */\n    B[0][1] = avg3p(L + 1);  /* (1, -1) */\n    B[0][2] = B[1][0] = avg2p(L + 1);  /* (3/2, -1) */\n    B[0][3] = B[1][1] = avg3p(L + 2);  /* (  2, -1) */\n    B[1][2] = B[2][0] = avg2p(L + 2);  /* (5/2, -1) */\n    B[1][3] = B[2][1] = avg3(L[2], L[3], L[3]);  /* (3, -1) */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        /* Not possible to follow pattern for much of the bottom\n           row because no (nearby) already-constructed pixels lie\n           on the diagonals in question. */\n        B[2][2] = B[2][3] = B[3][0] = B[3][1] = B[3][2] = B[3][3]\n          = L[3];\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The reference decoder implementation of subblock intra-prediction may be found in predict.c (Section 20.14).",
      "zh-CHS": "子块帧内预测的参考解码器实现可在predict.c（第20.14节）中找到。"
    },
    {
      "indent": 0,
      "text": "13. DCT Coefficient Decoding",
      "section_title": true,
      "zh-CHS": "13. DCT系数解码"
    },
    {
      "indent": 3,
      "text": "The second data partition consists of an encoding of the quantized DCT (and WHT) coefficients of the residue signal. As discussed in the format overview (Section 2), for each macroblock, the residue is added to the (intra- or inter-generated) prediction buffer to produce the final (except for loop filtering) reconstructed macroblock.",
      "zh-CHS": "第二个数据分区由剩余信号的量化DCT（和WHT）系数的编码组成。如格式概述（第2节）中所述，对于每个宏块，将剩余添加到（帧内或帧间生成的）预测缓冲器中，以产生最终（循环滤波除外）重构宏块。"
    },
    {
      "indent": 3,
      "text": "VP8 works exclusively with 4x4 DCTs and WHTs, applied to the 24 (or 25 with the Y2 subblock) 4x4 subblocks of a macroblock. The ordering of macroblocks within any of the \"residue\" partitions in general follows the same raster scan as used in the first \"prediction\" partition.",
      "zh-CHS": "VP8仅适用于4x4 DCT和WHT，应用于宏块的24个（或25个Y2子块）4x4子块。任何“剩余”分区内宏块的排序通常遵循与第一个“预测”分区中使用的相同光栅扫描。"
    },
    {
      "indent": 3,
      "text": "For all intra- and inter-prediction modes apart from B_PRED (intra: whose Y subblocks are independently predicted) and SPLITMV (inter), each macroblock's residue record begins with the Y2 component of the residue, coded using a WHT. B_PRED and SPLITMV coded macroblocks omit this WHT and specify the 0th DCT coefficient in each of the 16 Y subblocks.",
      "zh-CHS": "对于所有帧内和帧间预测模式，除了B_PRED（帧内：其Y子块被独立预测）和SPLITMV（帧间），每个宏块的剩余记录从剩余的Y2分量开始，使用WHT编码。B_PRED和SPLITMV编码宏块省略该WHT，并在16个Y子块中的每个子块中指定第0个DCT系数。"
    },
    {
      "indent": 3,
      "text": "After the optional Y2 block, the residue record continues with 16 DCTs for the Y subblocks, followed by 4 DCTs for the U subblocks, ending with 4 DCTs for the V subblocks. The subblocks occur in the usual order.",
      "zh-CHS": "在可选的Y2块之后，剩余记录继续进行Y子块的16个DCT，接着是U子块的4个DCT，最后是V子块的4个DCT。子块以通常的顺序出现。"
    },
    {
      "indent": 3,
      "text": "The DCTs and WHT are tree-coded using a 12-element alphabet whose members we call \"tokens\". Except for the end-of-block token (which sets the remaining subblock coefficients to zero and is followed by the next block), each token (sometimes augmented with data immediately following the token) specifies the value of the single coefficient at the current (implicit) position and is followed by a token applying to the next (implicit) position.",
      "zh-CHS": "DCT和WHT使用12元素字母表进行树编码，我们称其成员为“标记”。除了块结束标记（将剩余的子块系数设置为零，然后是下一个块）之外，每个标记（有时在标记后面加上数据）在当前（隐式）位置指定单个系数的值，然后是应用于下一个（隐式）位置的标记位置"
    },
    {
      "indent": 3,
      "text": "For all the Y and chroma subblocks, the ordering of the coefficients follows a so-called zig-zag order. DCTs begin at coefficient 1 if Y2 is present, and begin at coefficient 0 if Y2 is absent. The WHT for a Y2 subblock always begins at coefficient 0.",
      "zh-CHS": "对于所有Y和色度子块，系数的顺序遵循所谓的Z字形顺序。如果存在Y2，则DCT从系数1开始，如果不存在Y2，则从系数0开始。Y2子块的WHT始终从系数0开始。"
    },
    {
      "indent": 0,
      "text": "13.1. Macroblock without Non-Zero Coefficient Values",
      "section_title": true,
      "zh-CHS": "13.1. 没有非零系数值的宏块"
    },
    {
      "indent": 3,
      "text": "If the flag within macroblock (MB) MODE_INFO indicates that a macroblock does not have any non-zero coefficients, the decoding process of DCT coefficients is skipped for the macroblock.",
      "zh-CHS": "如果宏块（MB）模式_INFO内的标志指示宏块不具有任何非零系数，则针对该宏块跳过DCT系数的解码过程。"
    },
    {
      "indent": 0,
      "text": "13.2. Coding of Individual Coefficient Values",
      "section_title": true,
      "zh-CHS": "13.2. 单个系数值的编码"
    },
    {
      "indent": 3,
      "text": "The coding of coefficient tokens is the same for the DCT and WHT, and for the remainder of this section \"DCT\" should be taken to mean either DCT or WHT.",
      "zh-CHS": "系数标记的编码对于DCT和WHT是相同的，对于本节的其余部分，“DCT”应表示DCT或WHT。"
    },
    {
      "indent": 3,
      "text": "All tokens (except end-of-block) specify either a single unsigned value or a range of unsigned values (immediately) followed by a simple probabilistic encoding of the offset of the value from the base of that range.",
      "zh-CHS": "所有标记（块末尾除外）指定单个无符号值或一个无符号值范围（立即），然后对该值从该范围底部的偏移量进行简单的概率编码。"
    },
    {
      "indent": 3,
      "text": "Non-zero values (of either type) are then followed by a flag indicating the sign of the coded value (negative if 1, positive if 0).",
      "zh-CHS": "非零值（任何一种类型）后面都会有一个标志，指示编码值的符号（如果为1，则为负，如果为0，则为正）。"
    },
    {
      "indent": 3,
      "text": "Below are the tokens and decoding tree.",
      "zh-CHS": "下面是令牌和解码树。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    DCT_0,      /* value 0 */\n    DCT_1,      /* 1 */\n    DCT_2,      /* 2 */\n    DCT_3,      /* 3 */\n    DCT_4,      /* 4 */\n    dct_cat1,   /* range 5 - 6  (size 2) */\n    dct_cat2,   /* 7 - 10   (4) */\n    dct_cat3,   /* 11 - 18  (8) */\n    dct_cat4,   /* 19 - 34  (16) */\n    dct_cat5,   /* 35 - 66  (32) */\n    dct_cat6,   /* 67 - 2048  (1982) */\n    dct_eob,    /* end of block */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_dct_tokens   /* 12 */\n}\ndct_token;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index coeff_tree [2 * (num_dct_tokens - 1)] =\n{\n -dct_eob, 2,               /* eob = \"0\"   */\n  -DCT_0, 4,                /* 0   = \"10\"  */\n   -DCT_1, 6,               /* 1   = \"110\" */\n    8, 12,\n     -DCT_2, 10,            /* 2   = \"11100\" */\n      -DCT_3, -DCT_4,       /* 3   = \"111010\", 4 = \"111011\" */\n     14, 16,\n      -dct_cat1, -dct_cat2, /* cat1 =  \"111100\",\n                               cat2 = \"111101\" */\n     18, 20,\n      -dct_cat3, -dct_cat4, /* cat3 = \"1111100\",\n                               cat4 = \"1111101\" */\n      -dct_cat5, -dct_cat6  /* cat4 = \"1111110\",\n                               cat4 = \"1111111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "In general, all DCT coefficients are decoded using the same tree. However, if the preceding coefficient is a DCT_0, decoding will skip the first branch, since it is not possible for dct_eob to follow a DCT_0.",
      "zh-CHS": "通常，所有DCT系数都使用同一棵树进行解码。然而，如果前面的系数是DCT_0，则解码将跳过第一个分支，因为DCT_eob不可能跟随DCT_0。"
    },
    {
      "indent": 3,
      "text": "The tokens dct_cat1 ... dct_cat6 specify ranges of unsigned values, the value within the range being formed by adding an unsigned offset (whose width is 1, 2, 3, 4, 5, or 11 bits, respectively) to the base of the range, using the following algorithm and fixed probability tables.",
      "zh-CHS": "令牌dct_cat1。。。dct_cat6指定无符号值的范围，该范围内的值是通过使用以下算法和固定概率表将无符号偏移量（其宽度分别为1、2、3、4、5或11位）添加到范围的基来形成的。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "uint DCTextra(bool_decoder *d, const Prob *p)\n{\n    uint v = 0;\n    do { v += v + read_bool(d, *p);}  while (*++p);\n    return v;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob Pcat1[] = { 159, 0};\nconst Prob Pcat2[] = { 165, 145, 0};\nconst Prob Pcat3[] = { 173, 148, 140, 0};\nconst Prob Pcat4[] = { 176, 155, 140, 135, 0};\nconst Prob Pcat5[] = { 180, 157, 141, 134, 130, 0};\nconst Prob Pcat6[] =\n    { 254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "If v -- the unsigned value decoded using the coefficient tree, possibly augmented by the process above -- is non-zero, its sign is set by simply reading a flag:",
      "zh-CHS": "如果v——使用系数树解码的无符号值（可能通过上述过程增加）为非零，则其符号仅通过读取一个标志来设置："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "if (read_bool(d, 128))\n    v = -v;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "13.3. Token Probabilities",
      "section_title": true,
      "zh-CHS": "13.3. 标记概率"
    },
    {
      "indent": 3,
      "text": "The probability specification for the token tree (unlike that for the \"extra bits\" described above) is rather involved. It uses three pieces of context to index a large probability table, the contents of which may be incrementally modified in the frame header. The full (non-constant) probability table is laid out as follows.",
      "zh-CHS": "令牌树的概率规范（与上述“额外比特”的概率规范不同）相当复杂。它使用三个上下文来索引一个大概率表，其内容可以在帧头中进行增量修改。完整（非常数）概率表如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Prob coeff_probs [4] [8] [3] [num_dct_tokens-1];",
      "zh-CHS": "Prob coeff_probs[4][8][3][num_dct_tokens-1]；"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Working from the outside in, the outermost dimension is indexed by the type of plane being decoded:",
      "zh-CHS": "从外到内工作时，最外层尺寸根据解码的平面类型进行索引："
    },
    {
      "indent": 3,
      "text": "o 0 - Y beginning at coefficient 1 (i.e., Y after Y2)",
      "zh-CHS": "o 0-从系数1开始的Y（即Y2之后的Y）"
    },
    {
      "indent": 3,
      "text": "o 1 - Y2",
      "zh-CHS": "o 1-Y2"
    },
    {
      "indent": 3,
      "text": "o 2 - U or V",
      "zh-CHS": "o 2-U或V"
    },
    {
      "indent": 3,
      "text": "o 3 - Y beginning at coefficient 0 (i.e., Y in the absence of Y2).",
      "zh-CHS": "o 3-从系数0开始的Y（即，在没有Y2的情况下为Y）。"
    },
    {
      "indent": 3,
      "text": "The next dimension is selected by the position of the coefficient being decoded. That position, c, steps by ones up to 15, starting from zero for block types 1, 2, or 3 and starting from one for block type 0. The second array index is then",
      "zh-CHS": "下一个维度由解码系数的位置选择。该位置，c，从1、2或3型块的0开始，从1型块的0开始，逐步递增至15。第二个数组索引是"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "coeff_bands [c]",
      "zh-CHS": "系数带[c]"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where:",
      "zh-CHS": "哪里："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const int coeff_bands [16] = {\n     0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "is a fixed mapping of position to \"band\".",
      "zh-CHS": "是位置到“波段”的固定映射。"
    },
    {
      "indent": 3,
      "text": "The third dimension is the trickiest. Roughly speaking, it measures the \"local complexity\" or extent to which nearby coefficients are non-zero.",
      "zh-CHS": "第三维度是最棘手的。粗略地说，它衡量“局部复杂性”或附近系数非零的程度。"
    },
    {
      "indent": 3,
      "text": "For the first coefficient (DC, unless the block type is 0), we consider the (already encoded) blocks within the same plane (Y2, Y, U, or V) above and to the left of the current block. The context index is then the number (0, 1, or 2) of these blocks that had at least one non-zero coefficient in their residue record. Specifically for Y2, because macroblocks above and to the left may or may not have a Y2 block, the block above is determined by the most recent macroblock in the same column that has a Y2 block, and the block to the left is determined by the most recent macroblock in the same row that has a Y2 block.",
      "zh-CHS": "对于第一系数（DC，除非块类型为0），我们考虑在当前块上方和左侧的同一平面（Y2、Y、U或V）中的（已编码）块。然后，上下文索引是在剩余记录中至少有一个非零系数的这些块的数目（0、1或2）。特别是对于Y2，因为上面和左边的宏块可能有也可能没有Y2块，上面的块由具有Y2块的同一列中的最新宏块确定，左边的块由具有Y2块的同一行中的最新宏块确定。"
    },
    {
      "indent": 3,
      "text": "Beyond the first coefficient, the context index is determined by the absolute value of the most recently decoded coefficient (necessarily within the current block) and is 0 if the last coefficient was a zero, 1 if it was plus or minus one, and 2 if its absolute value exceeded one.",
      "zh-CHS": "在第一个系数之外，上下文索引由最近解码的系数（必须在当前块内）的绝对值确定，如果最后一个系数为零，则上下文索引为0，如果其为正或负1，则上下文索引为1，如果其绝对值超过1，则上下文索引为2。"
    },
    {
      "indent": 3,
      "text": "Note that the intuitive meaning of this measure changes as coefficients are decoded. For example, prior to the first token, a zero means that the neighbors are empty, suggesting that the current block may also be empty. After the first token, because an end-of-block token must have at least one non-zero value before it, a zero means that we just decoded a zero and hence guarantees that a non-zero coefficient will appear later in this block. However, this shift in meaning is perfectly okay because the complete context depends also on the coefficient band (and since band 0 is occupied exclusively by position 0).",
      "zh-CHS": "请注意，随着系数被解码，此度量的直观含义会发生变化。例如，在第一个令牌之前，零表示邻居为空，表明当前块也可能为空。在第一个令牌之后，因为块结束令牌之前必须至少有一个非零值，所以零表示我们刚刚解码了一个零，因此保证非零系数稍后将出现在该块中。然而，这种意义上的转移是完全正确的，因为完整的上下文也取决于系数带（并且因为带0完全被位置0占据）。"
    },
    {
      "indent": 3,
      "text": "As with other contexts used by VP8, the \"neighboring block\" context described here needs a special definition for subblocks lying along the top row or left edge of the frame. These \"non-existent\" predictors above and to the left of the image are simply taken to be empty -- that is, taken to contain no non-zero coefficients.",
      "zh-CHS": "与VP8使用的其他上下文一样，此处描述的“相邻块”上下文需要对位于帧顶行或左边缘的子块进行特殊定义。图像上方和左侧的这些“不存在”预测器被简单地认为是空的——也就是说，不包含非零系数。"
    },
    {
      "indent": 3,
      "text": "The residue decoding of each macroblock then requires, in each of two directions (above and to the left), an aggregate coefficient predictor consisting of a single Y2 predictor, two predictors for each of U and V, and four predictors for Y. In accordance with the scan-ordering of macroblocks, a decoder needs to maintain a single \"left\" aggregate predictor and a row of \"above\" aggregate predictors.",
      "zh-CHS": "然后，每个宏块的剩余解码在两个方向（上方和左侧）的每个方向上都需要一个聚合系数预测器，该预测器由一个Y2预测器、两个U和V预测器以及四个Y预测器组成。根据宏块的扫描顺序，解码器需要保持一个“左”聚合预测值和一行“以上”聚合预测值。"
    },
    {
      "indent": 3,
      "text": "Before decoding any residue, these maintained predictors may simply be cleared, in compliance with the definition of \"non-existent\" prediction. After each block is decoded, the two predictors referenced by the block are replaced with the (empty or non-empty) state of the block, in preparation for the later decoding of the blocks below and to the right of the block just decoded.",
      "zh-CHS": "在解码任何剩余之前，可以根据“不存在”预测的定义，简单地清除这些保持的预测器。在解码每个块之后，由块引用的两个预测器被块的（空或非空）状态替换，以准备稍后解码刚刚解码的块的右下方的块。"
    },
    {
      "indent": 3,
      "text": "The fourth, and final, dimension of the token probability array is of course indexed by (half) the position in the token tree structure, as are all tree probability arrays.",
      "zh-CHS": "令牌概率数组的第四个也是最后一个维度当然是由令牌树结构中的位置（一半）索引的，就像所有树概率数组一样。"
    },
    {
      "indent": 3,
      "text": "The pseudocode below illustrates the decoding process. Note that criteria, functions, etc. delimited with ** are either dependent on decoder architecture or are elaborated on elsewhere in this document.",
      "zh-CHS": "下面的伪码说明了解码过程。请注意，用**分隔的标准、功能等取决于解码器架构，或在本文档其他地方详细说明。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int block[16] = { 0 }; /* current 4x4 block coeffs */\nint firstCoeff = 0;\nint plane;\nint ctx2;\nint ctx3 = 0; /* the 3rd context referred to in above description */\nProb *probTable;\nint token;\nint sign;\nint absValue;\nint extraBits;\nbool prevCoeffWasZero = false;\nbool currentBlockHasCoeffs = false;\n/* base coeff abs values per each category, elem #0 is\n   DCT_VAL_CATEGORY1, * #1 is DCT_VAL_CATEGORY2, etc. */\nint categoryBase[6] = { 5, 7, 11, 19, 35, 67 };",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Determine plane to use */\nif ( **current_block_is_Y2_block** )       plane = 0;\nelse if ( **current_block_is_chroma** )   plane = 2;\nelse if ( **current_macroblock_has_Y2** ) plane = 1;\nelse                                      plane = 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* For luma blocks of a \"Y2 macroblock\" we skip coeff index #0 */\nif ( plane == 1 )\n    firstCoeff++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Determine whether neighbor 4x4 blocks have coefficients.\n   This is dependent on the plane we are currently decoding;\n   i.e., we check only coefficients from the same plane as the\n   current block. */\nif ( **left_neighbor_block_has_coefficients(plane)** )\n    ctx3++;\nif ( **above_neighbor_block_has_coefficients(plane)** )\n    ctx3++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "for( i = firstCoeff; i < 16; ++i )\n{\n    ctx2 = coeff_bands[i];\n    probTable = coeff_probs[plane][ctx2][ctx3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* skip first code (dct_eob) if previous token was DCT_0 */\nif ( prevCoeffWasZero )\n    token = treed_read ( d, **coeff_tree_without_eob**,\n      probTable );\nelse\n    token = treed_read ( d, coeff_tree, probTable );",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if ( token == dct_eob ) break;",
      "zh-CHS": "如果（令牌==dct_eob）中断；"
    },
    {
      "indent": 5,
      "text": "  if ( token != DCT_0 )\n  {\n      currentBlockHasCoeffs = true;\nif ( **token_has_extra_bits(token)** )\n{\n    extraBits = DCTextra( token );\n    absValue =\n        categoryBase[**token_to_cat_index(token)**] +\n  extraBits;\n}\nelse\n{\n    absValue = **token_to_abs_value(token)**;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "sign = read_bool(d, 128);\n      block[i] = sign ? -absValue : absValue;\n  }\n  else\n  {\n      absValue = 0;\n  }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /* Set contexts and stuff for next coeff */\n    if ( absValue == 0 )         ctx3 = 0;\n    else if ( absValue == 1 )   ctx3 = 1;\n    else                        ctx3 = 2;\n    prevCoeffWasZero = true;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Store current block status to decoder internals */\n**block_has_coefficients[currentMb][currentBlock]** =\n  currentBlockHasCoeffs;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "While we have in fact completely described the coefficient decoding procedure, the reader will probably find it helpful to consult the reference implementation, which can be found in the file tokens.c (Section 20.16).",
      "zh-CHS": "虽然我们实际上已经完全描述了系数解码过程，但读者可能会发现参考实现很有帮助，参考实现可以在文件tokens.c（第20.16节）中找到。"
    },
    {
      "indent": 0,
      "text": "13.4. Token Probability Updates",
      "section_title": true,
      "zh-CHS": "13.4. 令牌概率更新"
    },
    {
      "indent": 3,
      "text": "As mentioned above, the token-decoding probabilities may change from frame to frame. After detection of a key frame, they are of course set to their defaults as shown in Section 13.5; this must occur before decoding the remainder of the header, as both key frames and interframes may adjust these probabilities.",
      "zh-CHS": "如上所述，令牌解码概率可以在帧之间改变。在检测到关键帧后，它们当然被设置为第13.5节所示的默认值；这必须在解码报头的其余部分之前发生，因为关键帧和帧间都可以调整这些概率。"
    },
    {
      "indent": 3,
      "text": "The layout and semantics of the coefficient probability update record (Section I of the frame header) are straightforward. For each position in the coeff_probs array there occurs a fixed-probability bool indicating whether or not the corresponding probability should be updated. If the bool is true, there follows a P(8) replacing that probability. Note that updates are cumulative; that is, a probability updated on one frame is in effect for all ensuing frames until the next key frame, or until the probability is explicitly updated by another frame.",
      "zh-CHS": "系数概率更新记录（帧头的第一部分）的布局和语义非常简单。对于coeff_probs阵列中的每个位置，都会出现一个固定的概率bool，指示是否应更新相应的概率。如果布尔值为真，则会有一个P（8）替换该概率。注意，更新是累积的；也就是说，在一帧上更新的概率对所有后续帧有效，直到下一关键帧，或者直到该概率被另一帧显式更新。"
    },
    {
      "indent": 3,
      "text": "The algorithm to effect the foregoing is simple:",
      "zh-CHS": "实现上述目的的算法很简单："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int i = 0;  do {\n int j = 0;  do {\n  int k = 0;  do {\n   int t = 0;  do {",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (read_bool(d, coeff_update_probs [i] [j] [k] [t]))\n    coeff_probs [i] [j] [k] [t] = read_literal(d, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "   } while (++t < num_dct_tokens - 1);\n  } while (++k < 3);\n } while (++j < 8);\n} while (++i < 4);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The (constant) update probabilities are as follows:",
      "zh-CHS": "（恒定）更新概率如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob coeff_update_probs [4] [8] [3] [num_dct_tokens-1] =\n{\n {\n  {\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255},\n   { 250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255},\n   { 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  }\n },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "{\n {\n  { 217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255},\n  { 234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255}\n },\n {\n  { 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n }\n},\n{\n {\n  { 186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255},\n  { 251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255}\n },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": " {\n  { 255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n }\n},\n{\n {\n  { 248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255},\n  { 248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255}\n },\n {\n  { 255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n  { 252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255}\n },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  {\n   { 255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  },\n  {\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n   { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}\n  }\n }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "13.5. Default Token Probability Table",
      "section_title": true,
      "zh-CHS": "13.5. 默认令牌概率表"
    },
    {
      "indent": 3,
      "text": "The default token probabilities are as follows.",
      "zh-CHS": "默认令牌概率如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob default_coeff_probs [4] [8] [3] [num_dct_tokens - 1] =\n{\n {\n  {\n   { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n   { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n   { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n  },\n  {\n   { 253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128},\n   { 189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128},\n   { 106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128}\n  },\n  {\n   {   1,  98, 248, 255, 236, 226, 255, 255, 128, 128, 128},\n   { 181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128},\n   {  78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128}\n  },\n  {\n   {   1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128},\n   { 184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128},\n   {  77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128}\n  },\n  {\n   {   1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128},\n   { 170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128},\n   {  37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128}\n  },\n  {\n   {   1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128},\n   { 207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128},\n   { 102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128}\n  },\n  {\n   {   1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128},\n   { 177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128},\n   {  80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128}\n  },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": " {\n  {   1,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 246,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n }\n},\n{\n {\n  { 198,  35, 237, 223, 193, 187, 162, 160, 145, 155,  62},\n  { 131,  45, 198, 221, 172, 176, 220, 157, 252, 221,   1},\n  {  68,  47, 146, 208, 149, 167, 221, 162, 255, 223, 128}\n },\n {\n  {   1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128},\n  { 184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128},\n  {  81,  99, 181, 242, 176, 190, 249, 202, 255, 255, 128}\n },\n {\n  {   1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128},\n  {  99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128},\n  {  23,  91, 163, 242, 170, 187, 247, 210, 255, 255, 128}\n },\n {\n  {   1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128},\n  { 109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128},\n  {  44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128}\n },\n {\n  {   1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128},\n  {  94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128},\n  {  22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128}\n },\n {\n  {   1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128},\n  { 124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128},\n  {  35,  77, 181, 251, 193, 211, 255, 205, 128, 128, 128}\n },\n {\n  {   1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128},\n  { 121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128},\n  {  45,  99, 188, 251, 195, 217, 255, 224, 128, 128, 128}\n },\n {\n  {   1,   1, 251, 255, 213, 255, 128, 128, 128, 128, 128},\n  { 203,   1, 248, 255, 255, 128, 128, 128, 128, 128, 128},\n  { 137,   1, 177, 255, 224, 255, 128, 128, 128, 128, 128}\n }\n},",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "{\n {\n  { 253,   9, 248, 251, 207, 208, 255, 192, 128, 128, 128},\n  { 175,  13, 224, 243, 193, 185, 249, 198, 255, 255, 128},\n  {  73,  17, 171, 221, 161, 179, 236, 167, 255, 234, 128}\n },\n {\n  {   1,  95, 247, 253, 212, 183, 255, 255, 128, 128, 128},\n  { 239,  90, 244, 250, 211, 209, 255, 255, 128, 128, 128},\n  { 155,  77, 195, 248, 188, 195, 255, 255, 128, 128, 128}\n },\n {\n  {   1,  24, 239, 251, 218, 219, 255, 205, 128, 128, 128},\n  { 201,  51, 219, 255, 196, 186, 128, 128, 128, 128, 128},\n  {  69,  46, 190, 239, 201, 218, 255, 228, 128, 128, 128}\n },\n {\n  {   1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128},\n  { 223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128},\n  { 141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128}\n },\n {\n  {   1,  16, 248, 255, 255, 128, 128, 128, 128, 128, 128},\n  { 190,  36, 230, 255, 236, 255, 128, 128, 128, 128, 128},\n  { 149,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n },\n {\n  {   1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n },\n {\n  {   1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128},\n  { 213,  62, 250, 255, 255, 128, 128, 128, 128, 128, 128},\n  {  55,  93, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n },\n {\n  { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n  { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n }\n},\n{\n {\n  { 202,  24, 213, 235, 186, 191, 220, 160, 240, 175, 255},\n  { 126,  38, 182, 232, 169, 184, 228, 174, 255, 187, 128},\n  {  61,  46, 138, 219, 151, 178, 240, 170, 255, 216, 128}\n },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  {\n   {   1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128},\n   { 166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128},\n   {  39,  77, 162, 232, 172, 180, 245, 178, 255, 255, 128}\n  },\n  {\n   {   1,  52, 220, 246, 198, 199, 249, 220, 255, 255, 128},\n   { 124,  74, 191, 243, 183, 193, 250, 221, 255, 255, 128},\n   {  24,  71, 130, 219, 154, 170, 243, 182, 255, 255, 128}\n  },\n  {\n   {   1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128},\n   { 149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128},\n   {  28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128}\n  },\n  {\n   {   1,  81, 230, 252, 204, 203, 255, 192, 128, 128, 128},\n   { 123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128},\n   {  20,  95, 153, 243, 164, 173, 255, 203, 128, 128, 128}\n  },\n  {\n   {   1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128},\n   { 168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128},\n   {  47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128}\n  },\n  {\n   {   1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128},\n   { 141,  84, 213, 252, 201, 202, 255, 219, 128, 128, 128},\n   {  42,  80, 160, 240, 162, 185, 255, 205, 128, 128, 128}\n  },\n  {\n   {   1,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n   { 244,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n   { 238,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n  }\n }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "14. DCT and WHT Inversion and Macroblock Reconstruction",
      "section_title": true,
      "zh-CHS": "14. DCT和WHT反演与宏块重建"
    },
    {
      "indent": 0,
      "text": "14.1. Dequantization",
      "section_title": true,
      "zh-CHS": "14.1. 去量化"
    },
    {
      "indent": 3,
      "text": "After decoding the DCTs/WHTs as described above, each (quantized) coefficient in each subblock is multiplied by one of six dequantization factors, the choice of factor depending on the plane (Y2, Y, or chroma) and position (DC = coefficient zero, AC = any",
      "zh-CHS": "在如上所述解码dct/wht之后，每个子块中的每个（量化）系数乘以六个去量化因子中的一个，因子的选择取决于平面（Y2、Y或色度）和位置（DC＝系数零，AC＝任意）"
    },
    {
      "indent": 3,
      "text": "other coefficient). If the current macroblock has overridden the quantizer level (as described in Section 10), then the six factors are looked up from two dequantization tables with appropriate scaling and clamping using the single index supplied by the override. Otherwise, the frame-level dequantization factors (as described in Section 9.6) are used. In either case, the multiplies are computed and stored using 16-bit signed integers.",
      "zh-CHS": "其他系数）。如果当前宏块覆盖了量化器级别（如第10节所述），则使用覆盖提供的单个索引，通过适当的缩放和钳位，从两个去量化表中查找六个因子。否则，使用帧级去量化因子（如第9.6节所述）。在这两种情况下，乘法都是使用16位有符号整数计算和存储的。"
    },
    {
      "indent": 3,
      "text": "The two dequantization tables, which may also be found in the reference decoder file dequant_data.h (Section 20.3), are as follows.",
      "zh-CHS": "也可在参考解码器文件dequant_data.h（第20.3节）中找到的两个去量化表如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int dc_qlookup[QINDEX_RANGE] =\n{\n    4,   5,   6,   7,   8,   9,  10,  10,   11,  12,  13,  14,  15,\n   16,  17,  17,  18,  19,  20,  20,  21,   21,  22,  22,  23,  23,\n   24,  25,  25,  26,  27,  28,  29,  30,   31,  32,  33,  34,  35,\n   36,  37,  37,  38,  39,  40,  41,  42,   43,  44,  45,  46,  46,\n   47,  48,  49,  50,  51,  52,  53,  54,   55,  56,  57,  58,  59,\n   60,  61,  62,  63,  64,  65,  66,  67,   68,  69,  70,  71,  72,\n   73,  74,  75,  76,  76,  77,  78,  79,   80,  81,  82,  83,  84,\n   85,  86,  87,  88,  89,  91,  93,  95,   96,  98, 100, 101, 102,\n   104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130,\n   132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157,\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int ac_qlookup[QINDEX_RANGE] =\n{\n    4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,\n   17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,\n   30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,\n   43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n   56,  57,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,\n   80,  82,  84,  86,  88,  90,  92,  94,  96,  98, 100, 102, 104,\n  106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137,\n  140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177,\n  181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229,\n  234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284,\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Lookup values from the above two tables are directly used in the DC and AC coefficients in Y1, respectively. For Y2 and chroma, values from the above tables undergo either scaling or clamping before the multiplies. Details regarding these scaling and clamping processes can be found in related lookup functions in dixie.c (Section 20.4).",
      "zh-CHS": "上述两个表中的查找值分别直接用于Y1中的DC和AC系数。对于Y2和色度，上表中的值在倍增之前进行缩放或钳制。有关这些缩放和夹紧过程的详细信息，请参见dixie.c（第20.4节）中的相关查找函数。"
    },
    {
      "indent": 0,
      "text": "14.2. Inverse Transforms",
      "section_title": true,
      "zh-CHS": "14.2. 逆变换"
    },
    {
      "indent": 3,
      "text": "If the Y2 residue block exists (i.e., the macroblock luma mode is not SPLITMV or B_PRED), it is inverted first (using the inverse WHT) and the element of the result at row i, column j is used as the 0th coefficient of the Y subblock at position (i, j), that is, the Y subblock whose index is (i * 4) + j. As discussed in Section 13, if the luma mode is B_PRED or SPLITMV, the 0th Y coefficients are part of the residue signal for the subblocks themselves.",
      "zh-CHS": "如果Y2剩余块存在（即，宏块luma模式不是SPLITMV或B_PRED），则首先将其反转（使用逆WHT），并且第i行、第j列的结果元素用作位置（i，j）处Y子块的第0个系数，即索引为（i*4）+j的Y子块。如第13节中所讨论的，如果luma模式是B_PRED或SPLITMV，则第0y系数是子块本身的剩余信号的一部分。"
    },
    {
      "indent": 3,
      "text": "In either case, the inverse transforms for the sixteen Y subblocks and eight chroma subblocks are computed next. All 24 of these inversions are independent of each other; their results may (at least conceptually) be stored in 24 separate 4x4 arrays.",
      "zh-CHS": "在这两种情况下，接下来计算十六个Y子块和八个色度子块的逆变换。所有这24种反演都是相互独立的；其结果可能（至少在概念上）存储在24个单独的4x4阵列中。"
    },
    {
      "indent": 3,
      "text": "As is done by the reference decoder, an implementation may wish to represent the prediction and residue buffers as macroblock-sized arrays (that is, a 16x16 Y buffer and two 8x8 chroma buffers). Regarding the inverse DCT implementation given below, this requires a simple adjustment to the address calculation for the resulting residue pixels.",
      "zh-CHS": "如参考解码器所做的，实现可能希望将预测和剩余缓冲器表示为宏块大小的阵列（即，一个16x16y缓冲器和两个8x8色度缓冲器）。关于下面给出的逆DCT实现，这需要对结果剩余像素的地址计算进行简单调整。"
    },
    {
      "indent": 0,
      "text": "14.3. Implementation of the WHT Inversion",
      "section_title": true,
      "zh-CHS": "14.3. WHT反演的实现"
    },
    {
      "indent": 3,
      "text": "As previously discussed (see Sections 2 and 13), for macroblocks encoded using prediction modes other than B_PRED and SPLITMV, the DC values derived from the DCT transform on the 16 Y blocks are collected to construct a 25th block of a macroblock (16 Y, 4 U, 4 V constitute the 24 blocks). This 25th block is transformed using a Walsh-Hadamard transform (WHT).",
      "zh-CHS": "如前所述（参见第2节和第13节），对于使用B_PRED和SPLITMV以外的预测模式编码的宏块，从16 Y块上的DCT变换导出的DC值被收集以构造宏块的第25块（16 Y，4 U，4 V构成24个块）。第25个块使用沃尔什-阿达玛变换（WHT）进行变换。"
    },
    {
      "indent": 3,
      "text": "The inputs to the inverse WHT (that is, the dequantized coefficients), the intermediate \"horizontally detransformed\" signal, and the completely detransformed residue signal are all stored as arrays of 16-bit signed integers.",
      "zh-CHS": "逆WHT（即，去量化系数）、中间“水平去变换”信号和完全去变换的剩余信号的输入都存储为16位有符号整数的阵列。"
    },
    {
      "indent": 3,
      "text": "Following the tradition of specifying bitstream format using the decoding process, we specify the inverse WHT in the decoding process using the following C-style source code:",
      "zh-CHS": "按照使用解码过程指定比特流格式的传统，我们使用以下C风格源代码在解码过程中指定逆WHT："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_short_inv_walsh4x4_c(short *input, short *output)\n{\n  int i;\n  int a1, b1, c1, d1;\n  int a2, b2, c2, d2;\n  short *ip = input;\n  short *op = output;\n  int temp1, temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "for(i=0;i<4;i++)\n{\n  a1 = ip[0] + ip[12];\n  b1 = ip[4] + ip[8];\n  c1 = ip[4] - ip[8];\n  d1 = ip[0] - ip[12];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  op[0] = a1 + b1;\n  op[4] = c1 + d1;\n  op[8] = a1 - b1;\n  op[12]= d1 - c1;\n  ip++;\n  op++;\n}\nip = output;\nop = output;\nfor(i=0;i<4;i++)\n{\n  a1 = ip[0] + ip[3];\n  b1 = ip[1] + ip[2];\n  c1 = ip[1] - ip[2];\n  d1 = ip[0] - ip[3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a2 = a1 + b1;\nb2 = c1 + d1;\nc2 = a1 - b1;\nd2 = d1 - c1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "op[0] = (a2+3)>>3;\nop[1] = (b2+3)>>3;\nop[2] = (c2+3)>>3;\nop[3] = (d2+3)>>3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    ip+=4;\n    op+=4;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "In the case that there is only one non-zero DC value in input, the inverse transform can be simplified to the following:",
      "zh-CHS": "在输入中只有一个非零DC值的情况下，逆变换可简化为："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_short_inv_walsh4x4_1_c(short *input, short *output)\n{\n  int i;\n  int a1;\n  short *op=output;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "a1 = ((input[0] + 3)>>3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  for(i=0;i<4;i++)\n  {\n    op[0] = a1;\n    op[1] = a1;\n    op[2] = a1;\n    op[3] = a1;\n    op+=4;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "It should be noted that a conforming decoder should implement the inverse transform using exactly the same rounding to achieve bit-wise matching output to the output of the process specified by the above C source code.",
      "zh-CHS": "应注意，一致性解码器应使用完全相同的舍入实现逆变换，以实现与上述C源代码指定的过程输出的逐位匹配输出。"
    },
    {
      "indent": 3,
      "text": "The reference decoder WHT inversion may be found in the file idct_add.c (Section 20.8).",
      "zh-CHS": "参考解码器WHT反转可在文件idct_add.c（第20.8节）中找到。"
    },
    {
      "indent": 0,
      "text": "14.4. Implementation of the DCT Inversion",
      "section_title": true,
      "zh-CHS": "14.4. DCT逆变换的实现"
    },
    {
      "indent": 3,
      "text": "All of the DCT inversions are computed in exactly the same way. In principle, VP8 uses a classical 2-D inverse discrete cosine transform, implemented as two passes of 1-D inverse DCT. The 1-D inverse DCT was calculated using a similar algorithm to what was described in [Loeffler]. However, the paper only provided the 8-point and 16-point version of the algorithms, which was adapted by On2 to perform the 4-point 1-D DCT.",
      "zh-CHS": "所有DCT反演的计算方法都完全相同。原则上，VP8使用经典的二维离散余弦逆变换，实现为两次一维逆DCT。使用与[Loeffler]中描述的类似算法计算1-D逆DCT。然而，本文只提供了算法的8点和16点版本，On2对其进行了调整，以执行4点1-D DCT。"
    },
    {
      "indent": 3,
      "text": "Accurate calculation of 1-D DCT of the above algorithm requires infinite precision. VP8 of course can use only a finite-precision approximation. Also, the inverse DCT used by VP8 takes care of normalization of the standard unitary transform; that is, every dequantized coefficient has roughly double the size of the corresponding unitary coefficient. However, at all but the highest datarates, the discrepancy between transmitted and ideal coefficients is due almost entirely to (lossy) compression and not to errors induced by finite-precision arithmetic.",
      "zh-CHS": "上述算法的1-D DCT的精确计算需要无限的精度。VP8当然只能使用有限精度近似值。此外，VP8使用的逆DCT负责标准酉变换的归一化；也就是说，每个去量化系数的大小大约是相应的酉系数的两倍。然而，除了最高的数据速率外，传输系数和理想系数之间的差异几乎完全是由于（有损）压缩，而不是由有限精度算法引起的错误。"
    },
    {
      "indent": 3,
      "text": "The inputs to the inverse DCT (that is, the dequantized coefficients), the intermediate \"horizontally detransformed\" signal, and the completely detransformed residue signal are all stored as arrays of 16-bit signed integers. The details of the computation are as follows.",
      "zh-CHS": "逆DCT（即，去量化系数）、中间“水平去变换”信号和完全去变换的剩余信号的输入都存储为16位有符号整数的数组。计算的细节如下。"
    },
    {
      "indent": 3,
      "text": "It should also be noted that this implementation makes use of the 16-bit fixed-point version of two multiplication constants:",
      "zh-CHS": "还应注意，此实现使用两个乘法常数的16位定点版本："
    },
    {
      "indent": 3,
      "text": "sqrt(2) * cos (pi/8)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "sqrt(2) * sin (pi/8)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Because the first constant is bigger than 1, to maintain the same 16-bit fixed-point precision as the second one, we make use of the fact that",
      "zh-CHS": "由于第一个常数大于1，为了保持与第二个常数相同的16位定点精度，我们利用以下事实："
    },
    {
      "indent": 3,
      "text": "x * a = x + x*(a-1)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "therefore",
      "zh-CHS": "因此"
    },
    {
      "indent": 3,
      "text": "x * sqrt(2) * cos (pi/8) = x + x * (sqrt(2) * cos(pi/8)-1)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* IDCT implementation */\nstatic const int cospi8sqrt2minus1=20091;\nstatic const int sinpi8sqrt2      =35468;\nvoid short_idct4x4llm_c(short *input, short *output, int pitch)\n{\n  int i;\n  int a1, b1, c1, d1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "short *ip=input;\nshort *op=output;\nint temp1, temp2;\nint shortpitch = pitch>>1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "for(i=0;i<4;i++)\n{\n  a1 = ip[0]+ip[8];\n  b1 = ip[0]-ip[8];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp1 = (ip[4] * sinpi8sqrt2)>>16;\ntemp2 = ip[12]+((ip[12] * cospi8sqrt2minus1)>>16);\nc1 = temp1 - temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp1 = ip[4] + ((ip[4] * cospi8sqrt2minus1)>>16);\ntemp2 = (ip[12] * sinpi8sqrt2)>>16;\nd1 = temp1 + temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "op[shortpitch*0] = a1+d1;\nop[shortpitch*3] = a1-d1;\nop[shortpitch*1] = b1+c1;\nop[shortpitch*2] = b1-c1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  ip++;\n  op++;\n}\nip = output;\nop = output;\nfor(i=0;i<4;i++)\n{\n  a1 = ip[0]+ip[2];\n  b1 = ip[0]-ip[2];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp1 = (ip[1] * sinpi8sqrt2)>>16;\ntemp2 = ip[3]+((ip[3] * cospi8sqrt2minus1)>>16);\nc1 = temp1 - temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp1 = ip[1] + ((ip[1] * cospi8sqrt2minus1)>>16);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp2 = (ip[3] * sinpi8sqrt2)>>16;\nd1 = temp1 + temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "op[0] = (a1+d1+4)>>3;\nop[3] = (a1-d1+4)>>3;\nop[1] = (b1+c1+4)>>3;\nop[2] = (b1-c1+4)>>3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    ip+=shortpitch;\n    op+=shortpitch;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The reference decoder DCT inversion may be found in the file idct_add.c (Section 20.8).",
      "zh-CHS": "参考解码器DCT反转可在文件idct_add.c（第20.8节）中找到。"
    },
    {
      "indent": 0,
      "text": "14.5. Summation of Predictor and Residue",
      "section_title": true,
      "zh-CHS": "14.5. 预测器与残差之和"
    },
    {
      "indent": 3,
      "text": "Finally, the prediction and residue signals are summed to form the reconstructed macroblock, which, except for loop filtering (taken up next), completes the decoding process.",
      "zh-CHS": "最后，将预测信号和残差信号相加，形成重构宏块，除循环滤波（下一步）外，完成解码过程。"
    },
    {
      "indent": 3,
      "text": "The summing procedure is fairly straightforward, having only a couple of details. The prediction and residue buffers are both arrays of 16-bit signed integers. Each individual (Y, U, and V pixel) result is calculated first as a 32-bit sum of the prediction and residue, and is then saturated to 8-bit unsigned range (using, say, the clamp255 function defined above) before being stored as an 8-bit unsigned pixel value.",
      "zh-CHS": "求和过程相当简单，只有几个细节。预测和剩余缓冲区都是16位有符号整数的数组。每个单独的（Y、U和V像素）结果首先作为预测和残差的32位和进行计算，然后在存储为8位无符号像素值之前，饱和到8位无符号范围（例如，使用上面定义的clamp255函数）。"
    },
    {
      "indent": 3,
      "text": "VP8 also supports a mode where the encoding of a bitstream guarantees all reconstructed pixel values between 0 and 255; compliant bitstreams of such requirements have the clamp_type bit in the frame header set to 1. In such a case, the clamp255 function is no longer required.",
      "zh-CHS": "VP8还支持一种模式，其中比特流的编码保证所有重建像素值在0到255之间；此类要求的兼容比特流将帧头中的clamp_类型比特设置为1。在这种情况下，不再需要clamp255功能。"
    },
    {
      "indent": 3,
      "text": "The summation process is the same, regardless of the (intra or inter) mode of prediction in effect for the macroblock. The reference decoder implementation of reconstruction may be found in the file idct_add.c.",
      "zh-CHS": "求和过程是相同的，而与宏块的有效预测模式（帧内或帧间）无关。重构的参考解码器实现可以在文件idct_add.c中找到。"
    },
    {
      "indent": 0,
      "text": "15. Loop Filter",
      "section_title": true,
      "zh-CHS": "15. 环路滤波器"
    },
    {
      "indent": 3,
      "text": "Loop filtering is the last stage of frame reconstruction and the next-to-last stage of the decoding process. The loop filter is applied to the entire frame after the summation of predictor and residue signals, as described in Section 14.",
      "zh-CHS": "环路滤波是帧重建的最后一个阶段，也是解码过程的下一个到最后一个阶段。如第14节所述，在预测器信号和剩余信号求和之后，将环路滤波器应用于整个帧。"
    },
    {
      "indent": 3,
      "text": "The purpose of the loop filter is to eliminate (or at least reduce) visually objectionable artifacts associated with the semi-independence of the coding of macroblocks and their constituent subblocks.",
      "zh-CHS": "环路滤波器的目的是消除（或至少减少）与宏块及其组成子块的编码的半独立性相关联的视觉上令人不快的伪影。"
    },
    {
      "indent": 3,
      "text": "As was discussed in Section 5, the loop filter is \"integral\" to decoding, in that the results of loop filtering are used in the prediction of subsequent frames. Consequently, a functional decoder implementation must perform loop filtering exactly as described here. This is distinct from any postprocessing that may be applied only to the image immediately before display; such postprocessing is entirely at the option of the implementor (and/or user) and has no effect on decoding per se.",
      "zh-CHS": "如第5节所述，环路滤波器与解码是“积分”的，因为环路滤波的结果用于后续帧的预测。因此，功能解码器实现必须完全按照此处所述执行循环滤波。这不同于仅在显示之前应用于图像的任何后处理；这种后处理完全由实现者（和/或用户）选择，对解码本身没有影响。"
    },
    {
      "indent": 3,
      "text": "The baseline frame-level parameters controlling the loop filter are defined in the frame header (Section 9.4) along with a mechanism for adjustment based on a macroblock's prediction mode and/or reference frame. The first is a flag (filter_type) selecting the type of filter (normal or simple); the other two are numbers (loop_filter_level and sharpness_level) that adjust the strength or sensitivity of the filter. As described in Sections 9.3 and 10, loop_filter_level may also be overridden on a per-macroblock basis using segmentation.",
      "zh-CHS": "控制环路滤波器的基线帧级参数在帧头（第9.4节）中定义，以及基于宏块的预测模式和/或参考帧的调整机制。第一个是选择过滤器类型（普通或简单）的标志（过滤器类型）；另外两个是数字（环路滤波器电平和锐度电平），用于调整滤波器的强度或灵敏度。如第9.3节和第10节所述，还可以使用分段在每个宏块的基础上覆盖循环过滤器级别。"
    },
    {
      "indent": 3,
      "text": "Loop filtering is one of the more computationally intensive aspects of VP8 decoding. This is the reason for the existence of the optional, less-demanding simple filter type.",
      "zh-CHS": "环路滤波是VP8解码的计算密集型方面之一。这就是存在可选、要求较低的简单过滤器类型的原因。"
    },
    {
      "indent": 3,
      "text": "Note carefully that loop filtering must be skipped entirely if loop_filter_level at either the frame header level or macroblock override level is 0. In no case should the loop filter be run with a value of 0; it should instead be skipped.",
      "zh-CHS": "请注意，如果帧头级别或宏块覆盖级别的循环过滤器级别为0，则必须完全跳过循环过滤。在任何情况下，循环过滤器的运行值均不得为0；应该跳过它。"
    },
    {
      "indent": 3,
      "text": "We begin by discussing the aspects of loop filtering that are independent of the controlling parameters and type of filter chosen.",
      "zh-CHS": "我们首先讨论环路滤波的各个方面，这些方面与所选择的控制参数和滤波器类型无关。"
    },
    {
      "indent": 0,
      "text": "15.1. Filter Geometry and Overall Procedure",
      "section_title": true,
      "zh-CHS": "15.1. 过滤器几何结构和总体程序"
    },
    {
      "indent": 3,
      "text": "The Y, U, and V planes are processed independently and identically.",
      "zh-CHS": "Y、U和V平面分别进行相同的处理。"
    },
    {
      "indent": 3,
      "text": "The loop filter acts on the edges between adjacent macroblocks and on the edges between adjacent subblocks of a macroblock. All such edges are horizontal or vertical. For each pixel position on an edge, a small number (two or three) of pixels adjacent to either side of the position are examined and possibly modified. The displacements of these pixels are at a right angle to the edge orientation; that is, for a horizontal edge, we treat the pixels immediately above and below the edge position, and for a vertical edge, we treat the pixels immediately to the left and right of the edge.",
      "zh-CHS": "循环滤波器作用于相邻宏块之间的边缘和宏块的相邻子块之间的边缘。所有这些边缘都是水平或垂直的。对于边缘上的每个像素位置，检查并可能修改与该位置任一侧相邻的少量（两个或三个）像素。这些像素的位移与边缘方向成直角；也就是说，对于水平边缘，我们处理边缘位置正上方和正下方的像素，对于垂直边缘，我们处理边缘左右两侧的像素。"
    },
    {
      "indent": 3,
      "text": "We call this collection of pixels associated to an edge position a segment; the length of a segment is 2, 4, 6, or 8. Excepting that the normal filter uses slightly different algorithms for, and either filter may apply different control parameters to, the edges between macroblocks and those between subblocks, the treatment of edges is quite uniform: All segments straddling an edge are treated identically; there is no distinction between the treatment of horizontal and vertical edges, whether between macroblocks or between subblocks.",
      "zh-CHS": "我们将与边缘位置相关联的像素集合称为一段；线段的长度为2、4、6或8。除了普通滤波器对宏块之间的边和子块之间的边使用略微不同的算法，并且任一滤波器可以对宏块之间的边和子块之间的边应用不同的控制参数外，对边的处理是相当一致的：横跨边的所有段都被相同地处理；无论是宏块之间还是子块之间，水平边缘和垂直边缘的处理都没有区别。"
    },
    {
      "indent": 3,
      "text": "As a consequence, adjacent subblock edges within a macroblock may be concatenated and processed in their entirety. There is a single 8-pixel-long vertical edge horizontally centered in each of the U and V blocks (the concatenation of upper and lower 4-pixel edges between chroma subblocks), and three 16-pixel-long vertical edges at horizontal positions 1/4, 1/2, and 3/4 the width of the luma macroblock, each representing the concatenation of four 4-pixel sub-edges between pairs of Y subblocks.",
      "zh-CHS": "结果，宏块内的相邻子块边缘可以全部连接和处理。在每个U和V块中水平居中有一个8像素长的垂直边（色度子块之间的上下4像素边的串联），在亮度宏块宽度的水平位置1/4、1/2和3/4处有三个16像素长的垂直边，每个表示Y子块对之间四个4像素子边的串联。"
    },
    {
      "indent": 3,
      "text": "The macroblocks comprising the frame are processed in the usual raster-scan order. Each macroblock is \"responsible for\" the inter-macroblock edges immediately above and to the left of it (but not the edges below and to the right of it), as well as the edges between its subblocks.",
      "zh-CHS": "构成帧的宏块按照通常的光栅扫描顺序进行处理。每个宏块“负责”其正上方和左侧的宏块间边缘（但不负责其下方和右侧的边缘），以及其子块之间的边缘。"
    },
    {
      "indent": 3,
      "text": "For each macroblock M, there are four filtering steps, which are, (almost) in order:",
      "zh-CHS": "对于每个宏块M，有四个过滤步骤，其顺序为（几乎）："
    },
    {
      "indent": 3,
      "text": "1. If M is not on the leftmost column of macroblocks, filter across the left (vertical) inter-macroblock edge of M.",
      "zh-CHS": "1. 如果M不在宏块的最左侧列上，则在M的左侧（垂直）宏块间边缘进行过滤。"
    },
    {
      "indent": 3,
      "text": "2. Filter across the vertical subblock edges within M.",
      "zh-CHS": "2. 过滤M内的垂直子块边缘。"
    },
    {
      "indent": 3,
      "text": "3. If M is not on the topmost row of macroblocks, filter across the top (horizontal) inter-macroblock edge of M.",
      "zh-CHS": "3. 如果M不在宏块的最顶层行，则在M的顶部（水平）宏块间边缘进行过滤。"
    },
    {
      "indent": 3,
      "text": "4. Filter across the horizontal subblock edges within M.",
      "zh-CHS": "4. 过滤M内的水平子块边缘。"
    },
    {
      "indent": 3,
      "text": "We write MY, MU, and MV for the planar constituents of M, that is, the 16x16 luma block, 8x8 U block, and 8x8 V block comprising M.",
      "zh-CHS": "我们为M的平面成分编写MY、MU和MV，即16x16 luma块、8x8 U块和包含M的8x8 V块。"
    },
    {
      "indent": 3,
      "text": "In step 1, for each of the three blocks MY, MU, and MV, we filter each of the (16 luma or 8 chroma) segments straddling the column separating the block from the block immediately to the left of it, using the inter-macroblock filter and controls associated to the loop_filter_level and sharpness_level.",
      "zh-CHS": "在步骤1中，对于三个块MY、MU和MV中的每一个，我们使用宏块间过滤器和与loop_filter_level和sharpness_level相关联的控件，过滤横跨将块与其左侧块分离的列的每个（16 luma或8色度）段。"
    },
    {
      "indent": 3,
      "text": "In step 4, we filter across the (three luma and one each for U and V) vertical subblock edges described above, this time using the inter-subblock filter and controls.",
      "zh-CHS": "在步骤4中，我们过滤上述垂直子块边缘（三个luma，每个luma用于U和V），这次使用子块间过滤器和控件。"
    },
    {
      "indent": 3,
      "text": "Steps 2 and 4 are skipped for macroblocks that satisfy both of the following two conditions:",
      "zh-CHS": "对于同时满足以下两个条件的宏块，跳过步骤2和4："
    },
    {
      "indent": 3,
      "text": "1. Macroblock coding mode is neither B_PRED nor SPLITMV; and",
      "zh-CHS": "1. 宏块编码模式既不是B_PRED也不是SPLITMV；和"
    },
    {
      "indent": 3,
      "text": "2. There is no DCT coefficient coded for the whole macroblock.",
      "zh-CHS": "2. 整个宏块没有DCT系数编码。"
    },
    {
      "indent": 3,
      "text": "For these macroblocks, loop filtering for edges between subblocks internal to a macroblock is effectively skipped. This skip strategy significantly reduces VP8 loop-filtering complexity.",
      "zh-CHS": "对于这些宏块，有效地跳过宏块内部子块之间的边的循环过滤。这种跳过策略显著降低了VP8循环过滤的复杂性。"
    },
    {
      "indent": 3,
      "text": "Edges between macroblocks and those between subblocks are treated with different control parameters (and, in the case of the normal filter, with different algorithms). Except for pixel addressing, there is no distinction between the treatment of vertical and horizontal edges. Luma edges are always 16 pixels long, chroma edges are always 8 pixels long, and the segments straddling an edge are treated identically; this of course facilitates vector processing.",
      "zh-CHS": "宏块之间的边缘和子块之间的边缘用不同的控制参数处理（在普通滤波器的情况下，用不同的算法处理）。除了像素寻址，垂直和水平边缘的处理没有区别。亮度边缘始终为16像素长，色度边缘始终为8像素长，跨边的线段处理相同；这当然有助于向量处理。"
    },
    {
      "indent": 3,
      "text": "Because many pixels belong to segments straddling two or more edges, and so will be filtered more than once, the order in which edges are processed given above must be respected by any implementation. Within a single edge, however, the segments straddling that edge are disjoint, and the order in which these segments are processed is immaterial.",
      "zh-CHS": "由于许多像素属于跨越两条或多条边的线段，因此将被多次过滤，因此任何实现都必须遵守上面给出的边处理顺序。但是，在一条边内，跨越该边的线段是不相交的，处理这些线段的顺序无关紧要。"
    },
    {
      "indent": 3,
      "text": "Before taking up the filtering algorithms themselves, we should emphasize a point already made: Even though the pixel segments associated to a macroblock are antecedent to the macroblock (that is, lie within the macroblock or in already-constructed macroblocks), a",
      "zh-CHS": "在讨论过滤算法本身之前，我们应该强调已经提出的一点：即使与宏块相关联的像素段在宏块之前（即，位于宏块内或在已经构造的宏块中），但是"
    },
    {
      "indent": 3,
      "text": "macroblock must not be filtered immediately after its \"reconstruction\" (described in Section 14). Rather, the loop filter applies after all the macroblocks have been \"reconstructed\" (i.e., had their predictor summed with their residue); correct decoding is predicated on the fact that already-constructed portions of the current frame referenced via intra-prediction (described in Section 12) are not yet filtered.",
      "zh-CHS": "宏块“重建”后不得立即过滤（如第14节所述）。相反，在所有宏块都已“重建”（即，将其预测器与其余数求和）之后应用循环滤波器；正确解码的前提是，通过帧内预测（在第12节中描述）引用的当前帧的已经构造的部分尚未被过滤。"
    },
    {
      "indent": 0,
      "text": "15.2. Simple Filter",
      "section_title": true,
      "zh-CHS": "15.2. 简单过滤器"
    },
    {
      "indent": 3,
      "text": "Having described the overall procedure of, and pixels affected by, the loop filter, we turn our attention to the treatment of individual segments straddling edges. We begin by describing the simple filter, which, as the reader might guess, is somewhat simpler than the normal filter.",
      "zh-CHS": "在描述了环路滤波器的整体过程和受其影响的像素之后，我们将注意力转向处理跨越边缘的各个分段。我们首先描述简单过滤器，正如读者可能猜测的那样，它比普通过滤器稍微简单一些。"
    },
    {
      "indent": 3,
      "text": "Note that the simple filter only applies to luma edges. Chroma edges are left unfiltered.",
      "zh-CHS": "请注意，简单过滤器仅适用于luma边。色度边缘未经过滤。"
    },
    {
      "indent": 3,
      "text": "Roughly speaking, the idea of loop filtering is, within limits, to reduce the difference between pixels straddling an edge. Differences in excess of a threshold (associated to the loop_filter_level) are assumed to be \"natural\" and are unmodified; differences below the threshold are assumed to be artifacts of quantization and the (partially) separate coding of blocks, and are reduced via the procedures described below. While the loop_filter_level is in principle arbitrary, the levels chosen by a VP8 compressor tend to be correlated to quantizer levels.",
      "zh-CHS": "粗略地说，循环过滤的思想是在一定范围内减少跨越边缘的像素之间的差异。超过阈值的差异（与环路滤波器电平相关）被认为是“自然”的且未经修改；低于阈值的差异被假定为量化的伪影和块的（部分）单独编码，并且通过下面描述的过程被减少。虽然环路滤波器电平原则上是任意的，但VP8压缩器选择的电平往往与量化器电平相关。"
    },
    {
      "indent": 3,
      "text": "Most of the filtering arithmetic is done using 8-bit signed operands (having a range of -128 to +127, inclusive), supplemented by 16-bit temporaries holding results of multiplies.",
      "zh-CHS": "大多数滤波算法都是使用8位有符号操作数（范围为-128到+127，包括-128到+127）完成的，并辅之以保存乘法结果的16位临时操作数。"
    },
    {
      "indent": 3,
      "text": "Sums and other temporaries need to be \"clamped\" to a valid signed 8-bit range:",
      "zh-CHS": "总和和其他临时值需要“钳制”到有效的有符号8位范围："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int8 c(int v)\n{\n    return (int8) (v < -128 ? -128 : (v < 128 ? v : 127));\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Since pixel values themselves are unsigned 8-bit numbers, we need to convert between signed and unsigned values:",
      "zh-CHS": "由于像素值本身是无符号8位数字，我们需要在有符号值和无符号值之间进行转换："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Convert pixel value (0 <= v <= 255) to an 8-bit signed\n   number. */\nint8 u2s(Pixel v) { return (int8) (v - 128);}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Clamp, then convert signed number back to pixel value. */\nPixel s2u(int v) { return (Pixel) (c(v) + 128);}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Filtering is often predicated on absolute-value thresholds. The following function is the equivalent of the standard library function abs, whose prototype is found in the standard header file stdlib.h. For us, the argument v is always the difference between two pixels and lies in the range -255 <= v <= +255.",
      "zh-CHS": "过滤通常基于绝对值阈值。以下函数相当于标准库函数abs，其原型可在标准头文件stdlib.h中找到。对于我们来说，参数v始终是两个像素之间的差值，并且位于-255<=v<=255的范围内。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int abs(int v) { return v < 0?  -v : v;}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "An actual implementation would of course use inline functions or macros to accomplish these trivial procedures (which are used by both the normal and simple loop filters). An optimal implementation would probably express them in machine language, perhaps using single instruction, multiple data (SIMD) vector instructions. On many SIMD processors, the saturation accomplished by the above clamping function is often folded into the arithmetic instructions themselves, obviating the explicit step taken here.",
      "zh-CHS": "实际的实现当然会使用内联函数或宏来完成这些琐碎的过程（普通循环过滤器和简单循环过滤器都使用这些过程）。一个最佳的实现可能会用机器语言来表达它们，可能会使用单指令多数据（SIMD）向量指令。在许多SIMD处理器上，通过上述箝位函数实现的饱和通常被折叠到算术指令本身中，从而避免了此处采取的显式步骤。"
    },
    {
      "indent": 3,
      "text": "To simplify the specification of relative pixel positions, we use the word \"before\" to mean \"immediately above\" (for a vertical segment straddling a horizontal edge) or \"immediately to the left of\" (for a horizontal segment straddling a vertical edge), and the word \"after\" to mean \"immediately below\" or \"immediately to the right of\".",
      "zh-CHS": "为了简化对相对像素位置的说明，我们使用“before”一词表示“紧上方”（对于横跨水平边缘的垂直段）或“紧靠左侧”（对于横跨垂直边缘的水平段），使用“after”一词表示“紧靠下方”或“紧靠右侧”。"
    },
    {
      "indent": 3,
      "text": "Given an edge, a segment, and a limit value, the simple loop filter computes a value based on the four pixels that straddle the edge (two either side). If that value is below a supplied limit, then, very roughly speaking, the two pixel values are brought closer to each other, \"shaving off\" something like a quarter of the difference. The",
      "zh-CHS": "给定一条边、一个段和一个限制值，简单循环过滤器将基于横跨该边的四个像素（两边各两个）计算一个值。如果该值低于提供的限制，那么，非常粗略地说，这两个像素值彼此更接近，“去除”大约四分之一的差异。这个"
    },
    {
      "indent": 3,
      "text": "same procedure is used for all segments straddling any type of edge, regardless of the nature (inter-macroblock, inter-subblock, luma, or chroma) of the edge; only the limit value depends on the edge type.",
      "zh-CHS": "对于跨越任何类型边缘的所有段，无论边缘的性质（宏块间、子块间、亮度或色度）如何，都使用相同的程序；仅限值取决于边类型。"
    },
    {
      "indent": 3,
      "text": "The exact procedure (for a single segment) is as follows; the subroutine common_adjust is used by both the simple filter presented here and the normal filters discussed in Section 15.3.",
      "zh-CHS": "具体程序（针对单个管段）如下所示：；这里介绍的简单滤波器和第15.3节讨论的普通滤波器都使用了子程序common_adjust。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int8 common_adjust(\n    int use_outer_taps,   /* filter is 2 or 4 taps wide */\n    const Pixel *P1,    /* pixel before P0 */\n    Pixel *P0,          /* pixel before edge */\n    Pixel *Q0,          /* pixel after edge */\n    const Pixel *Q1     /* pixel after Q0 */\n) {\n    cint8 p1 = u2s(*P1);   /* retrieve and convert all 4 pixels */\n    cint8 p0 = u2s(*P0);\n    cint8 q0 = u2s(*Q0);\n    cint8 q1 = u2s(*Q1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Disregarding clamping, when \"use_outer_taps\" is false,\n   \"a\" is 3*(q0-p0).  Since we are about to divide \"a\" by\n   8, in this case we end up multiplying the edge\n   difference by 5/8.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 10,
      "text": "When \"use_outer_taps\" is true (as for the simple filter),\n\"a\" is p1 - 3*p0 + 3*q0 - q1, which can be thought of as\na refinement of 2*(q0 - p0), and the adjustment is\nsomething like (q0 - p0)/4. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "int8 a = c((use_outer_taps? c(p1 - q1) : 0) + 3*(q0 - p0));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* b is used to balance the rounding of a/8 in the case where\n   the \"fractional\" part \"f\" of a/8 is exactly 1/2. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "cint8 b = (c(a + 3)) >> 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Divide a by 8, rounding up when f >= 1/2.\n   Although not strictly part of the C language,\n   the right shift is assumed to propagate the sign bit. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a = c(a + 4) >> 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Subtract \"a\" from q0, \"bringing it closer\" to p0. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "*Q0 = s2u(q0 - a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Add \"a\" (with adjustment \"b\") to p0, \"bringing it closer\"\n   to q0.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 10,
      "text": "The clamp of \"a+b\", while present in the reference decoder,\nis superfluous; we have -16 <= a <= 15 at this point. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "*P0 = s2u(p0 + b);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return a;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void simple_segment(\n    uint8 edge_limit,   /* do nothing if edge difference\n                           exceeds limit */\n    const Pixel *P1,    /* pixel before P0 */\n    Pixel *P0,          /* pixel before edge */\n    Pixel *Q0,          /* pixel after edge */\n    const Pixel *Q1     /* pixel after Q0 */\n) {\n    if ((abs(*P0 - *Q0)*2 + abs(*P1 - *Q1)/2) <= edge_limit))\n        common_adjust(1, P1, P0, Q0, Q1);   /* use outer taps */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "We make a couple of remarks about the rounding procedure above. When b is zero (that is, when the \"fractional part\" of a is not 1/2), we are (except for clamping) adding the same number to p0 as we are subtracting from q0. This preserves the average value of p0 and q0, but the resulting difference between p0 and q0 is always even; in particular, the smallest non-zero gradation +-1 is not possible here.",
      "zh-CHS": "我们对上述四舍五入程序作几点评论。当b为零时（即，当a的“分数部分”不是1/2时），我们（除了钳位）向p0添加的数字与从q0中减去的数字相同。这保留了p0和q0的平均值，但由此产生的p0和q0之间的差异始终是均匀的；特别是，此处不可能出现最小的非零灰度+-1。"
    },
    {
      "indent": 3,
      "text": "When b is one, the value we add to p0 (again except for clamping) is one less than the value we are subtracting from q0. In this case, the resulting difference is always odd (and the small gradation +-1 is possible), but the average value is reduced by 1/2, yielding, for instance, a very slight darkening in the luma plane. (In the very unlikely event of appreciable darkening after a large number of interframes, a compressor would of course eventually compensate for this in the selection of predictor and/or residue.)",
      "zh-CHS": "当b为1时，我们加在p0上的值（同样，除了箝位）比我们从q0中减去的值小1。在这种情况下，产生的差异总是奇数（并且小灰度+-1是可能的），但是平均值减少1/2，例如，在亮度平面中产生非常轻微的变暗。（在大量帧后出现明显变暗的极不可能的情况下，压缩机当然最终会在预测器和/或残差的选择中对此进行补偿。）"
    },
    {
      "indent": 3,
      "text": "The derivation of the edge_limit value used above, which depends on the loop_filter_level and sharpness_level, as well as the type of edge being processed, will be taken up after we describe the normal loop filtering algorithm below.",
      "zh-CHS": "在我们描述了下面的正常循环滤波算法后，将开始推导上面使用的边缘极限值，该极限值取决于循环滤波水平和锐度水平，以及正在处理的边缘类型。"
    },
    {
      "indent": 0,
      "text": "15.3. Normal Filter",
      "section_title": true,
      "zh-CHS": "15.3. 普通滤波器"
    },
    {
      "indent": 3,
      "text": "The normal loop filter is a refinement of the simple loop filter; all of the general discussion above applies here as well. In particular, the functions c, u2s, s2u, abs, and common_adjust are used by both the normal and simple filters.",
      "zh-CHS": "普通环路滤波器是简单环路滤波器的改进；上面所有的一般性讨论也适用于这里。特别是，普通和简单滤波器都使用功能c、u2s、s2u、abs和common_adjust。"
    },
    {
      "indent": 3,
      "text": "As mentioned above, the normal algorithms for inter-macroblock and inter-subblock edges differ. Nonetheless, they have a great deal in common: They use similar threshold algorithms to disable the filter and to detect high internal edge variance (which influences the filtering algorithm). Both algorithms also use, at least conditionally, the simple filter adjustment procedure described above.",
      "zh-CHS": "如上所述，宏块间和子块间边缘的常规算法不同。尽管如此，它们有很多共同点：它们使用类似的阈值算法来禁用过滤器并检测较高的内部边缘方差（这会影响过滤算法）。这两种算法还至少有条件地使用上述简单的滤波器调整程序。"
    },
    {
      "indent": 3,
      "text": "The common thresholding algorithms are as follows.",
      "zh-CHS": "常用的阈值算法如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* All functions take (among other things) a segment (of length\n   at most 4 + 4 = 8) symmetrically straddling an edge.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 6,
      "text": "The pixel values (or pointers) are always given in order,\nfrom the \"beforemost\" to the \"aftermost\".  So, for a\nhorizontal edge (written \"|\"), an 8-pixel segment would be\nordered p3 p2 p1 p0 | q0 q1 q2 q3. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Filtering is disabled if the difference between any two\n   adjacent \"interior\" pixels in the 8-pixel segment exceeds\n   the relevant threshold (I).  A more complex thresholding\n   calculation is done for the group of four pixels that\n   straddle the edge, in line with the calculation in\n   simple_segment() above. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int filter_yes(\n    uint8 I,        /* limit on interior differences */\n    uint8 E,        /* limit at the edge */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    cint8 p3, cint8 p2, cint8 p1, cint8 p0, /* pixels before\n                                               edge */\n    cint8 q0, cint8 q1, cint8 q2, cint8 q3  /* pixels after\n                                               edge */\n) {\n    return  (abs(p0 - q0)*2 + abs(p1 - q1)/2) <= E\n        &&  abs(p3 - p2) <= I  &&  abs(p2 - p1) <= I  &&\n          abs(p1 - p0) <= I\n        &&  abs(q3 - q2) <= I  &&  abs(q2 - q1) <= I  &&\n          abs(q1 - q0) <= I;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Filtering is altered if (at least) one of the differences\n   on either side of the edge exceeds a threshold (we have\n   \"high edge variance\"). */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int hev(\n    uint8 threshold,\n    cint8 p1, cint8 p0, /* pixels before edge */\n    cint8 q0, cint8 q1  /* pixels after edge */\n) {\n    return abs(p1 - p0) > threshold  ||  abs(q1 - q0) > threshold;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The subblock filter is a variant of the simple filter. In fact, if we have high edge variance, the adjustment is exactly as for the simple filter. Otherwise, the simple adjustment (without outer taps) is applied, and the two pixels one step in from the edge pixels are adjusted by roughly half the amount by which the two edge pixels are adjusted; since the edge adjustment here is essentially 3/8 the edge difference, the inner adjustment is approximately 3/16 the edge difference.",
      "zh-CHS": "子块过滤器是简单过滤器的一种变体。事实上，如果我们有很高的边缘方差，调整是完全一样的简单过滤器。否则，应用简单调整（无外部抽头），并且从边缘像素一步进的两个像素被调整大约两个边缘像素被调整的量的一半；因为这里的边缘调整基本上是边缘差的3/8，所以内部调整大约是边缘差的3/16。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void subblock_filter(\n    uint8 hev_threshold,     /* detect high edge variance */\n    uint8 interior_limit,    /* possibly disable filter */\n    uint8 edge_limit,\n    cint8 *P3, cint8 *P2, int8 *P1, int8 *P0,   /* pixels before\n                                                   edge */\n    int8 *Q0, int8 *Q1, cint8 *Q2, cint8 *Q3    /* pixels after\n                                                   edge */\n) {\n    cint8 p3 = u2s(*P3), p2 = u2s(*P2), p1 = u2s(*P1),\n      p0 = u2s(*P0);\n    cint8 q0 = u2s(*Q0), q1 = u2s(*Q1), q2 = u2s(*Q2),\n      q3 = u2s(*Q3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_yes(interior_limit, edge_limit, q3, q2, q1, q0,\n  p0, p1, p2, p3))\n{\n    const int hv = hev(hev_threshold, p1, p0, q0, q1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "cint8 a = (common_adjust(hv, P1, P0, Q0, Q1) + 1) >> 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (!hv) {\n            *Q1 = s2u(q1 - a);\n            *P1 = s2u(p1 + a);\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The inter-macroblock filter has potentially wider scope. If the edge variance is high, it performs the simple adjustment (using the outer taps, just like the simple filter and the corresponding case of the normal subblock filter). If the edge variance is low, we begin with the same basic filter calculation and apply multiples of it to pixel pairs symmetric about the edge; the magnitude of adjustment decays as we move away from the edge and six of the pixels in the segment are affected.",
      "zh-CHS": "宏块间滤波器具有潜在的更大范围。如果边缘方差较高，则执行简单调整（使用外部抽头，就像简单滤波器和正常子块滤波器的相应情况一样）。如果边缘方差较低，我们从相同的基本滤波器计算开始，并将其倍数应用于边缘对称的像素对；当我们离开边缘时，调整的幅度会衰减，并且段中的六个像素会受到影响。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void MBfilter(\n    uint8 hev_threshold,     /* detect high edge variance */\n    uint8 interior_limit,    /* possibly disable filter */\n    uint8 edge_limit,\n    cint8 *P3, int8 *P2, int8 *P1, int8 *P0,  /* pixels before\n                                                 edge */\n    int8 *Q0, int8 *Q1, int8 *Q2, cint8 *Q3   /* pixels after\n                                                 edge */\n) {\n    cint8 p3 = u2s(*P3), p2 = u2s(*P2), p1 = u2s(*P1),\n      p0 = u2s(*P0);\n    cint8 q0 = u2s(*Q0), q1 = u2s(*Q1), q2 = u2s(*Q2),\n      q3 = u2s(*Q3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_yes(interior_limit, edge_limit, q3, q2, q1, q0,\n  p0, p1, p2, p3))\n{\n    if (!hev(hev_threshold, p1, p0, q0, q1))\n    {\n        /* Same as the initial calculation in \"common_adjust\",\n           w is something like twice the edge difference */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "const int8 w = c(c(p1 - q1) + 3*(q0 - p0));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "/* 9/64 is approximately 9/63 = 1/7, and 1<<7 = 128 =\n   2*64.  So this a, used to adjust the pixels adjacent\n   to the edge, is something like 3/7 the edge\n   difference. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "int8 a = c((27*w + 63) >> 7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "*Q0 = s2u(q0 - a);  *P0 = s2u(p0 + a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "/* Next two are adjusted by 2/7 the edge difference */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "a = c((18*w + 63) >> 7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "*Q1 = s2u(q1 - a);  *P1 = s2u(p1 + a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "/* Last two are adjusted by 1/7 the edge difference */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "a = c((9*w + 63) >> 7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "*Q2 = s2u(q2 - a);  *P2 = s2u(p2 + a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        } else                      /* if hev, do simple filter */\n            common_adjust(1, P1, P0, Q0, Q1);   /* using outer\n                                                    taps */\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "15.4. Calculation of Control Parameters",
      "section_title": true,
      "zh-CHS": "15.4. 控制参数的计算"
    },
    {
      "indent": 3,
      "text": "We conclude the discussion of loop filtering by showing how the thresholds supplied to the procedures above are derived from the two control parameters sharpness_level (an unsigned 3-bit number having maximum value 7) and loop_filter_level (an unsigned 6-bit number having maximum value 63).",
      "zh-CHS": "我们通过展示提供给上述过程的阈值是如何从两个控制参数sharpness_level（最大值为7的无符号3位数字）和loop_filter_level（最大值为63的无符号6位数字）导出的，从而结束对循环过滤的讨论。"
    },
    {
      "indent": 3,
      "text": "While the sharpness_level is constant over the frame, individual macroblocks may override the loop_filter_level with one of four possibilities supplied in the frame header (as described in Section 10).",
      "zh-CHS": "虽然锐度_级别在帧上是恒定的，但是单个宏块可以使用帧头中提供的四种可能性之一覆盖循环_过滤器_级别（如第10节所述）。"
    },
    {
      "indent": 3,
      "text": "Both the simple and normal filters disable filtering if a value derived from the four pixels that straddle the edge (2 either side) exceeds a threshold / limit value.",
      "zh-CHS": "如果从横跨边缘（两侧各2个）的四个像素派生的值超过阈值/限制值，则简单过滤器和普通过滤器都会禁用过滤。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Luma and Chroma use the same inter-macroblock edge limit */\nuint8 mbedge_limit = ((loop_filter_level + 2) * 2) +\n  interior_limit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Luma and Chroma use the same inter-subblock edge limit */\nuint8 sub_bedge_limit = (loop_filter_level * 2) + interior_limit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The remaining thresholds are used only by the normal filters. The filter-disabling interior difference limit is the same for all edges (luma, chroma, inter-subblock, inter-macroblock) and is given by the following.",
      "zh-CHS": "其余的阈值仅由普通过滤器使用。禁用过滤器的内部差异限制对于所有边缘（亮度、色度、子块间、宏块间）都是相同的，如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "uint8 interior_limit = loop_filter_level;",
      "zh-CHS": "uint8内部\\u限值=环路\\u过滤器\\u电平；"
    },
    {
      "indent": 3,
      "text": "if (sharpness_level)\n{\n    interior_limit  >>=  sharpness_level > 4 ?  2 : 1;\n    if (interior_limit > 9 - sharpness_level)\n        interior_limit = 9 - sharpness_level;\n}\nif (!interior_limit)\n    interior_limit = 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Finally, we give the derivation of the high edge-variance threshold, which is also the same for all edge types.",
      "zh-CHS": "最后，我们给出了高边缘方差阈值的推导，这对于所有边缘类型也是相同的。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "uint8 hev_threshold = 0;",
      "zh-CHS": "uint8 hev_阈值=0；"
    },
    {
      "indent": 3,
      "text": "if (we_are_decoding_akey_frame)   /* current frame is a key frame */\n{\n    if (loop_filter_level >= 40)\n        hev_threshold = 2;\n    else if (loop_filter_level >= 15)\n        hev_threshold = 1;\n}\nelse                            /* current frame is an interframe */\n{\n    if (loop_filter_level >= 40)\n        hev_threshold = 3;\n    else if (loop_filter_level >= 20)\n        hev_threshold = 2;\n    else if (loop_filter_level >= 15)\n        hev_threshold = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "16. Interframe Macroblock Prediction Records",
      "section_title": true,
      "zh-CHS": "16. 帧间宏块预测记录"
    },
    {
      "indent": 3,
      "text": "We describe the layout and semantics of the prediction records for macroblocks in an interframe.",
      "zh-CHS": "我们描述帧间宏块预测记录的布局和语义。"
    },
    {
      "indent": 3,
      "text": "After the feature specification (which is described in Section 10 and is identical for intraframes and interframes), there comes a Bool(prob_intra), which indicates inter-prediction (i.e., prediction from prior frames) when true and intra-prediction (i.e., prediction from already-coded portions of the current frame) when false. The zero-probability prob_intra is set by field J of the frame header.",
      "zh-CHS": "在特征规范（在第10节中描述并且对于帧内和帧间相同）之后，出现Bool（prob_intra），当为真时指示帧间预测（即，来自先前帧的预测），当为假时指示帧内预测（即，来自当前帧的已编码部分的预测）。零概率prob_intra由帧头的字段J设置。"
    },
    {
      "indent": 0,
      "text": "16.1. Intra-Predicted Macroblocks",
      "section_title": true,
      "zh-CHS": "16.1. 帧内预测宏块"
    },
    {
      "indent": 3,
      "text": "For intra-prediction, the layout of the prediction data is essentially the same as the layout for key frames, although the contexts used by the decoding process are slightly different.",
      "zh-CHS": "对于帧内预测，预测数据的布局基本上与关键帧的布局相同，尽管解码过程使用的上下文略有不同。"
    },
    {
      "indent": 3,
      "text": "As discussed in Section 8, the \"outer\" Y mode here uses a different tree from that used in key frames, repeated here for convenience.",
      "zh-CHS": "如第8节所述，此处的“外部”Y模式使用与关键帧中使用的不同的树，为了方便起见在此处重复。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index ymode_tree [2 * (num_ymodes - 1)] =\n{\n -DC_PRED, 2,           /* root: DC_PRED = \"0\", \"1\" subtree */\n  4, 6,                 /* \"1\" subtree has 2 descendant subtrees */\n   -V_PRED, -H_PRED,    /* \"10\" subtree:  V_PRED = \"100\",\n                           H_PRED = \"101\" */\n   -TM_PRED, -B_PRED    /* \"11\" subtree:  TM_PRED = \"110\",\n                           B_PRED = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The probability table used to decode this tree is variable. As described in Section 11, it (along with the similarly treated UV table) can be updated by field J of the frame header. Similar to the coefficient-decoding probabilities, such updates are cumulative and affect all ensuing frames until the next key frame or explicit update. The default probabilities for the Y and UV tables are:",
      "zh-CHS": "用于解码此树的概率表是可变的。如第11节所述，它（以及类似处理的UV表）可以通过帧头的字段J进行更新。与系数解码概率类似，此类更新是累积的，并且影响所有后续帧，直到下一关键帧或显式更新。Y和UV表的默认概率为："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Prob ymode_prob [num_ymodes - 1] = { 112, 86, 140, 37};\nProb uv_mode_prob [num_uv_modes - 1] = { 162, 101, 204};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "These defaults must be restored after detection of a key frame.",
      "zh-CHS": "检测到关键帧后，必须恢复这些默认值。"
    },
    {
      "indent": 3,
      "text": "Just as for key frames, if the Y mode is B_PRED, there next comes an encoding of the intra_bpred mode used by each of the sixteen Y subblocks. These encodings use the same tree as does that for key frames but, in place of the contexts used in key frames, these encodings use the single fixed probability table.",
      "zh-CHS": "与关键帧一样，如果Y模式是B_PRED，则接下来是16个Y子块中的每个所使用的帧内模式的编码。这些编码使用与关键帧相同的树，但代替关键帧中使用的上下文，这些编码使用单个固定概率表。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob bmode_prob [num_intra_bmodes - 1] = {\n    120, 90, 79, 133, 87, 85, 80, 111, 151\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Last comes the chroma mode, again coded using the same tree as that used for key frames, this time using the dynamic uv_mode_prob table described above.",
      "zh-CHS": "最后是色度模式，再次使用与关键帧相同的树进行编码，这次使用上述动态uv_模式_prob表。"
    },
    {
      "indent": 3,
      "text": "The calculation of the intra-prediction buffer is identical to that described for key frames in Section 12.",
      "zh-CHS": "帧内预测缓冲器的计算与第12部分中针对关键帧描述的计算相同。"
    },
    {
      "indent": 0,
      "text": "16.2. Inter-Predicted Macroblocks",
      "section_title": true,
      "zh-CHS": "16.2. 帧间预测宏块"
    },
    {
      "indent": 3,
      "text": "Otherwise (when the above bool is true), we are using inter-prediction (which of course only happens for interframes), to which we now restrict our attention.",
      "zh-CHS": "否则（当上述bool为真时），我们将使用帧间预测（当然，这只发生在帧间），我们现在将注意力限制在这一点上。"
    },
    {
      "indent": 3,
      "text": "The next datum is then another bool, B(prob_last), selecting the reference frame. If 0, the reference frame is the previous frame (the last frame); if 1, another bool (prob_gf) selects the reference frame between the golden frame (0) and the altref frame (1). The probabilities prob_last and prob_gf are set in field J of the frame header.",
      "zh-CHS": "然后，下一个基准是另一个布尔B（prob_last），选择参考坐标系。如果为0，则参考帧为前一帧（最后一帧）；如果为1，则另一个布尔（prob_gf）选择黄金帧（0）和altref帧（1）之间的参考帧。在帧头的字段J中设置概率prob_last和prob_gf。"
    },
    {
      "indent": 3,
      "text": "Together with setting the reference frame, the purpose of inter-mode decoding is to set a motion vector for each of the sixteen Y subblocks of the current macroblock. These settings then define the calculation of the inter-prediction buffer (detailed in Section 18). While the net effect of inter-mode decoding is straightforward, the implementation is somewhat complex; the (lossless) compression achieved by this method justifies the complexity.",
      "zh-CHS": "与设置参考帧一起，模式间解码的目的是为当前宏块的十六个Y子块中的每一个设置运动矢量。然后，这些设置定义帧间预测缓冲器的计算（在第18节中详细说明）。虽然模式间解码的净效果是直接的，但实现有点复杂；这种方法实现的（无损）压缩证明了其复杂性。"
    },
    {
      "indent": 3,
      "text": "After the reference frame selector comes the mode (or motion vector reference) applied to the macroblock as a whole, coded using the following enumeration and tree. Setting mv_nearest = num_ymodes is a convenience that allows a single variable to unambiguously hold an inter- or intra-prediction mode.",
      "zh-CHS": "参考帧选择器之后是应用于整个宏块的模式（或运动矢量参考），使用以下枚举和树进行编码。设置mv_nearest=num_ymodes是一种方便，它允许单个变量明确地保持帧间或帧内预测模式。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    mv_nearest = num_ymodes, /* use \"nearest\" motion vector\n                                for entire MB */\n    mv_near,                 /* use \"next nearest\" \"\" */\n    mv_zero,                 /* use zero \"\" */\n    mv_new,                  /* use explicit offset from\n                                implicit \"\" */\n    mv_split,                /* use multiple motion vectors */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_mv_refs = mv_split + 1 - mv_nearest\n}\nmv_ref;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index mv_ref_tree [2 * (num_mv_refs - 1)] =\n{\n -mv_zero, 2,                /* zero = \"0\" */\n  -mv_nearest, 4,            /* nearest = \"10\" */\n   -mv_near, 6,              /* near = \"110\" */\n     -mv_new, -mv_split      /* new = \"1110\", split = \"1111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "16.3. Mode and Motion Vector Contexts",
      "section_title": true,
      "zh-CHS": "16.3. 模式和运动矢量上下文"
    },
    {
      "indent": 3,
      "text": "The probability table used to decode the mv_ref, along with three reference motion vectors used by the selected mode, is calculated via a survey of the already-decoded motion vectors in (up to) 3 nearby macroblocks.",
      "zh-CHS": "用于解码mv_ref的概率表以及所选模式使用的三个参考运动矢量，通过对（最多）3个相邻宏块中已解码运动矢量的调查来计算。"
    },
    {
      "indent": 3,
      "text": "The algorithm generates a sorted list of distinct motion vectors adjacent to the search site. The best_mv is the vector with the highest score. The mv_nearest is the non-zero vector with the highest score. The mv_near is the non-zero vector with the next highest score. The number of motion vectors coded using the SPLITMV mode is scored using the same weighting and is returned with the scores of the best, nearest, and near vectors.",
      "zh-CHS": "该算法生成与搜索站点相邻的不同运动矢量的排序列表。最好的是得分最高的向量。最近的mv_是得分最高的非零向量。mv_near是得分次高的非零向量。使用SPLITMV模式编码的运动矢量数使用相同的权重进行评分，并返回最佳、最近和接近矢量的评分。"
    },
    {
      "indent": 3,
      "text": "The three adjacent macroblocks above, left, and above-left are considered in order. If the macroblock is intra-coded, no action is taken. Otherwise, the motion vector is compared to other previously found motion vectors to determine if it has been seen before, and if so contributes its weight to that vector; otherwise, it enters a new vector in the list. The above and left vectors have twice the weight of the above-left vector.",
      "zh-CHS": "按顺序考虑左上方、左上方和左上方的三个相邻宏块。如果宏块是帧内编码的，则不采取任何操作。否则，将该运动向量与先前发现的其他运动向量进行比较，以确定其之前是否已被看见，并且如果是，则将其权重贡献给该向量；否则，它将在列表中输入一个新向量。上方向向量和左方向向量的权重是上方向向量的两倍。"
    },
    {
      "indent": 3,
      "text": "As is the case with many contexts used by VP8, it is possible for macroblocks near the top or left edges of the image to reference blocks that are outside the visible image. VP8 provides a border of 1 macroblock filled with 0x0 motion vectors left of the left edge, and a border filled with 0,0 motion vectors of 1 macroblocks above the top edge.",
      "zh-CHS": "与VP8使用的许多上下文的情况一样，靠近图像上边缘或左边缘的宏块可以参考可见图像之外的块。VP8提供了一个由1个宏块组成的边界，该宏块填充了左边缘左侧的0x0运动矢量，以及一个由上边缘上方的1个宏块的0,0运动矢量填充的边界。"
    },
    {
      "indent": 3,
      "text": "Much of the process is more easily described in C than in English. The reference code for this can be found in modemv.c (Section 20.11). The calculation of reference vectors, probability table, and, finally, the inter-prediction mode itself is implemented as follows.",
      "zh-CHS": "用C语言比用英语更容易描述这个过程。可在modemv.c（第20.11节）中找到这方面的参考代码。参考向量、概率表的计算，以及最后帧间预测模式本身的计算如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef union\n{\n    unsigned int as_int;\n    MV           as_mv;\n} int_mv;        /* facilitates rapid equality tests */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void mv_bias(MODE_INFO *x,int refframe, int_mv *mvp,\n  int * ref_frame_sign_bias)\n{\n    MV xmv;\n    xmv = x->mbmi.mv.as_mv;\n    if ( ref_frame_sign_bias[x->mbmi.ref_frame] !=\n      ref_frame_sign_bias[refframe] )\n    {\n        xmv.row*=-1;\n        xmv.col*=-1;\n    }\n    mvp->as_mv = xmv;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_clamp_mv(MV *mv, const MACROBLOCKD *xd)\n{\n    if ( mv->col < (xd->mb_to_left_edge - LEFT_TOP_MARGIN) )\n        mv->col = xd->mb_to_left_edge - LEFT_TOP_MARGIN;\n    else if ( mv->col > xd->mb_to_right_edge + RIGHT_BOTTOM_MARGIN )\n        mv->col = xd->mb_to_right_edge + RIGHT_BOTTOM_MARGIN;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if ( mv->row < (xd->mb_to_top_edge - LEFT_TOP_MARGIN) )\n        mv->row = xd->mb_to_top_edge - LEFT_TOP_MARGIN;\n    else if ( mv->row > xd->mb_to_bottom_edge + RIGHT_BOTTOM_MARGIN )\n        mv->row = xd->mb_to_bottom_edge + RIGHT_BOTTOM_MARGIN;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "In the function vp8_find_near_mvs(), the vectors \"nearest\" and \"near\" are used by the corresponding modes.",
      "zh-CHS": "在函数vp8_find_near_mvs（）中，向量“nearest”和“near”由相应的模式使用。"
    },
    {
      "indent": 3,
      "text": "The vector best_mv is used as a base for explicitly coded motion vectors.",
      "zh-CHS": "矢量best_mv用作显式编码运动矢量的基础。"
    },
    {
      "indent": 3,
      "text": "The first three entries in the return value cnt are (in order) weighted census values for \"zero\", \"nearest\", and \"near\" vectors. The final value indicates the extent to which SPLITMV was used by the neighboring macroblocks. The largest possible \"weight\" value in each case is 5.",
      "zh-CHS": "返回值cnt中的前三个条目（按顺序）是“零”、“最近”和“近”向量的加权普查值。最终值指示相邻宏块使用SPLITMV的程度。在每种情况下，最大可能的“重量”值为5。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_find_near_mvs ( MACROBLOCKD *xd, const MODE_INFO *here, MV *nearest, MV *near, MV *best_mv, int cnt[4], int refframe, int * ref_frame_sign_bias )",
      "zh-CHS": "void vp8_find_near_mvs（宏块D*xd，此处常量模式信息，MV*最近，MV*近，MV*最佳，int cnt[4]，int refframe，int*ref框架符号偏差）"
    },
    {
      "indent": 3,
      "text": "{\n    const MODE_INFO *above = here - xd->mode_info_stride;\n    const MODE_INFO *left = here - 1;\n    const MODE_INFO *aboveleft = above - 1;\n    int_mv            near_mvs[4];\n    int_mv           *mv = near_mvs;\n    int             *cntx = cnt;\n    enum {CNT_ZERO, CNT_NEAREST, CNT_NEAR, CNT_SPLITMV};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Zero accumulators */\nmv[0].as_int = mv[1].as_int = mv[2].as_int = 0;\ncnt[0] = cnt[1] = cnt[2] = cnt[3] = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process above */\nif (above->mbmi.ref_frame != INTRA_FRAME) {\n    if (above->mbmi.mv.as_int) {\n        (++mv)->as_int = above->mbmi.mv.as_int;\n        mv_bias(above, refframe, mv, ref_frame_sign_bias);\n        ++cntx;\n    }\n    *cntx += 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process left */\nif (left->mbmi.ref_frame != INTRA_FRAME) {\n    if (left->mbmi.mv.as_int) {\n        int_mv this_mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "this_mv.as_int = left->mbmi.mv.as_int;\nmv_bias(left, refframe, &this_mv, ref_frame_sign_bias);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        if (this_mv.as_int != mv->as_int) {\n            (++mv)->as_int = this_mv.as_int;\n            ++cntx;\n        }\n        *cntx += 2;\n    } else\n        cnt[CNT_ZERO] += 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process above left */\nif (aboveleft->mbmi.ref_frame != INTRA_FRAME) {\n    if (aboveleft->mbmi.mv.as_int) {\n        int_mv this_mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "this_mv.as_int = aboveleft->mbmi.mv.as_int;\nmv_bias(aboveleft, refframe, &this_mv,\n  ref_frame_sign_bias);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        if (this_mv.as_int != mv->as_int) {\n            (++mv)->as_int = this_mv.as_int;\n            ++cntx;\n        }\n        *cntx += 1;\n    } else\n        cnt[CNT_ZERO] += 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* If we have three distinct MVs ... */\nif (cnt[CNT_SPLITMV]) {\n    /* See if above-left MV can be merged with NEAREST */\n    if (mv->as_int == near_mvs[CNT_NEAREST].as_int)\n        cnt[CNT_NEAREST] += 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "cnt[CNT_SPLITMV] = ((above->mbmi.mode == SPLITMV)\n                     + (left->mbmi.mode == SPLITMV)) * 2\n                    + (aboveleft->mbmi.mode == SPLITMV);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Swap near and nearest if necessary */\nif (cnt[CNT_NEAR] > cnt[CNT_NEAREST]) {\n    int tmp;\n    tmp = cnt[CNT_NEAREST];\n    cnt[CNT_NEAREST] = cnt[CNT_NEAR];\n    cnt[CNT_NEAR] = tmp;\n    tmp = near_mvs[CNT_NEAREST].as_int;\n    near_mvs[CNT_NEAREST].as_int = near_mvs[CNT_NEAR].as_int;\n    near_mvs[CNT_NEAR].as_int = tmp;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Use near_mvs[0] to store the \"best\" MV */\nif (cnt[CNT_NEAREST] >= cnt[CNT_ZERO])\n    near_mvs[CNT_ZERO] = near_mvs[CNT_NEAREST];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Set up return values */\n*best_mv = near_mvs[0].as_mv;\n*nearest = near_mvs[CNT_NEAREST].as_mv;\n*near = near_mvs[CNT_NEAR].as_mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    vp8_clamp_mv(nearest, xd);\n    vp8_clamp_mv(near, xd);\n    vp8_clamp_mv(best_mv, xd); //TODO: Move this up before\n                                 the copy\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The mv_ref probability table (mv_ref_p) is then derived from the census as follows.",
      "zh-CHS": "mv_ref概率表（mv_ref_p）由人口普查得出，如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const int vp8_mode_contexts[6][4] =\n{\n  {   7,     1,     1,   143,   },\n  {  14,    18,    14,   107,   },\n  { 135,    64,    57,    68,   },\n  {  60,    56,   128,    65,   },\n  { 159,   134,   128,    34,   },\n  { 234,   188,   128,    28,   },\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "vp8_prob *vp8_mv_ref_probs(vp8_prob mv_ref_p[VP8_MVREFS-1],\n  int cnt[4])\n{\n    mv_ref_p[0] = vp8_mode_contexts [cnt[0]] [0];\n    mv_ref_p[1] = vp8_mode_contexts [cnt[1]] [1];\n    mv_ref_p[2] = vp8_mode_contexts [cnt[2]] [2];\n    mv_ref_p[3] = vp8_mode_contexts [cnt[3]] [3];\n    return p;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Once mv_ref_p is established, the mv_ref is decoded as usual.",
      "zh-CHS": "一旦mv_ref_p建立，mv_ref将像往常一样解码。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "mvr = (mv_ref) treed_read(d, mv_ref_tree, mv_ref_p);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "For the first four inter-coding modes, the same motion vector is used for all the Y subblocks. The first three modes use an implicit motion vector.",
      "zh-CHS": "对于前四种帧间编码模式，相同的运动矢量用于所有Y子块。前三种模式使用隐式运动矢量。"
    },
    {
      "indent": 3,
      "text": "+------------+------------------------------------------------------+\n| Mode       | Instruction                                          |\n+------------+------------------------------------------------------+\n| mv_nearest | Use the nearest vector returned by                   |\n|            | vp8_find_near_mvs.                                   |\n|            |                                                      |\n| mv_near    | Use the near vector returned by vp8_find_near_mvs.   |\n|            |                                                      |\n| mv_zero    | Use a zero vector; that is, predict the current      |\n|            | macroblock from the corresponding macroblock in the  |\n|            | prediction frame.                                    |\n|            |                                                      |\n| NEWMV      | This mode is followed by an explicitly coded motion  |\n|            | vector (the format of which is described in the next |\n|            | section) that is added (component-wise) to the       |\n|            | best_mv reference vector returned by find_near_mvs   |\n|            | and applied to all 16 subblocks.                     |\n+------------+------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "16.4. Split Prediction",
      "section_title": true,
      "zh-CHS": "16.4. 分裂预测"
    },
    {
      "indent": 3,
      "text": "The remaining mode (SPLITMV) causes multiple vectors to be applied to the Y subblocks. It is immediately followed by a partition specification that determines how many vectors will be specified and how they will be assigned to the subblocks. The possible partitions, with indicated subdivisions and coding tree, are as follows.",
      "zh-CHS": "剩余模式（SPLITMV）使多个向量应用于Y子块。紧接着是一个分区规范，该规范确定将指定多少个向量以及如何将它们分配给子块。可能的分区（带有指示的子分区和编码树）如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    mv_top_bottom,   /* two pieces {0...7} and {8...15} */\n    mv_left_right,   /* {0,1,4,5,8,9,12,13} and\n                        {2,3,6,7,10,11,14,15} */\n    mv_quarters,    /* {0,1,4,5}, {2,3,6,7}, {8,9,12,13},\n                       {10,11,14,15} */\n    MV_16,          /* every subblock gets its own vector\n                       {0} ... {15} */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    mv_num_partitions\n}\nMVpartition;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index mvpartition_tree [2 * (mvnum_partition - 1)] =\n{\n -MV_16, 2,                         /* MV_16 = \"0\" */\n  -mv_quarters, 4,                  /* mv_quarters = \"10\" */\n   -mv_top_bottom, -mv_left_right   /* top_bottom = \"110\",\n                                       left_right = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The partition is decoded using a fixed, constant probability table:",
      "zh-CHS": "使用固定不变的概率表对分区进行解码："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob mvpartition_probs [mvnum_partition - 1] =\n  { 110, 111, 150};\npart = (MVpartition) treed_read(d, mvpartition_tree,\n  mvpartition_probs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "After the partition come two (for mv_top_bottom or mv_left_right), four (for mv_quarters), or sixteen (for MV_16) subblock inter-prediction modes. These modes occur in the order indicated by the partition layouts (given as comments to the MVpartition enum) and are coded as follows. (As was done for the macroblock-level modes, we offset the mode enumeration so that a single variable may unambiguously hold either an intra- or inter-subblock mode.)",
      "zh-CHS": "分区后出现两个（用于mv_顶部_底部或mv_左侧_右侧）、四个（用于mv_四分之一）或十六个（用于mv_16）子块间预测模式。这些模式按照分区布局指示的顺序出现（作为MVpartition枚举的注释给出），并按如下方式编码。（与宏块级模式一样，我们偏移了模式枚举，以便单个变量可以明确地保持子块内或子块间模式。）"
    },
    {
      "indent": 3,
      "text": "Prior to decoding each subblock, a decoding tree context is chosen as illustrated in the code snippet below. The context is based on the immediate left and above subblock neighbors, and whether they are equal, are zero, or a combination of those.",
      "zh-CHS": "在解码每个子块之前，选择解码树上下文，如下面的代码片段所示。上下文基于直接的左侧和上方子块邻居，以及它们是否相等、为零或它们的组合。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    LEFT4x4 = num_intra_bmodes,   /* use already-coded MV to\n                                     my left */\n    ABOVE4x4,             /* use already-coded MV above me */\n    ZERO4x4,              /* use zero MV */\n    NEW4x4,               /* explicit offset from \"best\" */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    num_sub_mv_ref\n};\nsub_mv_ref;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index sub_mv_ref_tree [2 * (num_sub_mv_ref - 1)] =\n{\n -LEFT4X4, 2,           /* LEFT = \"0\" */\n  -ABOVE4X4, 4,         /* ABOVE = \"10\" */\n   -ZERO4X4, -NEW4X4    /* ZERO = \"110\", NEW = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Choose correct decoding tree context\n * Function parameters are left subblock neighbor MV and above\n * subblock neighbor MV */\nint vp8_mvCont(MV *l, MV*a)\n{\n    int lez = (l->row == 0 && l->col == 0);   /* left neighbor\n                                                 is zero */\n    int aez = (a->row == 0 && a->col == 0);   /* above neighbor\n                                                 is zero */\n    int lea = (l->row == a->row && l->col == a->col);  /* left\n                             neighbor equals above neighbor */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (lea && lez)\n    return SUBMVREF_LEFT_ABOVE_ZED; /* =4 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (lea)\n    return SUBMVREF_LEFT_ABOVE_SAME; /* =3 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (aez)\n    return SUBMVREF_ABOVE_ZED; /* =2 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (lez)\n    return SUBMVREF_LEFT_ZED; /* =1*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return SUBMVREF_NORMAL; /* =0 */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Constant probabilities and decoding procedure. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const Prob sub_mv_ref_prob [5][num_sub_mv_ref - 1] = {\n    { 147,136,18 },\n    { 106,145,1  },\n    { 179,121,1  },\n    { 223,1  ,34 },\n    { 208,1  ,1  }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "sub_ref = (sub_mv_ref) treed_read(d, sub_mv_ref_tree,\n  sub_mv_ref_prob[context]);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The first two sub-prediction modes simply copy the already-coded motion vectors used by the blocks above and to the left of the subblock at the upper left corner of the current subset (i.e., collection of subblocks being predicted). These prediction blocks need not lie in the current macroblock and, if the current subset lies at the top or left edges of the frame, need not lie in the frame. In this latter case, their motion vectors are taken to be zero, as are subblock motion vectors within an intra-predicted macroblock. Also, to ensure the correctness of prediction within this macroblock, all subblocks lying in an already-decoded subset of the current macroblock must have their motion vectors set.",
      "zh-CHS": "前两个子预测模式简单地复制当前子集左上角（即，被预测的子块的集合）的子块上方和左侧的块所使用的已编码运动向量。这些预测块不必位于当前宏块中，并且如果当前子集位于帧的上边缘或左边缘，则不必位于帧中。在后一种情况下，它们的运动矢量被取为零，如同帧内预测宏块内的子块运动矢量一样。此外，为了确保该宏块内预测的正确性，位于当前宏块的已解码子集中的所有子块必须设置其运动向量。"
    },
    {
      "indent": 3,
      "text": "ZERO4x4 uses a zero motion vector and predicts the current subset using the corresponding subset from the prediction frame.",
      "zh-CHS": "ZERO4x4使用零运动矢量，并使用来自预测帧的相应子集预测当前子集。"
    },
    {
      "indent": 3,
      "text": "NEW4x4 is exactly like NEWMV except that NEW4x4 is applied only to the current subset. It is followed by a two-dimensional motion vector offset (described in the next section) that is added to the best vector returned by the earlier call to find_near_mvs to form the motion vector in effect for the subset.",
      "zh-CHS": "NEW4x4与NEWMV完全相同，只是NEW4x4仅应用于当前子集。然后是一个二维运动矢量偏移量（在下一节中描述），该偏移量被添加到先前调用返回的最佳矢量中，以查找_near_mvs，从而形成对子集有效的运动矢量。"
    },
    {
      "indent": 3,
      "text": "Parsing of both inter-prediction modes and motion vectors (described next) can be found in the reference decoder file modemv.c (Section 20.11).",
      "zh-CHS": "帧间预测模式和运动矢量（如下所述）的解析可在参考解码器文件modemv.c（第20.11节）中找到。"
    },
    {
      "indent": 0,
      "text": "17. Motion Vector Decoding",
      "section_title": true,
      "zh-CHS": "17. 运动矢量解码"
    },
    {
      "indent": 3,
      "text": "As discussed above, motion vectors appear in two places in the VP8 datastream: applied to whole macroblocks in NEWMV mode and applied to subsets of macroblocks in NEW4x4 mode. The format of the vectors is identical in both cases.",
      "zh-CHS": "如上所述，运动矢量出现在VP8数据流中的两个位置：在NEWMV模式下应用于整个宏块，在NEW4x4模式下应用于宏块子集。在这两种情况下，向量的格式是相同的。"
    },
    {
      "indent": 3,
      "text": "Each vector has two pieces: a vertical component (row) followed by a horizontal component (column). The row and column use separate coding probabilities but are otherwise represented identically.",
      "zh-CHS": "每个向量有两个部分：一个垂直分量（行）后跟一个水平分量（列）。行和列使用单独的编码概率，但在其他方面表示相同。"
    },
    {
      "indent": 0,
      "text": "17.1. Coding of Each Component",
      "section_title": true,
      "zh-CHS": "17.1. 每个部件的编码"
    },
    {
      "indent": 3,
      "text": "Each component is a signed integer V representing a vertical or horizontal luma displacement of V quarter-pixels (and a chroma displacement of V eighth-pixels). The absolute value of V, if non-zero, is followed by a boolean sign. V may take any value between -1023 and +1023, inclusive.",
      "zh-CHS": "每个分量是一个有符号整数V，表示V四分之一像素的垂直或水平亮度位移（以及V八分之一像素的色度位移）。如果V的绝对值不为零，则后跟布尔符号。V可以取-1023和+1023之间的任何值，包括-1023和+1023。"
    },
    {
      "indent": 3,
      "text": "The absolute value A is coded in one of two different ways according to its size. For 0 <= A <= 7, A is tree-coded, and for 8 <= A <= 1023, the bits in the binary expansion of A are coded using independent boolean probabilities. The coding of A begins with a bool specifying which range is in effect.",
      "zh-CHS": "绝对值A根据其大小以两种不同方式之一进行编码。对于0<=A<=7，对A进行树编码，对于8<=A<=1023，对A的二进制展开中的位使用独立的布尔概率进行编码。A的编码从指定有效范围的布尔开始。"
    },
    {
      "indent": 3,
      "text": "Decoding a motion vector component then requires a 19-position probability table, whose offsets, along with the procedure used to decode components, are as follows:",
      "zh-CHS": "解码运动矢量分量需要一个19位概率表，其偏移量以及用于解码分量的过程如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef enum\n{\n    mvpis_short,         /* short (<= 7) vs long (>= 8) */\n    MVPsign,             /* sign for non-zero */\n    MVPshort,            /* 8 short values = 7-position tree */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "MVPbits = MVPshort + 7,      /* 8 long value bits\n                                w/independent probs */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    MVPcount = MVPbits + 10      /* 19 probabilities in total */\n}\nMVPindices;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef Prob MV_CONTEXT [MVPcount];    /* Decoding spec for\n                                          a single component */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Tree used for small absolute values (has expected\n   correspondence). */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const tree_index small_mvtree [2 * (8 - 1)] =\n{\n 2, 8,          /* \"0\" subtree, \"1\" subtree */\n  4, 6,         /* \"00\" subtree, \"01\" subtree */\n   -0, -1,      /* 0 = \"000\", 1 = \"001\" */\n   -2, -3,      /* 2 = \"010\", 3 = \"011\" */\n  10, 12,       /* \"10\" subtree, \"11\" subtree */\n   -4, -5,      /* 4 = \"100\", 5 = \"101\" */\n   -6, -7       /* 6 = \"110\", 7 = \"111\" */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Read MV component at current decoder position, using\n   supplied probs. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int read_mvcomponent(bool_decoder *d, const MV_CONTEXT *mvc)\n{\n    const Prob * const p = (const Prob *) mvc;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "int A = 0;",
      "zh-CHS": "int A=0；"
    },
    {
      "indent": 7,
      "text": "if (read_bool(d, p [mvpis_short]))    /* 8 <= A <= 1023 */\n{\n    /* Read bits 0, 1, 2 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "int i = 0;\ndo { A += read_bool(d, p [MVPbits + i]) << i;}\n  while (++i < 3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Read bits 9, 8, 7, 6, 5, 4 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "i = 9;\ndo { A += read_bool(d, p [MVPbits + i]) << i;}\n  while (--i > 3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* We know that A >= 8 because it is coded long,\n   so if A <= 15, bit 3 is one and is not\n   explicitly coded. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (!(A & 0xfff0)  ||  read_bool(d, p [MVPbits + 3]))\n        A += 8;\n}\nelse    /* 0 <= A <= 7 */\n    A = treed_read(d, small_mvtree, p + MVPshort);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return A && read_bool(r, p [MVPsign]) ?  -A : A;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "17.2. Probability Updates",
      "section_title": true,
      "zh-CHS": "17.2. 概率更新"
    },
    {
      "indent": 3,
      "text": "The decoder should maintain an array of two MV_CONTEXTs for decoding row and column components, respectively. These MV_CONTEXTs should be set to their defaults every key frame. Each individual probability may be updated every interframe (by field J of the frame header) using a constant table of update probabilities. Each optional update is of the form B? P(7), that is, a bool followed by a 7-bit probability specification if true.",
      "zh-CHS": "解码器应保持两个MV_上下文的数组，分别用于解码行和列组件。这些MV_上下文应在每个关键帧设置为默认值。可以使用恒定的更新概率表在每个帧间（通过帧头的字段J）更新每个单独的概率。每个可选更新都是表格B？P（7），也就是说，如果为真，则为bool后跟7位概率规范。"
    },
    {
      "indent": 3,
      "text": "As with other dynamic probabilities used by VP8, the updates remain in effect until the next key frame or until replaced via another update.",
      "zh-CHS": "与VP8使用的其他动态概率一样，更新保持有效，直到下一个关键帧或通过另一个更新替换。"
    },
    {
      "indent": 3,
      "text": "In detail, the probabilities should then be managed as follows.",
      "zh-CHS": "具体而言，概率应按如下方式进行管理。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Never-changing table of update probabilities for each\n   individual probability used in decoding motion vectors. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const MV_CONTEXT vp8_mv_update_probs[2] =\n{\n  {\n    237,\n    246,\n    253, 253, 254, 254, 254, 254, 254,\n    254, 254, 254, 254, 254, 250, 250, 252, 254, 254\n  },\n  {\n    231,\n    243,\n    245, 253, 254, 254, 254, 254, 254,\n    254, 254, 254, 254, 254, 251, 251, 254, 254, 254\n  }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Default MV decoding probabilities. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const MV_CONTEXT default_mv_context[2] = { { // row 162, // is short 128, // sign 225, 146, 172, 147, 214, 39, 156, // short tree 128, 129, 132, 75, 145, 178, 206, 239, 254, 254 // long bits },",
      "zh-CHS": "const MV_CONTEXT default_MV_CONTEXT[2]={{//row 162，//短128，//符号225、146、172、147、214、39、156，//短树128、129、132、75、145、178、206、239、254、254//长位}，"
    },
    {
      "indent": 5,
      "text": "{                       // same for column\n  164,                    // is short\n  128,\n  204, 170, 119, 235, 140, 230, 228,\n  128, 130, 130,  74, 148, 180, 203, 236, 254, 254 // long bits",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "  }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Current MV decoding probabilities, set to above defaults\n   every key frame. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MV_CONTEXT mvc [2];     /* always row, then column */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Procedure for decoding a complete motion vector. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef struct { int16 row, col;}  MV;  /* as in previous section */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MV read_mv(bool_decoder *d)\n{\n    MV v;\n    v.row = (int16) read_mvcomponent(d, mvc);\n    v.col = (int16) read_mvcomponent(d, mvc + 1);\n    return v;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Procedure for updating MV decoding probabilities, called\n   every interframe with \"d\" at the appropriate position in\n   the frame header. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void update_mvcontexts(bool_decoder *d)\n{\n    int i = 0;\n    do {                      /* component = row, then column */\n        const Prob *up = mv_update_probs[i];    /* update probs\n                                                   for component */\n        Prob *p = mvc[i];                  /* start decode tbl \"\" */\n        Prob * const pstop = p + MVPcount; /* end decode tbl \"\" */\n        do {\n            if (read_bool(d, *up++))     /* update this position */\n            {\n                const Prob x = read_literal(d, 7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "                *p = x? x<<1 : 1;\n            }\n        } while (++p < pstop);              /* next position */\n    } while (++i < 2);                      /* next component */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "This completes the description of the motion-vector decoding procedure and, with it, the procedure for decoding interframe macroblock prediction records.",
      "zh-CHS": "这就完成了对运动矢量解码过程的描述，以及对帧间宏块预测记录进行解码的过程的描述。"
    },
    {
      "indent": 0,
      "text": "18. Interframe Prediction",
      "section_title": true,
      "zh-CHS": "18. 帧间预测"
    },
    {
      "indent": 3,
      "text": "Given an inter-prediction specification for the current macroblock, that is, a reference frame together with a motion vector for each of the sixteen Y subblocks, we describe the calculation of the prediction buffer for the macroblock. Frame reconstruction is then completed via the previously described processes of residue summation (Section 14) and loop filtering (Section 15).",
      "zh-CHS": "给定当前宏块的帧间预测规范，即16个Y子块中的每个的参考帧和运动向量，我们描述宏块的预测缓冲器的计算。然后，通过前面描述的剩余求和（第14节）和循环滤波（第15节）过程完成帧重建。"
    },
    {
      "indent": 3,
      "text": "The management of inter-predicted subblocks and sub-pixel interpolation may be found in the reference decoder file predict.c (Section 20.14).",
      "zh-CHS": "帧间预测子块和子像素插值的管理可在参考解码器文件predict.c（第20.14节）中找到。"
    },
    {
      "indent": 0,
      "text": "18.1. Bounds on, and Adjustment of, Motion Vectors",
      "section_title": true,
      "zh-CHS": "18.1. 运动矢量的边界和调整"
    },
    {
      "indent": 3,
      "text": "Since each motion vector is differentially encoded from a neighboring block or macroblock and the only clamp is to ensure that the referenced motion vector represents a valid location inside a reference frame buffer, it is technically possible within the VP8 format for a block or macroblock to have arbitrarily large motion vectors, up to the size of the input image plus the extended border areas. For practical reasons, VP8 imposes a motion vector size range limit of -4096 to 4095 full pixels, regardless of image size (VP8 defines 14 raw bits for width and height; 16383x16383 is the maximum possible image size). Bitstream-compliant encoders and decoders shall enforce this limit.",
      "zh-CHS": "由于每个运动矢量从相邻块或宏块进行差分编码，并且唯一的钳制是确保参考运动矢量表示参考帧缓冲器内的有效位置，因此在VP8格式中，块或宏块具有任意大的运动矢量在技术上是可能的，最大为输入图像的大小加上扩展的边界区域。出于实际原因，VP8将运动矢量大小范围限制为-4096到4095个完整像素，而不考虑图像大小（VP8定义了14个原始位的宽度和高度；163816383是可能的最大图像大小）。符合比特流的编码器和解码器应执行此限制。"
    },
    {
      "indent": 3,
      "text": "Because the motion vectors applied to the chroma subblocks have 1/8-pixel resolution, the synthetic pixel calculation, outlined in Section 5 and detailed below, uses this resolution for the luma subblocks as well. In accordance, the stored luma motion vectors are all doubled, each component of each luma vector becoming an even integer in the range -2046 to +2046, inclusive.",
      "zh-CHS": "由于应用于色度子块的运动矢量具有1/8像素分辨率，因此第5节中概述并在下文详述的合成像素计算也将该分辨率用于亮度子块。相应地，存储的luma运动向量全部加倍，每个luma向量的每个分量成为-2046到+2046（包括-2046到+2046）范围内的偶数整数。"
    },
    {
      "indent": 3,
      "text": "The vector applied to each chroma subblock is calculated by averaging the vectors for the 4 luma subblocks occupying the same visible area as the chroma subblock in the usual correspondence; that is, the vector for U and V block 0 is the average of the vectors for the Y subblocks { 0, 1, 4, 5}, chroma block 1 corresponds to Y blocks { 2, 3, 6, 7}, chroma block 2 to Y blocks { 8, 9, 12, 13}, and chroma block 3 to Y blocks { 10, 11, 14, 15}.",
      "zh-CHS": "应用于每个色度子块的向量是通过对占据与通常对应中的色度子块相同可见区域的4个luma子块的向量求平均来计算的；即，U和V块0的向量是Y子块{0、1、4、5}的向量的平均值，色度块1对应于Y块{2、3、6、7}，色度块2对应于Y块{8、9、12、13}，色度块3对应于Y块{10、11、14、15}。"
    },
    {
      "indent": 3,
      "text": "In detail, each of the two components of the vectors for each of the chroma subblocks is calculated from the corresponding luma vector components as follows:",
      "zh-CHS": "具体而言，根据相应的亮度向量分量计算每个色度子块的向量的两个分量中的每一个，如下所示："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int avg(int c1, int c2, int c3, int c4)\n{\n    int s = c1 + c2 + c3 + c4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* The shift divides by 8 (not 4) because chroma pixels\n   have twice the diameter of luma pixels.  The handling\n   of negative motion vector components is slightly\n   cumbersome because, strictly speaking, right shifts\n   of negative numbers are not well-defined in C. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return s >= 0 ?  (s + 4) >> 3 : -((-s + 4) >> 3);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Furthermore, if the version number in the frame tag specifies only full-pel chroma motion vectors, then the fractional parts of both components of the vector are truncated to zero, as illustrated in the following pseudocode (assuming 3 bits of fraction for both luma and chroma vectors):",
      "zh-CHS": "此外，如果帧标签中的版本号仅指定完整像素色度运动向量，则向量的两个分量的分数部分被截断为零，如以下伪码中所示（假设亮度和色度向量的分数均为3位）："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "x = x & (~7);\ny = y & (~7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Earlier in this document we described the vp8_clamp_mv() function to limit \"nearest\" and \"near\" motion vector predictors inside specified margins within the frame boundaries. Additional clamping is performed for NEWMV macroblocks, for which the final motion vector is clamped again after combining the \"best\" predictor and the differential vector decoded from the stream.",
      "zh-CHS": "在本文档前面，我们描述了vp8_clamp_mv（）函数，该函数用于将“最近”和“近”运动矢量预测器限制在帧边界内指定的边距内。对NEWMV宏块执行附加箝位，在组合“最佳”预测器和从流解码的差分向量之后，对其再次箝位最终运动向量。"
    },
    {
      "indent": 3,
      "text": "However, the secondary clamping is not performed for SPLITMV macroblocks, meaning that any subblock's motion vector within the SPLITMV macroblock may point outside the clamping zone. These non-clamped vectors are also used when determining the decoding tree context for subsequent subblocks' modes in the vp8_mvCont() function.",
      "zh-CHS": "然而，不针对SPLITMV宏块执行二次箝位，这意味着SPLITMV宏块内的任何子块的运动矢量可能指向箝位区域之外。在vp8_mvCont（）函数中确定后续子块模式的解码树上下文时，也使用这些非钳位向量。"
    },
    {
      "indent": 0,
      "text": "18.2. Prediction Subblocks",
      "section_title": true,
      "zh-CHS": "18.2. 预测子块"
    },
    {
      "indent": 3,
      "text": "The prediction calculation for each subblock is then as follows. Temporarily disregarding the fractional part of the motion vector (that is, rounding \"up\" or \"left\" by right-shifting each component 3 bits with sign propagation) and adding the origin (upper left position) of the (16x16 luma or 8x8 chroma) current macroblock gives us an origin in the Y, U, or V plane of the predictor frame (either the golden frame or previous frame).",
      "zh-CHS": "每个子块的预测计算如下所示。暂时忽略运动矢量的分数部分（即，通过符号传播将每个分量右移3位来“向上”或“向左”取整），并添加（16x16 luma或8x8色度）当前宏块的原点（左上位置），我们可以在预测器帧的Y、U或V平面中获得原点（金色边框或上一个边框）。"
    },
    {
      "indent": 3,
      "text": "Considering that origin to be the upper left corner of a (luma or chroma) macroblock, we need to specify the relative positions of the pixels associated to that subblock, that is, any pixels that might be involved in the sub-pixel interpolation processes for the subblock.",
      "zh-CHS": "考虑到原点是（亮度或色度）宏块的左上角，我们需要指定与该子块相关联的像素的相对位置，即，可能涉及子块的子像素插值过程的任何像素。"
    },
    {
      "indent": 0,
      "text": "18.3. Sub-Pixel Interpolation",
      "section_title": true,
      "zh-CHS": "18.3. 亚像素插值"
    },
    {
      "indent": 3,
      "text": "The sub-pixel interpolation is effected via two one-dimensional convolutions. These convolutions may be thought of as operating on a two-dimensional array of pixels whose origin is the subblock origin, that is the origin of the prediction macroblock described above plus the offset to the subblock. Because motion vectors are arbitrary, so are these \"prediction subblock origins\".",
      "zh-CHS": "亚像素插值通过两个一维卷积实现。这些卷积可以被认为是在其原点是子块原点的像素的二维阵列上操作的，该子块原点是上述预测宏块的原点加上到子块的偏移。因为运动矢量是任意的，所以这些“预测子块原点”也是任意的。"
    },
    {
      "indent": 3,
      "text": "The integer part of the motion vector is subsumed in the origin of the prediction subblock; the 16 (synthetic) pixels we need to construct are given by 16 offsets from the origin. The integer part of each of these offsets is the offset of the corresponding pixel from the subblock origin (using the vertical stride). To these integer parts is added a constant fractional part, which is simply the difference between the actual motion vector and its integer truncation used to calculate the origins of the prediction macroblock and subblock. Each component of this fractional part is an integer between 0 and 7, representing a forward displacement in eighths of a pixel.",
      "zh-CHS": "运动矢量的整数部分包含在预测子块的原点中；我们需要构造的16个（合成）像素由距原点的16个偏移量给出。每个偏移的整数部分是对应像素相对于子块原点的偏移（使用垂直步幅）。向这些整数部分添加一个常量分数部分，该部分仅为实际运动矢量与其整数截断之间的差值，用于计算预测宏块和子块的原点。该分数部分的每个分量都是0到7之间的整数，表示八分之一像素的正向位移。"
    },
    {
      "indent": 3,
      "text": "It is these fractional displacements that determine the filtering process. If they both happen to be zero (that is, we had a \"whole pixel\" motion vector), the prediction subblock is simply copied into the corresponding piece of the current macroblock's prediction buffer. As discussed in Section 14, the layout of the macroblock's prediction buffer can depend on the specifics of the reconstruction implementation chosen. Of course, the vertical displacement between lines of the prediction subblock is given by the stride, as are all vertical displacements used here.",
      "zh-CHS": "正是这些分数位移决定了过滤过程。如果它们恰好都为零（即，我们有一个“整像素”运动矢量），则预测子块将被简单地复制到当前宏块的预测缓冲区的相应部分中。如第14节中所讨论的，宏块的预测缓冲器的布局可以取决于所选择的重建实现的细节。当然，预测子块行之间的垂直位移由步幅给出，这里使用的所有垂直位移也是如此。"
    },
    {
      "indent": 3,
      "text": "Otherwise, at least one of the fractional displacements is non-zero. We then synthesize the missing pixels via a horizontal, followed by a vertical, one-dimensional interpolation.",
      "zh-CHS": "否则，至少一个分数位移为非零。然后，我们通过一个水平的，然后是一个垂直的，一维插值合成丢失的像素。"
    },
    {
      "indent": 3,
      "text": "The two interpolations are essentially identical. Each uses a (at most) six-tap filter (the choice of which of course depends on the one-dimensional offset). Thus, every calculated pixel references at most three pixels before (above or to the left of) it and at most three pixels after (below or to the right of) it. The horizontal interpolation must calculate two extra rows above and three extra rows below the 4x4 block, to provide enough samples for the vertical interpolation to proceed.",
      "zh-CHS": "这两种插值基本相同。每个都使用（最多）六抽头滤波器（当然，其选择取决于一维偏移）。因此，每个计算的像素在其前面（上方或左侧）最多参考三个像素，在其后面（下方或右侧）最多参考三个像素。水平插值必须计算4x4块上方的两个额外行和下方的三个额外行，以便为垂直插值提供足够的样本。"
    },
    {
      "indent": 3,
      "text": "Depending on the reconstruction filter type given in the version number field in the frame tag, either a bicubic or a bilinear tap set is used.",
      "zh-CHS": "根据帧标记的版本号字段中给定的重建过滤器类型，使用双三次或双线性抽头集。"
    },
    {
      "indent": 3,
      "text": "The exact implementation of subsampling is as follows.",
      "zh-CHS": "子采样的具体实现如下所示。"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Filter taps taken to 7-bit precision.\n   Because DC is always passed, taps always sum to 128. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const int BilinearFilters[8][6] =\n{\n    { 0, 0, 128,   0, 0, 0 },\n    { 0, 0, 112,  16, 0, 0 },\n    { 0, 0,  96,  32, 0, 0 },\n    { 0, 0,  80,  48, 0, 0 },\n    { 0, 0,  64,  64, 0, 0 },\n    { 0, 0,  48,  80, 0, 0 },\n    { 0, 0,  32,  96, 0, 0 },\n    { 0, 0,  16, 112, 0, 0 }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const int filters [8] [6] = {        /* indexed by displacement */\n    { 0,  0,  128,    0,   0,  0 },  /* degenerate whole-pixel */\n    { 0, -6,  123,   12,  -1,  0 },  /* 1/8 */\n    { 2, -11, 108,   36,  -8,  1 },  /* 1/4 */\n    { 0, -9,   93,   50,  -6,  0 },  /* 3/8 */\n    { 3, -16,  77,   77, -16,  3 },  /* 1/2 is symmetric */\n    { 0, -6,   50,   93,  -9,  0 },  /* 5/8 = reverse of 3/8 */\n    { 1, -8,   36,  108, -11,  2 },  /* 3/4 = reverse of 1/4 */\n    { 0, -1,   12,  123,  -6,  0 }   /* 7/8 = reverse of 1/8 */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* One-dimensional synthesis of a single sample.\n   Filter is determined by fractional displacement */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pixel interp(\n    const int fil[6],   /* filter to apply */\n    const Pixel *p,     /* origin (rounded \"before\") in\n                           prediction area */\n    const int s         /* size of one forward step \"\" */\n) {\n    int32 a = 0;\n    int i = 0;\n    p -= s + s;         /* move back two positions */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "do {\n    a += *p * fil[i];\n    p += s;\n}  while (++i < 6);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return clamp255((a + 64) >> 7);    /* round to nearest\n                                           8-bit value */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* First do horizontal interpolation, producing intermediate\n   buffer. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void Hinterp(\n    Pixel temp[9][4],   /* 9 rows of 4 (intermediate)\n                           destination values */\n    const Pixel *p,     /* subblock origin in prediction\n                           frame */\n    int s,              /* vertical stride to be used in\n                           prediction frame */\n    uint hfrac,         /* 0 <= horizontal displacement <= 7 */\n    uint bicubic        /* 1=bicubic filter, 0=bilinear */\n) {\n    const int * const fil = bicubic ? filters [hfrac] :\n      BilinearFilters[hfrac];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "int r = 0;  do              /* for each row */\n{\n    int c = 0;  do          /* for each destination sample */\n    {\n        /* Pixel separation = one horizontal step = 1 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    temp[r][c] = interp(fil, p + c, 1);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        while (++c < 4);\n    }\n    while (p += s, ++r < 9);    /* advance p to next row */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Finish with vertical interpolation, producing final results.\n   Input array \"temp\" is of course that computed above. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void Vinterp(\n    Pixel final[4][4],  /* 4 rows of 4 (final) destination values */\n    const Pixel temp[9][4],\n    uint vfrac,         /* 0 <= vertical displacement <= 7 */\n    uint bicubic        /* 1=bicubic filter, 0=bilinear */\n) {\n    const int * const fil = bicubic ? filters [vfrac] :\n      BilinearFilters[vfrac];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "int r = 0;  do              /* for each row */\n{\n    int c = 0;  do          /* for each destination sample */\n    {\n        /* Pixel separation = one vertical step = width\n           of array = 4 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "            final[r][c] = interp(fil, temp[r] + c, 4);\n        }\n        while (++c < 4);\n    }\n    while (++r < 4);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "18.4. Filter Properties",
      "section_title": true,
      "zh-CHS": "18.4. 过滤器特性"
    },
    {
      "indent": 3,
      "text": "We discuss briefly the rationale behind the choice of filters. Our approach is necessarily cursory; a genuinely accurate discussion would require a couple of books. Readers unfamiliar with signal processing may or may not wish to skip this.",
      "zh-CHS": "我们简要讨论了选择滤波器的基本原理。我们的做法必然是草率的；真正准确的讨论需要几本书。不熟悉信号处理的读者可能希望也可能不希望跳过这一步。"
    },
    {
      "indent": 3,
      "text": "All digital signals are of course sampled in some fashion. The case where the inter-sample spacing (say in time for audio samples, or space for pixels) is uniform, that is, the same at all positions, is particularly common and amenable to analysis. Many aspects of the treatment of such signals are best-understood in the frequency domain via Fourier Analysis, particularly those aspects of the signal that are not changed by shifts in position, especially when those positional shifts are not given by a whole number of samples.",
      "zh-CHS": "当然，所有数字信号都是以某种方式采样的。样本间间隔（例如，对于音频样本的时间间隔，或者对于像素的空间）是均匀的（即，在所有位置上相同）的情况尤其常见并且易于分析。通过傅里叶分析，在频域中最好地理解此类信号处理的许多方面，尤其是那些不因位置偏移而改变的信号方面，尤其是当这些位置偏移不是由整数个样本给出时。"
    },
    {
      "indent": 3,
      "text": "Non-integral translates of a sampled signal are a textbook example of the foregoing. In our case of non-integral motion vectors, we wish to say what the underlying image \"really is\" at these pixels; although we don't have values for them, we feel that it makes sense to talk about them. The correctness of this feeling is predicated on the underlying signal being band-limited, that is, not containing any energy in spatial frequencies that cannot be faithfully rendered at the pixel resolution at our disposal. In one dimension, this range of \"OK\" frequencies is called the Nyquist band; in our two-dimensional case of integer-grid samples, this range might be termed a Nyquist rectangle. The finer the grid, the more we know about the image, and the wider the Nyquist rectangle.",
      "zh-CHS": "采样信号的非积分平移是前述的教科书示例。在我们的非积分运动矢量的例子中，我们希望说明这些像素处的基础图像“实际上是什么”；虽然我们对他们没有价值观，但我们觉得谈论他们是有意义的。这种感觉的正确性取决于基本信号的带宽限制，即不包含空间频率中的任何能量，这些能量无法以像素分辨率忠实呈现。在一维中，这种“OK”频率范围称为奈奎斯特频带；在整数网格样本的二维情况下，这个范围可以称为奈奎斯特矩形。网格越细，我们对图像的了解就越多，奈奎斯特矩形越宽。"
    },
    {
      "indent": 3,
      "text": "It turns out that, for such band-limited signals, there is indeed an exact mathematical formula to produce the correct sample value at an arbitrary point. Unfortunately, this calculation requires the consideration of every single sample in the image, as well as needing to operate at infinite precision. Also, strictly speaking, all band-limited signals have infinite spatial (or temporal) extent, so everything we are discussing is really some sort of approximation.",
      "zh-CHS": "事实证明，对于这种带限信号，确实存在一个精确的数学公式，可以在任意点产生正确的采样值。不幸的是，此计算需要考虑图像中的每个样本，并且需要以无限精度进行操作。而且，严格地说，所有带限信号都有无限的空间（或时间）范围，所以我们讨论的一切实际上都是某种近似。"
    },
    {
      "indent": 3,
      "text": "It is true that the theoretically correct subsampling procedure, as well as any approximation thereof, is always given by a translation-invariant weighted sum (or filter) similar to that used by VP8. It is also true that the reconstruction error made by such a filter can be simply represented as a multiplier in the frequency domain; that is, such filters simply multiply the Fourier transform of any signal to which they are applied by a fixed function associated to the filter. This fixed function is usually called the frequency response (or transfer function); the ideal subsampling filter has a frequency response equal to one in the Nyquist rectangle and zero everywhere else.",
      "zh-CHS": "的确，理论上正确的子采样过程及其任何近似值总是由平移不变加权和（或滤波器）给出，类似于VP8所使用的方法。同样，这种滤波器产生的重构误差可以简单地表示为频域中的乘法器；也就是说，这种滤波器只是将其应用到的任何信号的傅里叶变换乘以与滤波器相关联的固定函数。这种固定函数通常称为频率响应（或传递函数）；理想的子采样滤波器的频率响应在奈奎斯特矩形中等于一，在其他地方等于零。"
    },
    {
      "indent": 3,
      "text": "Another basic fact about approximations to \"truly correct\" subsampling is that the wider the subrectangle (within the Nyquist rectangle) of spatial frequencies one wishes to \"pass\" (that is, correctly render) or, put more accurately, the closer one wishes to approximate the ideal transfer function, the more samples of the original signal must be considered by the subsampling, and the wider the calculation precision necessitated.",
      "zh-CHS": "关于近似“真正正确”子采样的另一个基本事实是，希望“通过”（即正确渲染）的空间频率的子矩形（在奈奎斯特矩形内）越宽，或者更准确地说，希望近似理想传递函数的子矩形越近，子采样必须考虑的原始信号样本越多，计算精度就越高。"
    },
    {
      "indent": 3,
      "text": "The filters chosen by VP8 were chosen, within the constraints of 4 or 6 taps and 7-bit precision, to do the best possible job of handling the low spatial frequencies near the 0th DC frequency along with introducing no resonances (places where the absolute value of the frequency response exceeds one).",
      "zh-CHS": "VP8选择的滤波器在4或6抽头和7位精度的限制范围内，尽可能最好地处理第0个直流频率附近的低空间频率，同时不引入共振（频率响应的绝对值超过1的地方）。"
    },
    {
      "indent": 3,
      "text": "The justification for the foregoing has two parts. First, resonances can produce extremely objectionable visible artifacts when, as often happens in actual compressed video streams, filters are applied repeatedly. Second, the vast majority of energy in real-world images lies near DC and not at the high end.",
      "zh-CHS": "上述理由分为两部分。首先，当反复应用滤波器时，共振会产生非常令人讨厌的可见伪影，这在实际压缩视频流中经常发生。第二，现实世界图像中的绝大多数能量位于直流附近，而不是高端。"
    },
    {
      "indent": 3,
      "text": "To get slightly more specific, the filters chosen by VP8 are the best resonance-free 4- or 6-tap filters possible, where \"best\" describes the frequency response near the origin: The response at 0 is required to be 1, and the graph of the response at 0 is as flat as possible.",
      "zh-CHS": "更具体地说，VP8选择的滤波器是最好的无共振4抽头或6抽头滤波器，其中“最佳”描述原点附近的频率响应：0处的响应要求为1，0处的响应曲线尽可能平坦。"
    },
    {
      "indent": 3,
      "text": "To provide an intuitively more obvious point of reference, the \"best\" 2-tap filter is given by simple linear interpolation between the surrounding actual pixels.",
      "zh-CHS": "为了提供更直观的参考点，“最佳”2抽头滤波器通过周围实际像素之间的简单线性插值给出。"
    },
    {
      "indent": 3,
      "text": "Finally, it should be noted that, because of the way motion vectors are calculated, the (shorter) 4-tap filters (used for odd fractional displacements) are applied in the chroma plane only. Human color perception is notoriously poor, especially where higher spatial frequencies are involved. The shorter filters are easier to understand mathematically, and the difference between them and a theoretically slightly better 6-tap filter is negligible where chroma is concerned.",
      "zh-CHS": "最后，应注意，由于计算运动矢量的方式，仅在色度平面中应用（较短的）4抽头滤波器（用于奇数分数位移）。人类的颜色感知能力是出了名的差，尤其是在涉及更高空间频率的情况下。较短的滤波器在数学上更容易理解，它们与理论上稍好的6抽头滤波器之间的差异在色度方面可以忽略不计。"
    },
    {
      "indent": 0,
      "text": "19. Annex A: Bitstream Syntax",
      "section_title": true,
      "zh-CHS": "19. 附件A：比特流语法"
    },
    {
      "indent": 3,
      "text": "This annex presents the bitstream syntax in a tabular form. All the information elements have been introduced and explained in the previous sections but are collected here for a quick reference. Each syntax element is briefly described after the tabular representation along with a reference to the corresponding paragraph in the main document. The meaning of each syntax element value is not repeated here.",
      "zh-CHS": "本附录以表格形式提供了位流语法。所有的信息元素都在前面的章节中介绍和解释过，但这里收集的信息仅供快速参考。每个语法元素在表格表示法之后进行简要描述，并参考主文档中的相应段落。这里不重复每个语法元素值的含义。"
    },
    {
      "indent": 3,
      "text": "The top-level hierarchy of the bitstream is introduced in Section 4.",
      "zh-CHS": "第4节介绍了比特流的顶级层次结构。"
    },
    {
      "indent": 3,
      "text": "Definition of syntax element coding types can be found in Section 8. The types used in the representation in this annex are:",
      "zh-CHS": "语法元素编码类型的定义见第8节。本附件中表示中使用的类型为："
    },
    {
      "indent": 3,
      "text": "o f(n), n-bit value from stream (n successive bits, not boolean encoded)",
      "zh-CHS": "o f（n），来自流的n位值（n个连续位，非布尔编码）"
    },
    {
      "indent": 3,
      "text": "o L(n), n-bit number encoded as n booleans (with equal probability of being 0 or 1)",
      "zh-CHS": "o L（n），编码为n布尔的n位数字（0或1的概率相等）"
    },
    {
      "indent": 3,
      "text": "o B(p), bool with probability p of being 0",
      "zh-CHS": "o 概率p为0的B（p），bool"
    },
    {
      "indent": 3,
      "text": "o T, tree-encoded value",
      "zh-CHS": "o T、 树编码值"
    },
    {
      "indent": 0,
      "text": "19.1. Uncompressed Data Chunk",
      "section_title": true,
      "zh-CHS": "19.1. 未压缩数据块"
    },
    {
      "indent": 3,
      "text": "| Frame Tag                                         | Type  |\n| ------------------------------------------------- | ----- |\n| frame_tag                                         | f(24) |\n| if (key_frame) {                                  |       |\n|     start_code                                    | f(24) |\n|     horizontal_size_code                          | f(16) |\n|     vertical_size_code                            | f(16) |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The 3-byte frame tag can be parsed as follows:",
      "zh-CHS": "3字节帧标记可以按如下方式解析："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "unsigned char *c = pbi->source;\nunsigned int tmp;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "tmp = (c[2] << 16) | (c[1] << 8) | c[0];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "key_frame = tmp & 0x1;\nversion = (tmp >> 1) & 0x7;\nshow_frame = (tmp >> 4) & 0x1;\nfirst_part_size = (tmp >> 5) & 0x7FFFF;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Where:",
      "zh-CHS": "哪里："
    },
    {
      "indent": 3,
      "text": "o key_frame indicates whether the current frame is a key frame or not.",
      "zh-CHS": "o 关键帧指示当前帧是否为关键帧。"
    },
    {
      "indent": 3,
      "text": "o version determines the bitstream version.",
      "zh-CHS": "o 版本决定比特流的版本。"
    },
    {
      "indent": 3,
      "text": "o show_frame indicates whether the current frame is meant to be displayed or not.",
      "zh-CHS": "o show_frame指示是否要显示当前帧。"
    },
    {
      "indent": 3,
      "text": "o first_part_size determines the size of the first partition (control partition), excluding the uncompressed data chunk.",
      "zh-CHS": "o 第一部分大小决定第一个分区（控制分区）的大小，不包括未压缩的数据块。"
    },
    {
      "indent": 3,
      "text": "The start_code is a constant 3-byte pattern having value 0x9d012a. The latter part of the uncompressed chunk (after the start_code) can be parsed as follows:",
      "zh-CHS": "start_代码是一个恒定的3字节模式，其值为0x9d012a。未压缩块的后半部分（在start_代码之后）可以按如下方式解析："
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "unsigned char *c = pbi->source + 6;\nunsigned int tmp;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "tmp = (c[1] << 8) | c[0];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "width = tmp & 0x3FFF;\nhorizontal_scale = tmp >> 14;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "tmp = (c[3] << 8) | c[2];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "height = tmp & 0x3FFF;\nvertical_scale = tmp >> 14;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "19.2. Frame Header",
      "section_title": true,
      "zh-CHS": "19.2. 帧头"
    },
    {
      "indent": 3,
      "text": "| Frame Header                                      | Type  |\n| ------------------------------------------------- | ----- |\n| if (key_frame) {                                  |       |\n|   color_space                                     | L(1)  |\n|   clamping_type                                   | L(1)  |\n| }                                                 |       |\n| segmentation_enabled                              | L(1)  |\n| if (segmentation_enabled)                         |       |\n|   update_segmentation()                           |       |\n| filter_type                                       | L(1)  |\n| loop_filter_level                                 | L(6)  |\n| sharpness_level                                   | L(3)  |\n| mb_lf_adjustments()                               |       |\n| log2_nbr_of_dct_partitions                        | L(2)  |\n| quant_indices()                                   |       |\n| if (key_frame)                                    |       |\n|   refresh_entropy_probs                           | L(1)  |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "| else {                                            |       |\n|   refresh_golden_frame                            | L(1)  |\n|   refresh_alternate_frame                         | L(1)  |\n|   if (!refresh_golden_frame)                      |       |\n|     copy_buffer_to_golden                         | L(2)  |\n|   if (!refresh_alternate_frame)                   |       |\n|     copy_buffer_to_alternate                      | L(2)  |\n|   sign_bias_golden                                | L(1)  |\n|   sign_bias_alternate                             | L(1)  |\n|   refresh_entropy_probs                           | L(1)  |\n|   refresh_last                                    | L(1)  |\n| }                                                 |       |\n| token_prob_update()                               |       |\n| mb_no_skip_coeff                                  | L(1)  |\n| if (mb_no_skip_coeff)                             |       |\n|   prob_skip_false                                 | L(8)  |\n| if (!key_frame) {                                 |       |\n|   prob_intra                                      | L(8)  |\n|   prob_last                                       | L(8)  |\n|   prob_gf                                         | L(8)  |\n|   intra_16x16_prob_update_flag                    | L(1)  |\n|   if (intra_16x16_prob_update_flag) {             |       |\n|     for (i = 0; i < 4; i++)                       |       |\n|       intra_16x16_prob                            | L(8)  |\n|   }                                               |       |\n|   intra_chroma prob_update_flag                   | L(1)  |\n|   if (intra_chroma_prob_update_flag) {            |       |\n|     for (i = 0; i < 3; i++)                       |       |\n|       intra_chroma_prob                           | L(8)  |\n|   }                                               |       |\n|   mv_prob_update()                                |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o color_space defines the YUV color space of the sequence (Section 9.2)",
      "zh-CHS": "o 颜色空间定义序列的YUV颜色空间（第9.2节）"
    },
    {
      "indent": 3,
      "text": "o clamping_type specifies if the decoder is required to clamp the reconstructed pixel values (Section 9.2)",
      "zh-CHS": "o 钳制类型指定解码器是否需要钳制重构像素值（第9.2节）"
    },
    {
      "indent": 3,
      "text": "o segmentation_enabled enables the segmentation feature for the current frame (Section 9.3)",
      "zh-CHS": "o segmentation_enabled启用当前帧的分段功能（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o filter_type determines whether the normal or the simple loop filter is used (Sections 9.4, 15)",
      "zh-CHS": "o 过滤器类型决定使用普通还是简单环路过滤器（第9.4、15节）"
    },
    {
      "indent": 3,
      "text": "o loop_filter_level controls the deblocking filter (Sections 9.4, 15)",
      "zh-CHS": "o 环路滤波器电平控制去块滤波器（第9.4、15节）"
    },
    {
      "indent": 3,
      "text": "o sharpness_level controls the deblocking filter (Sections 9.4, 15)",
      "zh-CHS": "o 锐度水平控制去块滤波器（第9.4、15节）"
    },
    {
      "indent": 3,
      "text": "o log2_nbr_of_dct_partitions determines the number of separate partitions containing the DCT coefficients of the macroblocks (Section 9.5)",
      "zh-CHS": "o dct分区的log2\\u nbr\\u确定包含宏块dct系数的单独分区的数量（第9.5节）"
    },
    {
      "indent": 3,
      "text": "o refresh_entropy_probs determines whether updated token probabilities are used only for this frame or until further update",
      "zh-CHS": "o refresh_entropy_probs确定更新的令牌概率是仅用于此帧还是在进一步更新之前使用"
    },
    {
      "indent": 3,
      "text": "o refresh_golden_frame determines if the current decoded frame refreshes the golden frame (Section 9.7)",
      "zh-CHS": "o 刷新黄金帧确定当前解码帧是否刷新黄金帧（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o refresh_alternate_frame determines if the current decoded frame refreshes the alternate reference frame (Section 9.7)",
      "zh-CHS": "o refresh_alternate_frame确定当前解码帧是否刷新备用参考帧（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o copy_buffer_to_golden determines if the golden reference is replaced by another reference (Section 9.7)",
      "zh-CHS": "o 将“缓冲区”复制到“黄金”以确定黄金参考是否被另一参考替换（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o copy_buffer_to_alternate determines if the alternate reference is replaced by another reference (Section 9.7)",
      "zh-CHS": "o 将“缓冲区”复制到“备用”确定备用参考是否被另一个参考替换（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o sign_bias_golden controls the sign of motion vectors when the golden frame is referenced (Section 9.7)",
      "zh-CHS": "o 参考黄金帧时，符号\\偏差\\黄金控制运动矢量的符号（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o sign_bias_alternate controls the sign of motion vectors when the alternate frame is referenced (Section 9.7)",
      "zh-CHS": "o 符号\\偏移\\交替控制参考交替帧时运动矢量的符号（第9.7节）"
    },
    {
      "indent": 3,
      "text": "o refresh_last determines if the current decoded frame refreshes the last frame reference buffer (Section 9.8)",
      "zh-CHS": "o refresh_last确定当前解码帧是否刷新最后一帧参考缓冲区（第9.8节）"
    },
    {
      "indent": 3,
      "text": "o mb_no_skip_coeff enables or disables the skipping of macroblocks containing no non-zero coefficients (Section 9.10)",
      "zh-CHS": "o mb_no_skip_coeff启用或禁用跳过不包含非零系数的宏块（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o prob_skip_false indicates the probability that the macroblock is not skipped (flag indicating skipped macroblock is false) (Section 9.10)",
      "zh-CHS": "o prob_skip_false表示宏块未被跳过的概率（表示跳过的宏块为false的标志）（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o prob_intra indicates the probability of an intra macroblock (Section 9.10)",
      "zh-CHS": "o prob_intra表示帧内宏块的概率（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o prob_last indicates the probability that the last reference frame is used for inter-prediction (Section 9.10)",
      "zh-CHS": "o prob_last表示最后一个参考帧用于帧间预测的概率（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o prob_gf indicates the probability that the golden reference frame is used for inter-prediction (Section 9.10)",
      "zh-CHS": "o prob_gf表示黄金参考帧用于帧间预测的概率（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o intra_16x16_prob_update_flag indicates if the branch probabilities used in the decoding of the luma intra-prediction mode are updated (Section 9.10)",
      "zh-CHS": "o INTERRAL_16x16_prob_update_标志指示luma帧内预测模式解码中使用的分支概率是否更新（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o intra_16x16_prob indicates the branch probabilities of the luma intra-prediction mode decoding tree",
      "zh-CHS": "o intra_16x16_prob指示luma帧内预测模式解码树的分支概率"
    },
    {
      "indent": 3,
      "text": "o intra_chroma_prob_update_flag indicates if the branch probabilities used in the decoding of the chroma intra-prediction mode are updated (Section 9.10)",
      "zh-CHS": "o 帧内色度概率更新标志指示在色度帧内预测模式解码中使用的分支概率是否更新（第9.10节）"
    },
    {
      "indent": 3,
      "text": "o intra_chroma_prob indicates the branch probabilities of the chroma intra-prediction mode decoding tree",
      "zh-CHS": "o intra_chroma_prob指示色度帧内预测模式解码树的分支概率"
    },
    {
      "indent": 3,
      "text": "| update_segmentation()                             | Type  |\n| ------------------------------------------------- | ----- |\n| update_mb_segmentation_map                        | L(1)  |\n| update_segment_feature_data                       | L(1)  |\n| if (update_segment_feature_data) {                |       |\n|   segment_feature_mode                            | L(1)  |\n|   for (i = 0; i < 4; i++) {                       |       |\n|     quantizer_update                              | L(1)  |\n|     if (quantizer_update) {                       |       |\n|       quantizer_update_value                      | L(7)  |\n|       quantizer_update_sign                       | L(1)  |\n|     }                                             |       |\n|   }                                               |       |\n|   for (i = 0; i < 4; i++) {                       |       |\n|     loop_filter_update                            | L(1)  |\n|     if (loop_filter_update) {                     |       |\n|       lf_update_value                             | L(6)  |\n|       lf_update_sign                              | L(1)  |\n|     }                                             |       |\n|   }                                               |       |\n| }                                                 |       |\n| if (update_mb_segmentation_map) {                 |       |\n|   for (i = 0; i < 3; i++) {                       |       |\n|     segment_prob_update                           | L(1)  |\n|     if (segment_prob_update)                      |       |\n|       segment_prob                                | L(8)  |\n|   }                                               |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o update_mb_segmentation_map determines if the MB segmentation map is updated in the current frame (Section 9.3)",
      "zh-CHS": "o update_mb_segmentation_map确定mb segmentation map是否在当前帧中更新（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o update_segment_feature_data indicates if the segment feature data is updated in the current frame (Section 9.3)",
      "zh-CHS": "o 更新\\段\\特征\\数据表示段特征数据是否在当前帧中更新（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o segment_feature_mode indicates the feature data update mode, 0 for delta and 1 for the absolute value (Section 9.3)",
      "zh-CHS": "o 段\\特征\\模式表示特征数据更新模式，0表示增量，1表示绝对值（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o quantizer_update indicates if the quantizer value is updated for the i^(th) segment (Section 9.3)",
      "zh-CHS": "o 量化器_update表示是否为i^（th）段更新量化器值（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o quantizer_update_value indicates the update value for the segment quantizer (Section 9.3)",
      "zh-CHS": "o 量化器\\更新\\值表示段量化器的更新值（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o quantizer_update_sign indicates the update sign for the segment quantizer (Section 9.3)",
      "zh-CHS": "o 量化器\\更新\\符号表示段量化器的更新符号（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o loop_filter_update indicates if the loop filter level value is updated for the i^(th) segment (Section 9.3)",
      "zh-CHS": "o loop_filter_update表示是否为i^（th）段更新了loop过滤器级别值（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o lf_update_value indicates the update value for the loop filter level (Section 9.3)",
      "zh-CHS": "o lf_update_值表示循环过滤器级别的更新值（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o lf_update_sign indicates the update sign for the loop filter level (Section 9.3)",
      "zh-CHS": "o lf_update_符号表示循环过滤器级别的更新符号（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o segment_prob_update indicates whether the branch probabilities used to decode the segment_id in the MB header are decoded from the stream or use the default value of 255 (Section 9.3)",
      "zh-CHS": "o segment_prob_update表示用于解码MB头中的segment_id的分支概率是从流中解码的，还是使用默认值255（第9.3节）"
    },
    {
      "indent": 3,
      "text": "o segment_prob indicates the branch probabilities of the segment_id decoding tree (Section 9.3)",
      "zh-CHS": "o segment_prob表示segment_id解码树的分支概率（第9.3节）"
    },
    {
      "indent": 3,
      "text": "| mb_lf_adjustments()                               | Type  |\n| ------------------------------------------------- | ----- |\n| loop_filter_adj_enable                            | L(1)  |\n| if (loop_filter_adj_enable) {                     |       |\n|   mode_ref_lf_delta_update                        | L(1)  |\n|   if (mode_ref_lf_delta_update) {                 |       |\n|     for (i = 0; i < 4; i++) {                     |       |\n|       ref_frame_delta_update_flag                 | L(1)  |\n|       if (ref_frame_delta_update_flag) {          |       |\n|         delta_magnitude                           | L(6)  |\n|         delta_sign                                | L(1)  |\n|       }                                           |       |\n|     }                                             |       |\n|     for (i = 0; i < 4; i++) {                     |       |\n|       mb_mode_delta_update_flag                   | L(1)  |\n|       if (mb_mode_delta_update_flag) {            |       |\n|         delta_magnitude                           | L(6)  |\n|         delta_sign                                | L(1)  |\n|       }                                           |       |\n|     }                                             |       |\n|   }                                               |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o loop_filter_adj_enable indicates if the MB-level loop filter adjustment (based on the used reference frame and coding mode) is on for the current frame (Section 9.4)",
      "zh-CHS": "o loop_filter_adj_enable表示当前帧的MB级环路滤波器调整（基于使用的参考帧和编码模式）是否开启（第9.4节）"
    },
    {
      "indent": 3,
      "text": "o mode_ref_lf_delta_update indicates if the delta values used in an adjustment are updated in the current frame (Section 9.4)",
      "zh-CHS": "o 模式_ref_lf_delta_update表示调整中使用的delta值是否在当前帧中更新（第9.4节）"
    },
    {
      "indent": 3,
      "text": "o ref_frame_delta_update_flag indicates if the adjustment delta value corresponding to a certain used reference frame is updated (Section 9.4)",
      "zh-CHS": "o ref_frame_delta_update_标志表示是否更新了与某个使用的参考坐标系对应的调整delta值（第9.4节）"
    },
    {
      "indent": 3,
      "text": "o delta_magnitude is the absolute value of the delta value",
      "zh-CHS": "o delta_震级是delta值的绝对值"
    },
    {
      "indent": 3,
      "text": "o delta_sign is the sign of the delta value",
      "zh-CHS": "o delta_符号是delta值的符号"
    },
    {
      "indent": 3,
      "text": "o mb_mode_delta_update_flag indicates if the adjustment delta value corresponding to a certain MB prediction mode is updated (Section 9.4)",
      "zh-CHS": "o mb_mode_delta_update_标志指示是否更新了与某mb预测模式对应的调整delta值（第9.4节）"
    },
    {
      "indent": 3,
      "text": "| quant_indices()                                   | Type  |\n| ------------------------------------------------- | ----- |\n| y_ac_qi                                           | L(7)  |\n| y_dc_delta_present                                | L(1)  |\n| if (y_dc_delta_present) {                         |       |\n|   y_dc_delta_magnitude                            | L(4)  |\n|   y_dc_delta_sign                                 | L(1)  |\n| }                                                 |       |\n| y2_dc_delta_present                               | L(1)  |\n| if (y2_dc_delta_present) {                        |       |\n|   y2_dc_delta_magnitude                           | L(4)  |\n|   y2_dc_delta_sign                                | L(1)  |\n| }                                                 |       |\n| y2_ac_delta_present                               | L(1)  |\n| if (y2_ac_delta_present) {                        |       |\n|   y2_ac_delta_magnitude                           | L(4)  |\n|   y2_ac_delta_sign                                | L(1)  |\n| }                                                 |       |\n| uv_dc_delta_present                               | L(1)  |\n| if (uv_dc_delta_present) {                        |       |\n|   uv_dc_delta_magnitude                           | L(4)  |\n|   uv_dc_delta_sign                                | L(1)  |\n| }                                                 |       |\n| uv_ac_delta_present                               | L(1)  |\n| if (uv_ac_delta_present) {                        |       |\n|   uv_ac_delta_magnitude                           | L(4)  |\n|   uv_ac_delta_sign                                | L(1)  |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o y_ac_qi is the dequantization table index used for the luma AC coefficients (and other coefficient groups if no delta value is present) (Section 9.6)",
      "zh-CHS": "o y_ac_qi是用于luma ac系数（以及其他系数组，如果不存在增量值）的去量化表索引（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o y_dc_delta_present indicates if the stream contains a delta value that is added to the baseline index to obtain the luma DC coefficient dequantization index (Section 9.6)",
      "zh-CHS": "o y_dc_delta_present表示流是否包含一个增量值，该增量值被添加到基线索引以获得luma dc系数去量化索引（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o y_dc_delta_magnitude is the magnitude of the delta value (Section 9.6)",
      "zh-CHS": "o y_dc_delta_震级是delta值的震级（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o y_dc_delta_sign is the sign of the delta value (Section 9.6)",
      "zh-CHS": "o y_dc_delta_符号是delta值的符号（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o y2_dc_delta_present indicates if the stream contains a delta value that is added to the baseline index to obtain the Y2 block DC coefficient dequantization index (Section 9.6)",
      "zh-CHS": "o y2_dc_delta_present表示流是否包含添加到基线索引以获得y2块dc系数去量化索引的delta值（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o y2_ac_delta_present indicates if the stream contains a delta value that is added to the baseline index to obtain the Y2 block AC coefficient dequantization index (Section 9.6)",
      "zh-CHS": "o y2_ac_delta_present表示流是否包含一个增量值，该增量值被添加到基线索引以获得y2块ac系数去量化索引（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o uv_dc_delta_present indicates if the stream contains a delta value that is added to the baseline index to obtain the chroma DC coefficient dequantization index (Section 9.6)",
      "zh-CHS": "o uv_dc_delta_present表示流是否包含添加到基线索引以获得色度dc系数去量化索引的delta值（第9.6节）"
    },
    {
      "indent": 3,
      "text": "o uv_ac_delta_present indicates if the stream contains a delta value that is added to the baseline index to obtain the chroma AC coefficient dequantization index (Section 9.6)",
      "zh-CHS": "o uv_ac_delta_present表示流是否包含添加到基线索引以获得色度ac系数去量化索引的delta值（第9.6节）"
    },
    {
      "indent": 3,
      "text": "| token_prob_update()                               | Type  |\n| ------------------------------------------------- | ----- |\n| for (i = 0; i < 4; i++) {                         |       |\n|   for (j = 0; j < 8; j++) {                       |       |\n|     for (k = 0; k < 3; k++) {                     |       |\n|       for (l = 0; l < 11; l++) {                  |       |\n|         coeff_prob_update_flag                    | L(1)  |\n|         if (coeff_prob_update_flag)               |       |\n|           coeff_prob                              | L(8)  |\n|       }                                           |       |\n|     }                                             |       |\n|   }                                               |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o coeff_prob_update_flag indicates if the corresponding branch probability is updated in the current frame (Section 13.4)",
      "zh-CHS": "o coeff_prob_update_标志表示当前帧中是否更新了相应的分支概率（第13.4节）"
    },
    {
      "indent": 3,
      "text": "o coeff_prob is the new branch probability (Section 13.4)",
      "zh-CHS": "o coeff_prob是新的分支概率（第13.4节）"
    },
    {
      "indent": 3,
      "text": "| mv_prob_update()                                  | Type  |\n| ------------------------------------------------- | ----- |\n| for (i = 0; i < 2; i++) {                         |       |\n|   for (j = 0; j < 19; j++) {                      |       |\n|     mv_prob_update_flag                           | L(1)  |\n|     if (mv_prob_update_flag)                      |       |\n|       prob                                        | L(7)  |\n|   }                                               |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o mv_prob_update_flag indicates if the corresponding MV decoding probability is updated in the current frame (Section 17.2)",
      "zh-CHS": "o mv_prob_update_标志表示当前帧中是否更新了相应的mv解码概率（第17.2节）"
    },
    {
      "indent": 3,
      "text": "o prob is the updated probability (Section 17.2)",
      "zh-CHS": "o prob是更新的概率（第17.2节）"
    },
    {
      "indent": 0,
      "text": "19.3. Macroblock Data",
      "section_title": true,
      "zh-CHS": "19.3. 宏块数据"
    },
    {
      "indent": 3,
      "text": "| Macroblock Data                                   | Type  |\n| ------------------------------------------------- | ----- |\n| macroblock_header()                               |       |\n| residual_data()                                   |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "| macroblock_header()                               | Type  |\n| ------------------------------------------------- | ----- |\n| if (update_mb_segmentation_map)                   |       |\n|   segment_id                                      | T     |\n| if (mb_no_skip_coeff)                             |       |\n|   mb_skip_coeff                                   | B(p)  |\n| if (!key_frame)                                   |       |\n|   is_inter_mb                                     | B(p)  |\n| if (is_inter_mb) {                                |       |\n|   mb_ref_frame_sel1                               | B(p)  |\n|   if (mb_ref_frame_sel1)                          |       |\n|     mb_ref_frame_sel2                             | B(p)  |\n|   mv_mode                                         | T     |\n|   if (mv_mode == SPLITMV) {                       |       |\n|     mv_split_mode                                 | T     |\n|     for (i = 0; i < numMvs; i++) {                |       |\n|       sub_mv_mode                                 | T     |\n|       if (sub_mv_mode == NEWMV4x4) {              |       |\n|         read_mvcomponent()                        |       |\n|         read_mvcomponent()                        |       |\n|       }                                           |       |\n|     }                                             |       |\n|   } else if (mv_mode == NEWMV) {                  |       |\n|     read_mvcomponent()                            |       |\n|     read_mvcomponent()                            |       |\n|   }                                               |       |\n| } else { /* intra mb */                           |       |\n|   intra_y_mode                                    | T     |\n|   if (intra_y_mode == B_PRED) {                   |       |\n|     for (i = 0; i < 16; i++)                      |       |\n|       intra_b_mode                                | T     |\n|   }                                               |       |\n|   intra_uv_mode                                   | T     |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o segment_id indicates to which segment the macroblock belongs (Section 10)",
      "zh-CHS": "o 段\\ id指示宏块所属的段（第10节）"
    },
    {
      "indent": 3,
      "text": "o mb_skip_coeff indicates whether the macroblock contains any coded coefficients or not (Section 11.1)",
      "zh-CHS": "o mb_skip_coeff表示宏块是否包含任何编码系数（第11.1节）"
    },
    {
      "indent": 3,
      "text": "o is_inter_mb indicates whether the macroblock is intra- or inter-coded (Section 16)",
      "zh-CHS": "o is_inter_mb表示宏块是帧内编码还是帧间编码（第16节）"
    },
    {
      "indent": 3,
      "text": "o mb_ref_frame_sel1 selects the reference frame to be used; last frame (0), golden/alternate (1) (Section 16.2)",
      "zh-CHS": "o mb_ref_frame_sel1选择要使用的参考帧；最后一帧（0），金色/备选（1）（第16.2节）"
    },
    {
      "indent": 3,
      "text": "o mb_ref_frame_sel2 selects whether the golden (0) or alternate reference frame (1) is used (Section 16.2)",
      "zh-CHS": "o mb_ref_frame_sel2选择是使用黄金参考系（0）还是备用参考系（1）（第16.2节）"
    },
    {
      "indent": 3,
      "text": "o mv_mode determines the macroblock motion vector mode (Section 16.2)",
      "zh-CHS": "o mv_模式确定宏块运动矢量模式（第16.2节）"
    },
    {
      "indent": 3,
      "text": "o mv_split_mode gives the macroblock partitioning specification and determines the number of motion vectors used (numMvs) (Section 16.2)",
      "zh-CHS": "o mv_split_模式给出宏块分区规范，并确定使用的运动矢量数（NUMMV）（第16.2节）"
    },
    {
      "indent": 3,
      "text": "o sub_mv_mode determines the sub-macroblock motion vector mode for macroblocks coded using the SPLITMV motion vector mode (Section 16.2)",
      "zh-CHS": "o sub_mv_模式确定使用SPLITMV运动矢量模式编码的宏块的子宏块运动矢量模式（第16.2节）"
    },
    {
      "indent": 3,
      "text": "o intra_y_mode selects the luminance intra-prediction mode (Section 16.1)",
      "zh-CHS": "o 帧内模式选择亮度帧内预测模式（第16.1节）"
    },
    {
      "indent": 3,
      "text": "o intra_b_mode selects the sub-macroblock luminance prediction mode for macroblocks coded using B_PRED mode (Section 16.1)",
      "zh-CHS": "o 帧内b_模式为使用b_PRED模式编码的宏块选择子宏块亮度预测模式（第16.1节）"
    },
    {
      "indent": 3,
      "text": "o intra_uv_mode selects the chrominance intra-prediction mode (Section 16.1)",
      "zh-CHS": "o 帧内uv模式选择色度帧内预测模式（第16.1节）"
    },
    {
      "indent": 3,
      "text": "| residual_data()                                   | Type  |\n| ------------------------------------------------- | ----- |\n| if (!mb_skip_coeff) {                             |       |\n|   if ( (is_inter_mb && mv_mode != SPLITMV) ||     |       |\n|        (!is_inter_mb && intra_y_mode != B_PRED) ) |       |\n|     residual_block() /* Y2 */                     |       |\n|   for (i = 0; i < 24; i++)                        |       |\n|     residual_block() /* 16 Y, 4 U, 4 V */         |       |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "| residual_block()                                  | Type  |\n| ------------------------------------------------- | ----- |\n| for (i = firstCoeff; i < 16; i++) {               |       |\n|   token                                           | T     |\n|   if (token == EOB) break;                        |       |\n|   if (token_has_extra_bits)                       |       |\n|     extra_bits                                    | L(n)  |\n|   if (coefficient != 0)                           |       |\n|     sign                                          | L(1)  |\n| }                                                 |       |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "o firstCoeff is 1 for luma blocks of macroblocks containing Y2 subblock; otherwise 0",
      "zh-CHS": "o 对于包含Y2子块的宏块的luma块，firstCoeff为1；否则0"
    },
    {
      "indent": 3,
      "text": "o token defines the value of the coefficient, the value range of the coefficient, or the end of block (Section 13.2)",
      "zh-CHS": "o 标记定义了系数的值、系数的值范围或块的末尾（第13.2节）"
    },
    {
      "indent": 3,
      "text": "o extra_bits determines the value of the coefficient within the value range defined by the token (Section 13.2)",
      "zh-CHS": "o 额外_位确定令牌定义的值范围内的系数值（第13.2节）"
    },
    {
      "indent": 3,
      "text": "o sign indicates the sign of the coefficient (Section 13.2)",
      "zh-CHS": "o 符号表示系数的符号（第13.2节）"
    },
    {
      "indent": 0,
      "text": "20. Attachment One: Reference Decoder Source Code",
      "section_title": true,
      "zh-CHS": "20. 附件一：参考解码器源代码"
    },
    {
      "indent": 0,
      "text": "20.1. bit_ops.h",
      "section_title": true,
      "zh-CHS": "20.1. 比特运算"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef BIT_OPS_H\n#define BIT_OPS_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Evaluates to a mask with n bits set */\n#define BITS_MASK(n) ((1<<(n))-1)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Returns len bits, with the LSB at position bit */\n#define BITS_GET(val, bit, len) (((val)>>(bit))&BITS_MASK(len))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.2. bool_decoder.h",
      "section_title": true,
      "zh-CHS": "20.2. bool_解码器"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef BOOL_DECODER_H\n#define BOOL_DECODER_H\n#include <stddef.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct bool_decoder\n{\n    const unsigned char *input;      /* next compressed data byte */\n    size_t               input_len;  /* length of the input buffer */\n    unsigned int         range;      /* identical to encoder's\n                                      * range */\n    unsigned int         value;      /* contains at least 8\n                                      * significant bits */\n    int                  bit_count;  /* # of bits shifted out of\n                                      * value, max 7 */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ninit_bool_decoder(struct bool_decoder *d,\n                  const unsigned char *start_partition,\n                  size_t               sz)\n{\n    if (sz >= 2)\n    {\n        d->value = (start_partition[0] << 8) /* first 2 input\n                                              * bytes */\n                   | start_partition[1];\n        d->input = start_partition + 2;      /* ptr to next byte */\n        d->input_len = sz - 2;\n    }\n    else\n    {\n        d->value = 0;\n        d->input = NULL;\n        d->input_len = 0;\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    d->range = 255;    /* initial range is full */\n    d->bit_count = 0;  /* have not yet shifted out any bits */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int bool_get(struct bool_decoder *d, int probability)\n{\n    /* range and split are identical to the corresponding values\n       used by the encoder when this bool was written */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "unsigned int  split = 1 + (((d->range - 1) * probability) >> 8);\nunsigned int  SPLIT = split << 8;\nint           retval;           /* will be 0 or 1 */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (d->value >= SPLIT)    /* encoded a one */\n{\n    retval = 1;\n    d->range -= split;  /* reduce range */\n    d->value -= SPLIT;  /* subtract off left endpoint of\n                         * interval */\n}\nelse                  /* encoded a zero */\n{\n    retval = 0;\n    d->range = split; /* reduce range, no change in left\n                       * endpoint */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "while (d->range < 128)    /* shift out irrelevant value bits */\n{\n    d->value <<= 1;\n    d->range <<= 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (++d->bit_count == 8)  /* shift in new bits 8 at a time */\n{\n    d->bit_count = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        if (d->input_len)\n        {\n            d->value |= *d->input++;\n            d->input_len--;\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return retval;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int bool_get_bit(struct bool_decoder *br)\n{\n    return bool_get(br, 128);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int bool_get_uint(struct bool_decoder *br, int bits)\n{\n    int z = 0;\n    int bit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (bit = bits - 1; bit >= 0; bit--)\n{\n    z |= (bool_get_bit(br) << bit);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return z;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int bool_get_int(struct bool_decoder *br, int bits)\n{\n    int z = 0;\n    int bit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (bit = bits - 1; bit >= 0; bit--)\n{\n    z |= (bool_get_bit(br) << bit);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return bool_get_bit(br) ? -z : z;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int bool_maybe_get_int(struct bool_decoder *br, int bits)\n{\n    return bool_get_bit(br) ? bool_get_int(br, bits) : 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nbool_read_tree(struct bool_decoder *bool,\n               const int           *t,\n               const unsigned char *p)\n{\n    int i = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "while ((i = t[ i + bool_get(bool, p[i>>1])]) > 0);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return -i;\n}\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.3. dequant_data.h",
      "section_title": true,
      "zh-CHS": "20.3. dequant_data.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int dc_q_lookup[128] =\n{\n    4,    5,    6,    7,    8,    9,    10,   10,\n    11,   12,   13,   14,   15,   16,   17,   17,\n    18,   19,   20,   20,   21,   21,   22,   22,\n    23,   23,   24,   25,   25,   26,   27,   28,\n    29,   30,   31,   32,   33,   34,   35,   36,\n    37,   37,   38,   39,   40,   41,   42,   43,\n    44,   45,   46,   46,   47,   48,   49,   50,\n    51,   52,   53,   54,   55,   56,   57,   58,\n    59,   60,   61,   62,   63,   64,   65,   66,\n    67,   68,   69,   70,   71,   72,   73,   74,\n    75,   76,   76,   77,   78,   79,   80,   81,\n    82,   83,   84,   85,   86,   87,   88,   89,\n    91,   93,   95,   96,   98,   100,  101,  102,\n    104,  106,  108,  110,  112,  114,  116,  118,\n    122,  124,  126,  128,  130,  132,  134,  136,\n    138,  140,  143,  145,  148,  151,  154,  157\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int ac_q_lookup[128] = { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152,",
      "zh-CHS": "静态常量int ac_q_查找[128]={ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152,"
    },
    {
      "indent": 3,
      "text": " 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284 };",
      "zh-CHS": "155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284 };"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.4. dixie.c",
      "section_title": true,
      "zh-CHS": "20.4. 迪克西"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"vpx_codec_internal.h\"\n#include \"bit_ops.h\"\n#include \"dixie.h\"\n#include \"vp8_prob_data.h\"\n#include \"dequant_data.h\"\n#include \"modemv.h\"\n#include \"tokens.h\"\n#include \"predict.h\"\n#include \"dixie_loopfilter.h\"\n#include <string.h>\n#include <assert.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    FRAME_HEADER_SZ = 3,\n    KEYFRAME_HEADER_SZ = 7\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define ARRAY_COPY(a,b) {\\\n    assert(sizeof(a)==sizeof(b));memcpy(a,b,sizeof(a));}\nstatic void\ndecode_entropy_header(struct vp8_decoder_ctx    *ctx,\n                      struct bool_decoder       *bool,\n                      struct vp8_entropy_hdr    *hdr)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "{\n    int i, j, k, l;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Read coefficient probability updates */\nfor (i = 0; i < BLOCK_TYPES; i++)\n    for (j = 0; j < COEFF_BANDS; j++)\n        for (k = 0; k < PREV_COEFF_CONTEXTS; k++)\n            for (l = 0; l < ENTROPY_NODES; l++)\n                if (bool_get(bool,\n                             k_coeff_entropy_update_probs\n                                 [i][j][k][l]))\n                    hdr->coeff_probs[i][j][k][l] =\n                        bool_get_uint(bool, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Read coefficient skip mode probability */\nhdr->coeff_skip_enabled = bool_get_bit(bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (hdr->coeff_skip_enabled)\n    hdr->coeff_skip_prob = bool_get_uint(bool, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Parse interframe probability updates */\nif (!ctx->frame_hdr.is_keyframe)\n{\n    hdr->prob_inter = bool_get_uint(bool, 8);\n    hdr->prob_last  = bool_get_uint(bool, 8);\n    hdr->prob_gf    = bool_get_uint(bool, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (bool_get_bit(bool))\n    for (i = 0; i < 4; i++)\n        hdr->y_mode_probs[i] = bool_get_uint(bool, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (bool_get_bit(bool))\n    for (i = 0; i < 3; i++)\n        hdr->uv_mode_probs[i] = bool_get_uint(bool, 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        for (i = 0; i < 2; i++)\n            for (j = 0; j < MV_PROB_CNT; j++)\n                if (bool_get(bool, k_mv_entropy_update_probs[i][j]))\n                {\n                    int x = bool_get_uint(bool, 7);\n                    hdr->mv_probs[i][j] = x ? x << 1 : 1;\n                }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_reference_header(struct vp8_decoder_ctx    *ctx,\n                        struct bool_decoder       *bool,\n                        struct vp8_reference_hdr  *hdr)\n{\n    unsigned int key = ctx->frame_hdr.is_keyframe;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    hdr->refresh_gf    = key ? 1 : bool_get_bit(bool);\n    hdr->refresh_arf   = key ? 1 : bool_get_bit(bool);\n    hdr->copy_gf       = key ? 0 : !hdr->refresh_gf\n                         ? bool_get_uint(bool, 2) : 0;\n    hdr->copy_arf      = key ? 0 : !hdr->refresh_arf\n                         ? bool_get_uint(bool, 2) : 0;\n    hdr->sign_bias[GOLDEN_FRAME] = key ? 0 : bool_get_bit(bool);\n    hdr->sign_bias[ALTREF_FRAME] = key ? 0 : bool_get_bit(bool);\n    hdr->refresh_entropy = bool_get_bit(bool);\n    hdr->refresh_last  = key ? 1 : bool_get_bit(bool);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_quantizer_header(struct vp8_decoder_ctx    *ctx,\n                        struct bool_decoder       *bool,\n                        struct vp8_quant_hdr      *hdr)\n{\n    int update;\n    int last_q = hdr->q_index;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    hdr->q_index = bool_get_uint(bool, 7);\n    update = last_q != hdr->q_index;\n    update |= (hdr->y1_dc_delta_q = bool_maybe_get_int(bool, 4));\n    update |= (hdr->y2_dc_delta_q = bool_maybe_get_int(bool, 4));\n    update |= (hdr->y2_ac_delta_q = bool_maybe_get_int(bool, 4));\n    update |= (hdr->uv_dc_delta_q = bool_maybe_get_int(bool, 4));\n    update |= (hdr->uv_ac_delta_q = bool_maybe_get_int(bool, 4));\n    hdr->delta_update = update;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void decode_and_init_token_partitions(struct vp8_decoder_ctx *ctx, struct bool_decoder *bool, const unsigned char *data, unsigned int sz, struct vp8_token_hdr *hdr)",
      "zh-CHS": "静态void decode_和_init_token_分区（struct vp8_decoder_ctx*ctx，struct bool_decoder*bool，const unsigned char*data，unsigned int sz，struct vp8_token_hdr*hdr）"
    },
    {
      "indent": 3,
      "text": "{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "hdr->partitions = 1 << bool_get_uint(bool, 2);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (sz < 3 *(hdr->partitions - 1))\n    vpx_internal_error(&ctx->error, VPX_CODEC_CORRUPT_FRAME,\n                       \"Truncated packet found parsing partition\"\n                       \" lengths.\");",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "sz -= 3 * (hdr->partitions - 1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < hdr->partitions; i++)\n{\n    if (i < hdr->partitions - 1)\n    {\n        hdr->partition_sz[i] = (data[2] << 16)\n                               | (data[1] << 8) | data[0];\n        data += 3;\n    }\n    else\n        hdr->partition_sz[i] = sz;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (sz < hdr->partition_sz[i])\n    vpx_internal_error(&ctx->error, VPX_CODEC_CORRUPT_FRAME,\n                       \"Truncated partition %d\", i);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    sz -= hdr->partition_sz[i];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < ctx->token_hdr.partitions; i++)\n    {\n        init_bool_decoder(&ctx->tokens[i].bool, data,\n                          ctx->token_hdr.partition_sz[i]);\n        data += ctx->token_hdr.partition_sz[i];\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void decode_loopfilter_header(struct vp8_decoder_ctx *ctx, struct bool_decoder *bool, struct vp8_loopfilter_hdr *hdr)",
      "zh-CHS": "静态无效解码\\u loopfilter\\u头（结构vp8\\u解码器\\u ctx*ctx，结构bool\\u解码器*bool，结构vp8\\u loopfilter\\u hdr*hdr）"
    },
    {
      "indent": 3,
      "text": "{\n    if (ctx->frame_hdr.is_keyframe)\n        memset(hdr, 0, sizeof(*hdr));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "hdr->use_simple    = bool_get_bit(bool);\nhdr->level         = bool_get_uint(bool, 6);\nhdr->sharpness     = bool_get_uint(bool, 3);\nhdr->delta_enabled = bool_get_bit(bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (hdr->delta_enabled && bool_get_bit(bool))\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < BLOCK_CONTEXTS; i++)\n    hdr->ref_delta[i] = bool_maybe_get_int(bool, 6);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        for (i = 0; i < BLOCK_CONTEXTS; i++)\n            hdr->mode_delta[i] = bool_maybe_get_int(bool, 6);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_segmentation_header(struct vp8_decoder_ctx *ctx,\n                           struct bool_decoder    *bool,\n                           struct vp8_segment_hdr *hdr)\n{\n    if (ctx->frame_hdr.is_keyframe)\n        memset(hdr, 0, sizeof(*hdr));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "hdr->enabled = bool_get_bit(bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (hdr->enabled)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "hdr->update_map = bool_get_bit(bool);\nhdr->update_data = bool_get_bit(bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (hdr->update_data)\n{\n    hdr->abs = bool_get_bit(bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "for (i = 0; i < MAX_MB_SEGMENTS; i++)\n    hdr->quant_idx[i] = bool_maybe_get_int(bool, 7);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    for (i = 0; i < MAX_MB_SEGMENTS; i++)\n        hdr->lf_level[i] = bool_maybe_get_int(bool, 6);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (hdr->update_map)\n        {\n            for (i = 0; i < MB_FEATURE_TREE_PROBS; i++)\n                hdr->tree_probs[i] = bool_get_bit(bool)\n                                     ? bool_get_uint(bool, 8)\n                                     : 255;\n        }\n    }\n    else\n    {\n        hdr->update_map = 0;\n        hdr->update_data = 0;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndequant_global_init(struct dequant_factors dqf[MAX_MB_SEGMENTS])\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < MAX_MB_SEGMENTS; i++)\n        dqf[i].quant_idx = -1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nclamp_q(int q)\n{\n    if (q < 0) return 0;\n    else if (q > 127) return 127;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return q;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\ndc_q(int q)\n{\n    return dc_q_lookup[clamp_q(q)];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nac_q(int q)\n{\n    return ac_q_lookup[clamp_q(q)];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndequant_init(struct dequant_factors        factors[MAX_MB_SEGMENTS],\n             const struct vp8_segment_hdr *seg,\n             const struct vp8_quant_hdr   *quant_hdr)\n{\n    int i, q;\n    struct dequant_factors *dqf = factors;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < (seg->enabled ? MAX_MB_SEGMENTS : 1); i++)\n{\n    q = quant_hdr->q_index;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (seg->enabled)\n    q = (!seg->abs) ? q + seg->quant_idx[i]\n                    : seg->quant_idx[i];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (dqf->quant_idx != q || quant_hdr->delta_update)\n{\n    dqf->factor[TOKEN_BLOCK_Y1][0] =\n        dc_q(q + quant_hdr->y1_dc_delta_q);\n    dqf->factor[TOKEN_BLOCK_Y1][1] =\n        ac_q(q);\n    dqf->factor[TOKEN_BLOCK_UV][0] =\n        dc_q(q + quant_hdr->uv_dc_delta_q);\n    dqf->factor[TOKEN_BLOCK_UV][1] =\n        ac_q(q + quant_hdr->uv_ac_delta_q);\n    dqf->factor[TOKEN_BLOCK_Y2][0] =\n        dc_q(q + quant_hdr->y2_dc_delta_q) * 2;\n    dqf->factor[TOKEN_BLOCK_Y2][1] =\n        ac_q(q + quant_hdr->y2_ac_delta_q) * 155 / 100;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (dqf->factor[TOKEN_BLOCK_Y2][1] < 8)\n    dqf->factor[TOKEN_BLOCK_Y2][1] = 8;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (dqf->factor[TOKEN_BLOCK_UV][0] > 132)\n    dqf->factor[TOKEN_BLOCK_UV][0] = 132;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    dqf->quant_idx = q;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        dqf++;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_frame(struct vp8_decoder_ctx *ctx,\n             const unsigned char    *data,\n             unsigned int            sz)\n{\n    vpx_codec_err_t  res;\n    struct bool_decoder  bool;\n    int                  i, row, partition;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ctx->saved_entropy_valid = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if ((res = vp8_parse_frame_header(data, sz, &ctx->frame_hdr)))\n    vpx_internal_error(&ctx->error, res,\n                       \"Failed to parse frame header\");",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->frame_hdr.is_experimental) vpx_internal_error(&ctx->error, VPX_CODEC_UNSUP_BITSTREAM, \"Experimental bitstreams not supported.\");",
      "zh-CHS": "如果（ctx->frame_hdr.是实验性的）vpx_内部错误（&ctx->错误，vpx_编解码器_UNSUP_比特流，“不支持实验性比特流”）；"
    },
    {
      "indent": 7,
      "text": "data += FRAME_HEADER_SZ;\nsz -= FRAME_HEADER_SZ;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->frame_hdr.is_keyframe)\n{\n    data += KEYFRAME_HEADER_SZ;\n    sz -= KEYFRAME_HEADER_SZ;\n    ctx->mb_cols = (ctx->frame_hdr.kf.w + 15) / 16;\n    ctx->mb_rows = (ctx->frame_hdr.kf.h + 15) / 16;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Start the bitreader for the header/entropy partition */\ninit_bool_decoder(&bool, data, ctx->frame_hdr.part0_sz);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Skip the colorspace and clamping bits */\nif (ctx->frame_hdr.is_keyframe)\n    if (bool_get_uint(&bool, 2))\n        vpx_internal_error(\n            &ctx->error, VPX_CODEC_UNSUP_BITSTREAM,\n            \"Reserved bits not supported.\");",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "decode_segmentation_header(ctx, &bool, &ctx->segment_hdr);\ndecode_loopfilter_header(ctx, &bool, &ctx->loopfilter_hdr);\ndecode_and_init_token_partitions(ctx,\n                                 &bool,\n                                 data + ctx->frame_hdr.part0_sz,\n                                 sz - ctx->frame_hdr.part0_sz,\n                                 &ctx->token_hdr);\ndecode_quantizer_header(ctx, &bool, &ctx->quant_hdr);\ndecode_reference_header(ctx, &bool, &ctx->reference_hdr);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Set keyframe entropy defaults.  These get updated on keyframes\n * regardless of the refresh_entropy setting.\n */\nif (ctx->frame_hdr.is_keyframe)\n{\n    ARRAY_COPY(ctx->entropy_hdr.coeff_probs,\n               k_default_coeff_probs);\n    ARRAY_COPY(ctx->entropy_hdr.mv_probs,\n               k_default_mv_probs);\n    ARRAY_COPY(ctx->entropy_hdr.y_mode_probs,\n               k_default_y_mode_probs);\n    ARRAY_COPY(ctx->entropy_hdr.uv_mode_probs,\n               k_default_uv_mode_probs);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!ctx->reference_hdr.refresh_entropy)\n{\n    ctx->saved_entropy = ctx->entropy_hdr;\n    ctx->saved_entropy_valid = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "decode_entropy_header(ctx, &bool, &ctx->entropy_hdr);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "vp8_dixie_modemv_init(ctx);\nvp8_dixie_tokens_init(ctx);\nvp8_dixie_predict_init(ctx);\ndequant_init(ctx->dequant_factors, &ctx->segment_hdr,\n             &ctx->quant_hdr);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (row = 0, partition = 0; row < ctx->mb_rows; row++)\n{\n    vp8_dixie_modemv_process_row(\n        ctx, &bool, row, 0, ctx->mb_cols);\n    vp8_dixie_tokens_process_row(ctx, partition, row, 0,\n                                 ctx->mb_cols);\n    vp8_dixie_predict_process_row(ctx, row, 0, ctx->mb_cols);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (ctx->loopfilter_hdr.level && row)\n    vp8_dixie_loopfilter_process_row(ctx, row - 1, 0,\n                                     ctx->mb_cols);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (++partition == ctx->token_hdr.partitions)\n        partition = 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->loopfilter_hdr.level)\n    vp8_dixie_loopfilter_process_row(\n        ctx, row - 1, 0, ctx->mb_cols);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ctx->frame_cnt++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!ctx->reference_hdr.refresh_entropy)\n{\n    ctx->entropy_hdr = ctx->saved_entropy;\n    ctx->saved_entropy_valid = 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Handle reference frame updates */\nif (ctx->reference_hdr.copy_arf == 1)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[ALTREF_FRAME]);\n    ctx->ref_frames[ALTREF_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[LAST_FRAME]);\n}\nelse if (ctx->reference_hdr.copy_arf == 2)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[ALTREF_FRAME]);\n    ctx->ref_frames[ALTREF_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[GOLDEN_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->reference_hdr.copy_gf == 1)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[GOLDEN_FRAME]);\n    ctx->ref_frames[GOLDEN_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[LAST_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "else if (ctx->reference_hdr.copy_gf == 2)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[GOLDEN_FRAME]);\n    ctx->ref_frames[GOLDEN_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[ALTREF_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->reference_hdr.refresh_gf)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[GOLDEN_FRAME]);\n    ctx->ref_frames[GOLDEN_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[CURRENT_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->reference_hdr.refresh_arf)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[ALTREF_FRAME]);\n    ctx->ref_frames[ALTREF_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[CURRENT_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->reference_hdr.refresh_last)\n{\n    vp8_dixie_release_ref_frame(ctx->ref_frames[LAST_FRAME]);\n    ctx->ref_frames[LAST_FRAME] =\n        vp8_dixie_ref_frame(ctx->ref_frames[CURRENT_FRAME]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_decode_init(struct vp8_decoder_ctx *ctx)\n{\n    dequant_global_init(ctx->dequant_factors);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define CHECK_FOR_UPDATE(lval,rval,update_flag) do {\\\n        unsigned int old = lval; \\\n        update_flag |= (old != (lval = rval)); \\\n    } while (0)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "vpx_codec_err_t\nvp8_parse_frame_header(const unsigned char   *data,\n                       unsigned int           sz,\n                       struct vp8_frame_hdr  *hdr)\n{\n    unsigned long raw;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (sz < 10) return VPX_CODEC_CORRUPT_FRAME;",
      "zh-CHS": "如果（sz<10）返回VPX_编解码器_损坏_帧；"
    },
    {
      "indent": 7,
      "text": "/* The frame header is defined as a three-byte little endian\n * value\n */\nraw = data[0] | (data[1] << 8) | (data[2] << 16);\nhdr->is_keyframe     = !BITS_GET(raw, 0, 1);\nhdr->version         = BITS_GET(raw, 1, 2);\nhdr->is_experimental = BITS_GET(raw, 3, 1);\nhdr->is_shown        = BITS_GET(raw, 4, 1);\nhdr->part0_sz        = BITS_GET(raw, 5, 19);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (sz <= hdr->part0_sz + (hdr->is_keyframe ? 10 : 3))\n    return VPX_CODEC_CORRUPT_FRAME;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "hdr->frame_size_updated = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (hdr->is_keyframe)\n{\n    unsigned int update = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Keyframe header consists of a three-byte sync code\n * followed by the width and height and associated scaling\n * factors.\n */\nif (data[3] != 0x9d || data[4] != 0x01 || data[5] != 0x2a)\n    return VPX_CODEC_UNSUP_BITSTREAM;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "raw = data[6] | (data[7] << 8)\n      | (data[8] << 16) | (data[9] << 24);\nCHECK_FOR_UPDATE(hdr->kf.w,       BITS_GET(raw,  0, 14),\n                 update);\nCHECK_FOR_UPDATE(hdr->kf.scale_w, BITS_GET(raw, 14,  2),\n                 update);\nCHECK_FOR_UPDATE(hdr->kf.h,       BITS_GET(raw, 16, 14),\n                 update);\nCHECK_FOR_UPDATE(hdr->kf.scale_h, BITS_GET(raw, 30,  2),\n                 update);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "hdr->frame_size_updated = update;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (!hdr->kf.w || !hdr->kf.h)\n        return VPX_CODEC_UNSUP_BITSTREAM;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return VPX_CODEC_OK;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "vpx_codec_err_t\nvp8_dixie_decode_frame(struct vp8_decoder_ctx *ctx,\n                       const unsigned char    *data,\n                       unsigned int            sz)\n{\n    volatile struct vp8_decoder_ctx *ctx_ = ctx;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ctx->error.error_code = VPX_CODEC_OK;\nctx->error.has_detail = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!setjmp(ctx->error.jmp))\n    decode_frame(ctx, data, sz);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return ctx_->error.error_code;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_decode_destroy(struct vp8_decoder_ctx *ctx)\n{\n    vp8_dixie_predict_destroy(ctx);\n    vp8_dixie_tokens_destroy(ctx);\n    vp8_dixie_modemv_destroy(ctx);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.5. dixie.h",
      "section_title": true,
      "zh-CHS": "20.5. 迪克西"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef DIXIE_H\n#define DIXIE_H\n#include \"vpx_codec_internal.h\"\n#include \"bool_decoder.h\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_frame_hdr\n{\n    unsigned int is_keyframe;      /* Frame is a keyframe */\n    unsigned int is_experimental;  /* Frame is a keyframe */\n    unsigned int version;          /* Bitstream version */\n    unsigned int is_shown;         /* Frame is to be displayed. */\n    unsigned int part0_sz;         /* Partition 0 length, in bytes */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "struct vp8_kf_hdr\n{\n    unsigned int w;        /* Width */\n    unsigned int h;        /* Height */\n    unsigned int scale_w;  /* Scaling factor, Width */\n    unsigned int scale_h;  /* Scaling factor, Height */\n} kf;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    unsigned int frame_size_updated; /* Flag to indicate a resolution\n                                      * update.\n                                      */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    MB_FEATURE_TREE_PROBS = 3,\n    MAX_MB_SEGMENTS = 4\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_segment_hdr\n{\n    unsigned int         enabled;\n    unsigned int         update_data;\n    unsigned int         update_map;\n    unsigned int         abs;    /* 0=deltas, 1=absolute values */\n    unsigned int         tree_probs[MB_FEATURE_TREE_PROBS];\n    int                  lf_level[MAX_MB_SEGMENTS];\n    int                  quant_idx[MAX_MB_SEGMENTS];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "};",
      "zh-CHS": "};"
    },
    {
      "indent": 3,
      "text": "enum\n{\n    BLOCK_CONTEXTS = 4\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_loopfilter_hdr\n{\n    unsigned int         use_simple;\n    unsigned int         level;\n    unsigned int         sharpness;\n    unsigned int         delta_enabled;\n    int                  ref_delta[BLOCK_CONTEXTS];\n    int                  mode_delta[BLOCK_CONTEXTS];\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    MAX_PARTITIONS = 8\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_token_hdr\n{\n    unsigned int        partitions;\n    unsigned int        partition_sz[MAX_PARTITIONS];\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_quant_hdr\n{\n    unsigned int       q_index;\n    int                delta_update;\n    int                y1_dc_delta_q;\n    int                y2_dc_delta_q;\n    int                y2_ac_delta_q;\n    int                uv_dc_delta_q;\n    int                uv_ac_delta_q;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_reference_hdr\n{\n    unsigned int refresh_last;\n    unsigned int refresh_gf;\n    unsigned int refresh_arf;\n    unsigned int copy_gf;\n    unsigned int copy_arf;\n    unsigned int sign_bias[4];\n    unsigned int refresh_entropy;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    BLOCK_TYPES        = 4,\n    PREV_COEFF_CONTEXTS = 3,\n    COEFF_BANDS         = 8,\n    ENTROPY_NODES      = 11,\n};\ntypedef unsigned char coeff_probs_table_t[BLOCK_TYPES][COEFF_BANDS]\n[PREV_COEFF_CONTEXTS]\n[ENTROPY_NODES];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    MV_PROB_CNT = 2 + 8 - 1 + 10 /* from entropymv.h */\n};\ntypedef unsigned char mv_component_probs_t[MV_PROB_CNT];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_entropy_hdr\n{\n    coeff_probs_table_t   coeff_probs;\n    mv_component_probs_t  mv_probs[2];\n    unsigned int          coeff_skip_enabled;\n    unsigned char         coeff_skip_prob;\n    unsigned char         y_mode_probs[4];\n    unsigned char         uv_mode_probs[3];\n    unsigned char         prob_inter;\n    unsigned char         prob_last;\n    unsigned char         prob_gf;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum reference_frame\n{\n    CURRENT_FRAME,\n    LAST_FRAME,\n    GOLDEN_FRAME,\n    ALTREF_FRAME,\n    NUM_REF_FRAMES\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum prediction_mode\n{\n    /* 16x16 intra modes */\n    DC_PRED, V_PRED, H_PRED, TM_PRED, B_PRED,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* 16x16 inter modes */\nNEARESTMV, NEARMV, ZEROMV, NEWMV, SPLITMV,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "MB_MODE_COUNT,",
      "zh-CHS": "MB_模式_计数，"
    },
    {
      "indent": 7,
      "text": "/* 4x4 intra modes */\nB_DC_PRED = 0, B_TM_PRED, B_VE_PRED, B_HE_PRED, B_LD_PRED,\nB_RD_PRED, B_VR_PRED, B_VL_PRED, B_HD_PRED, B_HU_PRED,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* 4x4 inter modes */\nLEFT4X4, ABOVE4X4, ZERO4X4, NEW4X4,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": " B_MODE_COUNT };",
      "zh-CHS": "B_模式_计数}；"
    },
    {
      "indent": 3,
      "text": "enum splitmv_partitioning\n{\n    SPLITMV_16X8,\n    SPLITMV_8X16,\n    SPLITMV_8X8,\n    SPLITMV_4X4\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef short filter_t[6];",
      "zh-CHS": "typedef短过滤器[6]；"
    },
    {
      "indent": 3,
      "text": "typedef union mv\n{\n    struct\n    {\n        int16_t x, y;\n    }  d;\n    uint32_t               raw;\n} mv_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct mb_base_info\n{\n    unsigned char y_mode     : 4;\n    unsigned char uv_mode    : 4;\n    unsigned char segment_id : 2;\n    unsigned char ref_frame  : 2;\n    unsigned char skip_coeff : 1;\n    unsigned char need_mc_border : 1;\n    enum splitmv_partitioning  partitioning : 2;\n    union mv      mv;\n    unsigned int  eob_mask;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct mb_info\n{\n    struct mb_base_info base;\n    union\n    {\n        union mv              mvs[16];\n        enum prediction_mode  modes[16];\n    } split;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* A \"token entropy context\" has 4 Y values, 2 U, 2 V, and 1 Y2 */\ntypedef int token_entropy_ctx_t[4 + 2 + 2 + 1];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct token_decoder\n{\n    struct bool_decoder  bool;\n    token_entropy_ctx_t  left_token_entropy_ctx;\n    short               *coeffs;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum token_block_type\n{\n    TOKEN_BLOCK_Y1,\n    TOKEN_BLOCK_UV,\n    TOKEN_BLOCK_Y2,\n    TOKEN_BLOCK_TYPES,\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct dequant_factors\n{\n    int   quant_idx;\n    short factor[TOKEN_BLOCK_TYPES][2]; /* [ Y1, UV, Y2 ]\n                                         * [ DC, AC ] */\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct ref_cnt_img\n{\n    vpx_image_t  img;\n    unsigned int ref_cnt;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct vp8_decoder_ctx\n{\n    struct vpx_internal_error_info  error;\n    unsigned int                    frame_cnt;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "struct vp8_frame_hdr            frame_hdr;\nstruct vp8_segment_hdr          segment_hdr;\nstruct vp8_loopfilter_hdr       loopfilter_hdr;\nstruct vp8_token_hdr            token_hdr;\nstruct vp8_quant_hdr            quant_hdr;\nstruct vp8_reference_hdr        reference_hdr;\nstruct vp8_entropy_hdr          entropy_hdr;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "struct vp8_entropy_hdr          saved_entropy;\nunsigned int                    saved_entropy_valid;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "unsigned int                    mb_rows;\nunsigned int                    mb_cols;\nstruct mb_info                 *mb_info_storage;\nstruct mb_info                **mb_info_rows_storage;\nstruct mb_info                **mb_info_rows;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "token_entropy_ctx_t            *above_token_entropy_ctx;\nstruct token_decoder            tokens[MAX_PARTITIONS];\nstruct dequant_factors          dequant_factors[MAX_MB_SEGMENTS];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "struct ref_cnt_img              frame_strg[NUM_REF_FRAMES];\nstruct ref_cnt_img             *ref_frames[NUM_REF_FRAMES];\nptrdiff_t                       ref_frame_offsets[4];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    const filter_t                 *subpixel_filters;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_decode_init(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "void vp8_dixie_decode_init（结构vp8_decoder_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_decode_destroy(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "void vp8_dixie_decode_destroy（结构vp8_decoder_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "vpx_codec_err_t vp8_parse_frame_header(const unsigned char *data, unsigned int sz, struct vp8_frame_hdr *hdr);",
      "zh-CHS": "vpx_编解码器_err_t vp8_parse_frame_头（const unsigned char*data，unsigned int sz，struct vp8_frame_hdr*hdr）；"
    },
    {
      "indent": 3,
      "text": "vpx_codec_err_t vp8_dixie_decode_frame(struct vp8_decoder_ctx *ctx, const unsigned char *data, unsigned int sz);",
      "zh-CHS": "vpx_编解码器_err_t vp8_dixie_解码_帧（结构vp8_解码器_ctx*ctx，常量无符号字符*数据，无符号整数sz）；"
    },
    {
      "indent": 3,
      "text": "#define CLAMP_255(x) ((x)<0?0:((x)>255?255:(x)))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.6. dixie_loopfilter.c",
      "section_title": true,
      "zh-CHS": "20.6. dixie_loopfilter.c"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"dixie.h\"\n#include \"dixie_loopfilter.h\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define ABS(x) ((x) >= 0 ? (x) : -(x))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define p3 pixels[-4*stride]\n#define p2 pixels[-3*stride]\n#define p1 pixels[-2*stride]\n#define p0 pixels[-1*stride]\n#define q0 pixels[ 0*stride]\n#define q1 pixels[ 1*stride]\n#define q2 pixels[ 2*stride]\n#define q3 pixels[ 3*stride]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define static static int",
      "zh-CHS": "#定义静态整型"
    },
    {
      "indent": 3,
      "text": "saturate_int8(int x)\n{\n    if (x < -128)\n        return -128;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (x > 127) return 127;",
      "zh-CHS": "如果（x>127）返回127；"
    },
    {
      "indent": 3,
      "text": "    return x;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nsaturate_uint8(int x)\n{\n    if (x < 0)\n        return 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (x > 255) return 255;",
      "zh-CHS": "如果（x>255），则返回255；"
    },
    {
      "indent": 3,
      "text": "    return x;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nhigh_edge_variance(unsigned char *pixels,\n                   int            stride,\n                   int            hev_threshold)\n{\n    return ABS(p1 - p0) > hev_threshold ||\n           ABS(q1 - q0) > hev_threshold;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nsimple_threshold(unsigned char *pixels,\n                 int            stride,\n                 int            filter_limit)\n{\n    return (ABS(p0 - q0) * 2 + (ABS(p1 - q1) >> 1)) <= filter_limit;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nnormal_threshold(unsigned char *pixels,\n                 int            stride,\n                 int            edge_limit,\n                 int            interior_limit)\n{\n    int E = edge_limit;\n    int I = interior_limit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return simple_threshold(pixels, stride, 2 * E + I)\n           && ABS(p3 - p2) <= I && ABS(p2 - p1) <= I\n           && ABS(p1 - p0) <= I && ABS(q3 - q2) <= I\n           && ABS(q2 - q1) <= I && ABS(q1 - q0) <= I;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_common(unsigned char *pixels,\n              int            stride,\n              int            use_outer_taps)\n{\n    int a, f1, f2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a = 3 * (q0 - p0);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (use_outer_taps)\n    a += saturate_int8(p1 - q1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a = saturate_int8(a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "f1 = ((a + 4 > 127) ? 127 : a + 4) >> 3;\nf2 = ((a + 3 > 127) ? 127 : a + 3) >> 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "p0 = saturate_uint8(p0 + f2);\nq0 = saturate_uint8(q0 - f1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if (!use_outer_taps)\n    {\n        /* This handles the case of subblock_filter()\n         * (from the bitstream guide.\n         */\n        a = (f1 + 1) >> 1;\n        p1 = saturate_uint8(p1 + a);\n        q1 = saturate_uint8(q1 - a);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_mb_edge(unsigned char *pixels,\n               int            stride)\n{\n    int w, a;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "w = saturate_int8(saturate_int8(p1 - q1) + 3 * (q0 - p0));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a = (27 * w + 63) >> 7;\np0 = saturate_uint8(p0 + a);\nq0 = saturate_uint8(q0 - a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "a = (18 * w + 63) >> 7;\np1 = saturate_uint8(p1 + a);\nq1 = saturate_uint8(q1 - a);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    a = (9 * w + 63) >> 7;\n    p2 = saturate_uint8(p2 + a);\n    q2 = saturate_uint8(q2 - a);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_mb_v_edge(unsigned char *src,\n                 int            stride,\n                 int            edge_limit,\n                 int            interior_limit,\n                 int            hev_threshold,\n                 int            size)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8 * size; i++)\n{\n    if (normal_threshold(src, 1, edge_limit, interior_limit))\n    {\n        if (high_edge_variance(src, 1, hev_threshold))\n            filter_common(src, 1, 1);\n        else\n            filter_mb_edge(src, 1);\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_subblock_v_edge(unsigned char *src,\n                       int            stride,\n                       int            edge_limit,\n                       int            interior_limit,\n                       int            hev_threshold,\n                       int            size)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8 * size; i++)\n{\n    if (normal_threshold(src, 1, edge_limit, interior_limit))\n        filter_common(src, 1,\n                      high_edge_variance(src, 1, hev_threshold));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_mb_h_edge(unsigned char *src,\n                 int            stride,\n                 int            edge_limit,\n                 int            interior_limit,\n                 int            hev_threshold,\n                 int            size)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8 * size; i++)\n{\n    if (normal_threshold(src, stride, edge_limit,\n                         interior_limit))\n    {\n        if (high_edge_variance(src, stride, hev_threshold))\n            filter_common(src, stride, 1);\n        else\n            filter_mb_edge(src, stride);\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += 1;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_subblock_h_edge(unsigned char *src,\n                       int            stride,\n                       int            edge_limit,\n                       int            interior_limit,\n                       int            hev_threshold,\n                       int            size)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8 * size; i++)\n{\n    if (normal_threshold(src, stride, edge_limit,\n                         interior_limit))\n        filter_common(src, stride,\n                      high_edge_variance(src, stride,\n                                         hev_threshold));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += 1;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_v_edge_simple(unsigned char *src,\n                     int            stride,\n                     int            filter_limit)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 16; i++)\n{\n    if (simple_threshold(src, 1, filter_limit))\n        filter_common(src, 1, 1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_h_edge_simple(unsigned char *src,\n                     int            stride,\n                     int            filter_limit)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 16; i++)\n{\n    if (simple_threshold(src, stride, filter_limit))\n        filter_common(src, stride, 1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        src += 1;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ncalculate_filter_parameters(struct vp8_decoder_ctx *ctx,\n                            struct mb_info         *mbi,\n                            int                    *edge_limit_,\n                            int                    *interior_limit_,\n                            int                    *hev_threshold_)\n{\n    int filter_level, interior_limit, hev_threshold;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Reference code/spec seems to conflate filter_level and\n * edge_limit\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "filter_level = ctx->loopfilter_hdr.level;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->segment_hdr.enabled)\n{\n    if (!ctx->segment_hdr.abs)\n        filter_level +=\n            ctx->segment_hdr.lf_level[mbi->base.segment_id];\n    else\n        filter_level =\n            ctx->segment_hdr.lf_level[mbi->base.segment_id];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_level > 63)\n    filter_level = 63;\nelse if (filter_level < 0)\n    filter_level = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->loopfilter_hdr.delta_enabled)\n{\n    filter_level +=\n        ctx->loopfilter_hdr.ref_delta[mbi->base.ref_frame];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (mbi->base.ref_frame == CURRENT_FRAME)\n    {\n        if (mbi->base.y_mode == B_PRED)\n            filter_level += ctx->loopfilter_hdr.mode_delta[0];\n    }\n    else if (mbi->base.y_mode == ZEROMV)\n        filter_level += ctx->loopfilter_hdr.mode_delta[1];\n    else if (mbi->base.y_mode == SPLITMV)\n        filter_level += ctx->loopfilter_hdr.mode_delta[3];\n    else\n        filter_level += ctx->loopfilter_hdr.mode_delta[2];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_level > 63)\n    filter_level = 63;\nelse if (filter_level < 0)\n    filter_level = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "interior_limit = filter_level;",
      "zh-CHS": "内部极限=过滤器水平；"
    },
    {
      "indent": 7,
      "text": "if (ctx->loopfilter_hdr.sharpness)\n{\n    interior_limit >>= ctx->loopfilter_hdr.sharpness > 4 ? 2 : 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (interior_limit > 9 - ctx->loopfilter_hdr.sharpness)\n        interior_limit = 9 - ctx->loopfilter_hdr.sharpness;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (interior_limit < 1) interior_limit = 1;",
      "zh-CHS": "如果（内部极限<1）内部极限=1；"
    },
    {
      "indent": 7,
      "text": "hev_threshold = (filter_level >= 15);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_level >= 40)\n    hev_threshold++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (filter_level >= 20 && !ctx->frame_hdr.is_keyframe)\n    hev_threshold++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    *edge_limit_ = filter_level;\n    *interior_limit_ = interior_limit;\n    *hev_threshold_ = hev_threshold;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_row_normal(struct vp8_decoder_ctx *ctx,\n                  unsigned int            row,\n                  unsigned int            start_col,\n                  unsigned int            num_cols)\n{\n    unsigned char  *y, *u, *v;\n    int             stride, uv_stride;\n    struct mb_info *mbi;\n    unsigned int    col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Adjust pointers based on row, start_col */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "stride    = ctx->ref_frames[CURRENT_FRAME]->img.stride[PLANE_Y];\nuv_stride = ctx->ref_frames[CURRENT_FRAME]->img.stride[PLANE_U];\ny = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_Y];\nu = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_U];\nv = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_V];\ny += (stride * row + start_col) * 16;\nu += (uv_stride * row + start_col) * 8;\nv += (uv_stride * row + start_col) * 8;\nmbi = ctx->mb_info_rows[row] + start_col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (col = start_col; col < start_col + num_cols; col++)\n{\n    int edge_limit, interior_limit, hev_threshold;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* TODO: Only need to recalculate every MB if segmentation is\n * enabled.\n */\ncalculate_filter_parameters(ctx, mbi, &edge_limit,\n                            &interior_limit, &hev_threshold);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (edge_limit)\n{\n    if (col)\n    {\n        filter_mb_v_edge(y, stride, edge_limit + 2,\n                         interior_limit, hev_threshold, 2);\n        filter_mb_v_edge(u, uv_stride, edge_limit + 2,\n                         interior_limit, hev_threshold, 1);\n        filter_mb_v_edge(v, uv_stride, edge_limit + 2,\n                         interior_limit, hev_threshold, 1);\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "/* NOTE: This conditional is actually dependent on the\n * number of coefficients decoded, not the skip flag as\n * coded in the bitstream.  The tokens task is expected\n * to set 31 if there is *any* non-zero data.\n */\nif (mbi->base.eob_mask\n    || mbi->base.y_mode == SPLITMV\n    || mbi->base.y_mode == B_PRED)\n{\n    filter_subblock_v_edge(y + 4, stride, edge_limit,\n                           interior_limit, hev_threshold,\n                           2);\n    filter_subblock_v_edge(y + 8, stride, edge_limit,\n                           interior_limit, hev_threshold,\n                           2);\n    filter_subblock_v_edge(y + 12, stride, edge_limit,\n                           interior_limit, hev_threshold,\n                           2);\n    filter_subblock_v_edge(u + 4, uv_stride, edge_limit,\n                           interior_limit, hev_threshold,\n                           1);\n    filter_subblock_v_edge(v + 4, uv_stride, edge_limit,\n                           interior_limit, hev_threshold,\n                           1);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (row)\n{\n    filter_mb_h_edge(y, stride, edge_limit + 2,\n                     interior_limit, hev_threshold, 2);\n    filter_mb_h_edge(u, uv_stride, edge_limit + 2,\n                     interior_limit, hev_threshold, 1);\n    filter_mb_h_edge(v, uv_stride, edge_limit + 2,\n                     interior_limit, hev_threshold, 1);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    if (mbi->base.eob_mask\n        || mbi->base.y_mode == SPLITMV\n        || mbi->base.y_mode == B_PRED)\n    {\n        filter_subblock_h_edge(y + 4 * stride, stride,\n                               edge_limit, interior_limit,\n                               hev_threshold, 2);\n        filter_subblock_h_edge(y + 8 * stride, stride,\n                               edge_limit, interior_limit,\n                               hev_threshold, 2);\n        filter_subblock_h_edge(y + 12 * stride, stride,\n                               edge_limit, interior_limit,\n                               hev_threshold, 2);\n        filter_subblock_h_edge(u + 4 * uv_stride, uv_stride,\n                               edge_limit, interior_limit,\n                               hev_threshold, 1);\n        filter_subblock_h_edge(v + 4 * uv_stride, uv_stride,\n                               edge_limit, interior_limit,\n                               hev_threshold, 1);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        y += 16;\n        u += 8;\n        v += 8;\n        mbi++;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfilter_row_simple(struct vp8_decoder_ctx *ctx,\n                  unsigned int            row,\n                  unsigned int            start_col,\n                  unsigned int            num_cols)\n{\n    unsigned char  *y;\n    int             stride;\n    struct mb_info *mbi;\n    unsigned int    col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Adjust pointers based on row, start_col */\nstride    = ctx->ref_frames[CURRENT_FRAME]->img.stride[PLANE_Y];\ny = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_Y];\ny += (stride * row + start_col) * 16;\nmbi = ctx->mb_info_rows[row] + start_col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (col = start_col; col < start_col + num_cols; col++)\n{\n    int edge_limit, interior_limit, hev_threshold;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* TODO: Only need to recalculate every MB if segmentation is\n * enabled.\n */\ncalculate_filter_parameters(ctx, mbi, &edge_limit,\n                            &interior_limit, &hev_threshold);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (edge_limit) {",
      "zh-CHS": "if（边缘限制）{"
    },
    {
      "indent": 15,
      "text": "/* NOTE: This conditional is actually dependent on the\n * number of coefficients decoded, not the skip flag as\n * coded in the bitstream.  The tokens task is expected\n * to set 31 if there is *any* non-zero data.\n */\nint filter_subblocks = (mbi->base.eob_mask\n                        || mbi->base.y_mode == SPLITMV\n                        || mbi->base.y_mode == B_PRED);\nint mb_limit = (edge_limit + 2) * 2 + interior_limit;\nint b_limit = edge_limit * 2 + interior_limit;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (col) filter_v_edge_simple(y, stride, mb_limit);",
      "zh-CHS": "if（col）filter_v_edge_simple（y、步幅、mb_限制）；"
    },
    {
      "indent": 15,
      "text": "if (filter_subblocks)\n{\n    filter_v_edge_simple(y + 4, stride, b_limit);\n    filter_v_edge_simple(y + 8, stride, b_limit);\n    filter_v_edge_simple(y + 12, stride, b_limit);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (row) filter_h_edge_simple(y, stride, mb_limit);",
      "zh-CHS": "if（row）filter_h_edge_simple（y、步幅、mb_限制）；"
    },
    {
      "indent": 11,
      "text": "    if (filter_subblocks)\n    {\n        filter_h_edge_simple(y + 4 * stride, stride,\n                             b_limit);\n        filter_h_edge_simple(y + 8 * stride, stride,\n                             b_limit);\n        filter_h_edge_simple(y + 12 * stride, stride,\n                             b_limit);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        y += 16;\n        mbi++;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_loopfilter_process_row(struct vp8_decoder_ctx *ctx,\n                                 unsigned int            row,\n                                 unsigned int            start_col,\n                                 unsigned int            num_cols)\n{\n    if (ctx->loopfilter_hdr.use_simple)\n        filter_row_simple(ctx, row, start_col, num_cols);\n    else\n        filter_row_normal(ctx, row, start_col, num_cols);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.7. dixie_loopfilter.h",
      "section_title": true,
      "zh-CHS": "20.7. dixie_loopfilter.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef DIXIE_LOOPFILTER_H\n#define DIXIE_LOOPFILTER_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_loopfilter_process_row(struct vp8_decoder_ctx *ctx, unsigned int row, unsigned int start_col, unsigned int num_cols);",
      "zh-CHS": "void vp8_dixie_loopfilter_process_row（结构vp8_解码器_ctx*ctx，无符号整数行，无符号整数起始列，无符号整数列）；"
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.8. idct_add.c",
      "section_title": true,
      "zh-CHS": "20.8. idct\\U add.c"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"dixie.h\"\n#include \"idct_add.h\"\n#include <assert.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_walsh(const short *input, short *output)\n{\n    int i;\n    int a1, b1, c1, d1;\n    int a2, b2, c2, d2;\n    const short *ip = input;\n    short *op = output;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++)\n{\n    a1 = ip[0] + ip[12];\n    b1 = ip[4] + ip[8];\n    c1 = ip[4] - ip[8];\n    d1 = ip[0] - ip[12];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    op[0] = a1 + b1;\n    op[4] = c1 + d1;\n    op[8] = a1 - b1;\n    op[12] = d1 - c1;\n    ip++;\n    op++;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ip = output;\nop = output;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++)\n{\n    a1 = ip[0] + ip[3];\n    b1 = ip[1] + ip[2];\n    c1 = ip[1] - ip[2];\n    d1 = ip[0] - ip[3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "a2 = a1 + b1;\nb2 = c1 + d1;\nc2 = a1 - b1;\nd2 = d1 - c1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "op[0] = (a2 + 3) >> 3;\nop[1] = (b2 + 3) >> 3;\nop[2] = (c2 + 3) >> 3;\nop[3] = (d2 + 3) >> 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        ip += 4;\n        op += 4;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define cospi8sqrt2minus1 20091\n#define sinpi8sqrt2       35468\n#define rounding          0\nstatic void\nidct_columns(const short *input, short *output)\n{\n    int i;\n    int a1, b1, c1, d1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "const short *ip = input;\nshort *op = output;\nint temp1, temp2;\nint shortpitch = 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++)\n{\n    a1 = ip[0] + ip[8];\n    b1 = ip[0] - ip[8];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "temp1 = (ip[4] * sinpi8sqrt2 + rounding) >> 16;\ntemp2 = ip[12] +\n    ((ip[12] * cospi8sqrt2minus1 + rounding) >> 16);\nc1 = temp1 - temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "temp1 = ip[4] +\n    ((ip[4] * cospi8sqrt2minus1 + rounding) >> 16);\ntemp2 = (ip[12] * sinpi8sqrt2 + rounding) >> 16;\nd1 = temp1 + temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "op[shortpitch*0] = a1 + d1;\nop[shortpitch*3] = a1 - d1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "op[shortpitch*1] = b1 + c1;\nop[shortpitch*2] = b1 - c1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        ip++;\n        op++;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_idct_add(unsigned char        *recon,\n                   const unsigned char  *predict,\n                   int                   stride,\n                   const short          *coeffs)\n{\n    int i;\n    int a1, b1, c1, d1, temp1, temp2;\n    short tmp[16];\n    idct_columns(coeffs, tmp);\n    coeffs = tmp;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++)\n{\n    a1 = coeffs[0] + coeffs[2];\n    b1 = coeffs[0] - coeffs[2];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "temp1 = (coeffs[1] * sinpi8sqrt2 + rounding) >> 16;\ntemp2 = coeffs[3] +\n    ((coeffs[3] * cospi8sqrt2minus1 + rounding) >> 16);\nc1 = temp1 - temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "temp1 = coeffs[1] +\n    ((coeffs[1] * cospi8sqrt2minus1 + rounding) >> 16);\ntemp2 = (coeffs[3] * sinpi8sqrt2 + rounding) >> 16;\nd1 = temp1 + temp2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "recon[0] = CLAMP_255(predict[0] + ((a1 + d1 + 4) >> 3));\nrecon[3] = CLAMP_255(predict[3] + ((a1 - d1 + 4) >> 3));\nrecon[1] = CLAMP_255(predict[1] + ((b1 + c1 + 4) >> 3));\nrecon[2] = CLAMP_255(predict[2] + ((b1 - c1 + 4) >> 3));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        coeffs += 4;\n        recon += stride;\n        predict += stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.9. idct_add.h",
      "section_title": true,
      "zh-CHS": "20.9. idct_add.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef IDCT_ADD_H\n#define IDCT_ADD_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_idct_add_init(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "void vp8_dixie_idct_add_init（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_idct_add(unsigned char *recon, const unsigned char *predict, int stride, const short *coeffs);",
      "zh-CHS": "void vp8_dixie_idct_add（无符号字符*侦察，常数无符号字符*预测，整数步长，常数短*系数）；"
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_walsh(const short *in, short *out);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_idct_add_process_row(struct vp8_decoder_ctx *ctx, short *coeffs, unsigned int row, unsigned int start_col, unsigned int num_cols); #endif",
      "zh-CHS": "void vp8_dixie_idct_add_process_row（结构vp8_decoder_ctx*ctx，short*coefs，unsigned int row，unsigned int start_col，unsigned int num cols）#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.10. mem.h",
      "section_title": true,
      "zh-CHS": "20.10. 成员h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef VPX_PORTS_MEM_H\n#define VPX_PORTS_MEM_H\n#include \"vpx_config.h\"\n#include \"vpx_integer.h\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if defined(__GNUC__) && __GNUC__\n#define DECLARE_ALIGNED(n,typ,val)  typ val __attribute__ \\\n    ((aligned (n)))\n#elif defined(_MSC_VER)\n#define DECLARE_ALIGNED(n,typ,val)  __declspec(align(n)) typ val\n#else\n#warning No alignment directives known for this compiler.\n#define DECLARE_ALIGNED(n,typ,val)  typ val\n#endif\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Declare an aligned array on the stack, for situations where the\n * stack pointer may not have the alignment we expect.  Creates an\n * array with a modified name, then defines val to be a pointer, and\n * aligns that pointer within the array.\n */\n#define DECLARE_ALIGNED_ARRAY(a,typ,val,n)\\\ntyp val##_[(n)+(a)/sizeof(typ)+1];\\\ntyp *val = (typ*)((((intptr_t)val##_)+(a)-1)&((intptr_t)-(a)))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Indicates that the usage of the specified variable has been\n * audited to assure that it's safe to use uninitialized.  Silences\n * 'may be used uninitialized' warnings on gcc.\n */\n#if defined(__GNUC__) && __GNUC__\n#define UNINITIALIZED_IS_SAFE(x) x=x\n#else\n#define UNINITIALIZED_IS_SAFE(x) x\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.11. modemv.c",
      "section_title": true,
      "zh-CHS": "20.11. modemv.c"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"dixie.h\"\n#include \"modemv_data.h\"\n#include <stdlib.h>\n#include <assert.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct mv_clamp_rect\n{\n    int to_left, to_right, to_top, to_bottom;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static union mv\n        clamp_mv(union mv raw, const struct mv_clamp_rect *bounds)\n{\n    union mv newmv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    newmv.d.x = (raw.d.x < bounds->to_left)\n                ? bounds->to_left : raw.d.x;\n    newmv.d.x = (raw.d.x > bounds->to_right)\n                ? bounds->to_right : newmv.d.x;\n    newmv.d.y = (raw.d.y < bounds->to_top)\n                ? bounds->to_top : raw.d.y;\n    newmv.d.y = (raw.d.y > bounds->to_bottom)\n                ? bounds->to_bottom : newmv.d.y;\n    return newmv;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nread_segment_id(struct bool_decoder *bool,\n                struct vp8_segment_hdr *seg)\n{\n    return bool_get(bool, seg->tree_probs[0])\n           ? 2 + bool_get(bool, seg->tree_probs[2])\n           : bool_get(bool, seg->tree_probs[1]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static enum prediction_mode\nabove_block_mode(const struct mb_info *this,\n                 const struct mb_info *above,\n                 unsigned int b)\n{\n    if (b < 4)\n    {\n        switch (above->base.y_mode)\n        {\n        case DC_PRED:\n            return B_DC_PRED;\n        case V_PRED:\n            return B_VE_PRED;\n        case H_PRED:\n            return B_HE_PRED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    case TM_PRED:\n        return B_TM_PRED;\n    case B_PRED:\n        return above->split.modes[b+12];\n    default:\n        assert(0);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return this->split.modes[b-4];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static enum prediction_mode\nleft_block_mode(const struct mb_info *this,\n                const struct mb_info *left,\n                unsigned int b)\n{\n    if (!(b & 3))\n    {\n        switch (left->base.y_mode)\n        {\n        case DC_PRED:\n            return B_DC_PRED;\n        case V_PRED:\n            return B_VE_PRED;\n        case H_PRED:\n            return B_HE_PRED;\n        case TM_PRED:\n            return B_TM_PRED;\n        case B_PRED:\n            return left->split.modes[b+3];\n        default:\n            assert(0);\n        }\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return this->split.modes[b-1];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_kf_mb_mode(struct mb_info      *this,\n                  struct mb_info      *left,\n                  struct mb_info      *above,\n                  struct bool_decoder *bool)\n{\n    int y_mode, uv_mode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "y_mode = bool_read_tree(bool, kf_y_mode_tree, kf_y_mode_probs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (y_mode == B_PRED)\n{\n    unsigned int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < 16; i++)\n{\n    enum prediction_mode a = above_block_mode(this, above,\n                                              i);\n    enum prediction_mode l = left_block_mode(this, left, i);\n    enum prediction_mode b;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        b = bool_read_tree(bool, b_mode_tree,\n                           kf_b_mode_probs[a][l]);\n        this->split.modes[i] = b;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "uv_mode = bool_read_tree(bool, uv_mode_tree, kf_uv_mode_probs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    this->base.y_mode = y_mode;\n    this->base.uv_mode = uv_mode;\n    this->base.mv.raw = 0;\n    this->base.ref_frame = 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_intra_mb_mode(struct mb_info         *this,\n                     struct vp8_entropy_hdr *hdr,\n                     struct bool_decoder    *bool)\n{\n    /* Like decode_kf_mb_mode, but with probabilities transmitted in\n     * the bitstream and no context on the above/left block mode.\n     */\n    int y_mode, uv_mode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "y_mode = bool_read_tree(bool, y_mode_tree, hdr->y_mode_probs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (y_mode == B_PRED)\n{\n    unsigned int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < 16; i++)\n{\n    enum prediction_mode b;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        b = bool_read_tree(bool, b_mode_tree,\n                           default_b_mode_probs);\n        this->split.modes[i] = b;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "uv_mode = bool_read_tree(bool, uv_mode_tree, hdr->uv_mode_probs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    this->base.y_mode = y_mode;\n    this->base.uv_mode = uv_mode;\n    this->base.mv.raw = 0;\n    this->base.ref_frame = CURRENT_FRAME;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nread_mv_component(struct bool_decoder *bool,\n                  const unsigned char  mvc[MV_PROB_CNT])\n{\n    enum {IS_SHORT, SIGN, SHORT, BITS = SHORT + 8 - 1,\n          LONG_WIDTH = 10};\n    int x = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (bool_get(bool, mvc[IS_SHORT])) /* Large */\n{\n    int i = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < 3; i++)\n    x += bool_get(bool, mvc[BITS + i]) << i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Skip bit 3, which is sometimes implicit */\nfor (i = LONG_WIDTH - 1; i > 3; i--)\n    x += bool_get(bool, mvc[BITS + i]) << i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (!(x & 0xFFF0)  ||  bool_get(bool, mvc[BITS + 3]))\n        x += 8;\n}\nelse   /* small */\n    x = bool_read_tree(bool, small_mv_tree, mvc + SHORT);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (x && bool_get(bool, mvc[SIGN]))\n    x = -x;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return x << 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static mv_t\nabove_block_mv(const struct mb_info *this,\n               const struct mb_info *above,\n               unsigned int          b)\n{\n    if (b < 4)\n    {\n        if (above->base.y_mode == SPLITMV)\n            return above->split.mvs[b+12];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    return above->base.mv;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return this->split.mvs[b-4];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static mv_t\nleft_block_mv(const struct mb_info *this,\n              const struct mb_info *left,\n              unsigned int          b)\n{\n    if (!(b & 3))\n    {\n        if (left->base.y_mode == SPLITMV)\n            return left->split.mvs[b+3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    return left->base.mv;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return this->split.mvs[b-1];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static enum prediction_mode\nsubmv_ref(struct bool_decoder *bool, union mv l, union mv a)\n{\n    enum subblock_mv_ref\n    {\n        SUBMVREF_NORMAL,\n        SUBMVREF_LEFT_ZED,\n        SUBMVREF_ABOVE_ZED,\n        SUBMVREF_LEFT_ABOVE_SAME,\n        SUBMVREF_LEFT_ABOVE_ZED\n    };",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "int lez = !(l.raw);\nint aez = !(a.raw);\nint lea = l.raw == a.raw;\nenum subblock_mv_ref ctx = SUBMVREF_NORMAL;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (lea && lez)\n    ctx = SUBMVREF_LEFT_ABOVE_ZED;\nelse if (lea)\n    ctx = SUBMVREF_LEFT_ABOVE_SAME;\nelse if (aez)\n    ctx = SUBMVREF_ABOVE_ZED;\nelse if (lez)\n    ctx = SUBMVREF_LEFT_ZED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return bool_read_tree(bool, submv_ref_tree,\n                          submv_ref_probs2[ctx]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nread_mv(struct bool_decoder  *bool,\n        union mv             *mv,\n        mv_component_probs_t  mvc[2])\n{\n    mv->d.y = read_mv_component(bool, mvc[0]);\n    mv->d.x = read_mv_component(bool, mvc[1]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nmv_bias(const struct mb_info *mb,\n        const unsigned int   sign_bias[3],\n        enum reference_frame ref_frame,\n        union mv             *mv)\n{\n    if (sign_bias[mb->base.ref_frame] ^ sign_bias[ref_frame])\n    {\n        mv->d.x *= -1;\n        mv->d.y *= -1;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum near_mv_v\n{\n    CNT_BEST = 0,\n    CNT_ZEROZERO = 0,\n    CNT_NEAREST,\n    CNT_NEAR,\n    CNT_SPLITMV\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfind_near_mvs(const struct mb_info   *this,\n              const struct mb_info   *left,\n              const struct mb_info   *above,\n              const unsigned int      sign_bias[3],\n              union  mv               near_mvs[4],\n              int                     cnt[4])\n{\n    const struct mb_info *aboveleft = above - 1;\n    union  mv             *mv = near_mvs;\n    int                   *cntx = cnt;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Zero accumulators */\nmv[0].raw = mv[1].raw = mv[2].raw = 0;\ncnt[0] = cnt[1] = cnt[2] = cnt[3] = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process above */\nif (above->base.ref_frame != CURRENT_FRAME)\n{\n    if (above->base.mv.raw)\n    {\n        (++mv)->raw = above->base.mv.raw;\n        mv_bias(above, sign_bias, this->base.ref_frame, mv);\n        ++cntx;\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    *cntx += 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process left */\nif (left->base.ref_frame != CURRENT_FRAME)\n{\n    if (left->base.mv.raw)\n    {\n        union mv this_mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "this_mv.raw = left->base.mv.raw;\nmv_bias(left, sign_bias, this->base.ref_frame, &this_mv);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (this_mv.raw != mv->raw)\n{\n    (++mv)->raw = this_mv.raw;\n    ++cntx;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        *cntx += 2;\n    }\n    else\n        cnt[CNT_ZEROZERO] += 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Process above left */\nif (aboveleft->base.ref_frame != CURRENT_FRAME)\n{\n    if (aboveleft->base.mv.raw)\n    {\n        union mv this_mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "this_mv.raw = aboveleft->base.mv.raw;\nmv_bias(aboveleft, sign_bias, this->base.ref_frame,\n        &this_mv);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (this_mv.raw != mv->raw)\n{\n    (++mv)->raw = this_mv.raw;\n    ++cntx;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "        *cntx += 1;\n    }\n    else\n        cnt[CNT_ZEROZERO] += 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* If we have three distinct MVs ... */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (cnt[CNT_SPLITMV])\n{\n    /* See if above-left MV can be merged with NEAREST */\n    if (mv->raw == near_mvs[CNT_NEAREST].raw)\n        cnt[CNT_NEAREST] += 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "cnt[CNT_SPLITMV] = ((above->base.y_mode == SPLITMV)\n                    + (left->base.y_mode == SPLITMV)) * 2\n                   + (aboveleft->base.y_mode == SPLITMV);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Swap near and nearest if necessary */\nif (cnt[CNT_NEAR] > cnt[CNT_NEAREST])\n{\n    int tmp;\n    tmp = cnt[CNT_NEAREST];\n    cnt[CNT_NEAREST] = cnt[CNT_NEAR];\n    cnt[CNT_NEAR] = tmp;\n    tmp = near_mvs[CNT_NEAREST].raw;\n    near_mvs[CNT_NEAREST].raw = near_mvs[CNT_NEAR].raw;\n    near_mvs[CNT_NEAR].raw = tmp;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /* Use near_mvs[CNT_BEST] to store the \"best\" MV.  Note that this\n     * storage shares the same address as near_mvs[CNT_ZEROZERO].\n     */\n    if (cnt[CNT_NEAREST] >= cnt[CNT_BEST])\n        near_mvs[CNT_BEST] = near_mvs[CNT_NEAREST];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_split_mv(struct mb_info         *this,\n                const struct mb_info   *left,\n                const struct mb_info   *above,\n                struct vp8_entropy_hdr *hdr,\n                union  mv              *best_mv,\n                struct bool_decoder    *bool)\n{\n    const int *partition;\n    int        j, k, mask, partition_id;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "partition_id = bool_read_tree(bool, split_mv_tree,\n                              split_mv_probs);\npartition = mv_partitions[partition_id];\nthis->base.partitioning = partition_id;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (j = 0, mask = 0; mask < 65535; j++)\n{\n    union mv mv, left_mv, above_mv;\n    enum prediction_mode subblock_mode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Find the first subblock in this partition. */\nfor (k = 0; j != partition[k]; k++);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Decode the next MV */\nleft_mv = left_block_mv(this, left, k);\nabove_mv = above_block_mv(this, above, k);\nsubblock_mode = submv_ref(bool, left_mv,  above_mv);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "switch (subblock_mode)\n{\ncase LEFT4X4:\n    mv = left_mv;\n    break;\ncase ABOVE4X4:\n    mv = above_mv;\n    break;\ncase ZERO4X4:\n    mv.raw = 0;\n    break;\ncase NEW4X4:\n    read_mv(bool, &mv, hdr->mv_probs);\n    mv.d.x += best_mv->d.x;\n    mv.d.y += best_mv->d.y;\n    break;\ndefault:\n    assert(0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        /* Fill the MVs for this partition */\n        for (; k < 16; k++)\n            if (j == partition[k])\n            {\n                this->split.mvs[k] = mv;\n                mask |= 1 << k;\n            }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\nneed_mc_border(union mv mv, int l, int t, int b_w, int w, int h)\n{\n    int b, r;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Get distance to edge for top-left pixel */\nl += (mv.d.x >> 3);\nt += (mv.d.y >> 3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Get distance to edge for bottom-right pixel */\nr = w - (l + b_w);\nb = h - (t + b_w);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return (l >> 1 < 2 || r >> 1 < 3 || t >> 1 < 2 || b >> 1 < 3);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ndecode_mvs(struct vp8_decoder_ctx       *ctx,\n           struct mb_info               *this,\n           const struct mb_info         *left,\n           const struct mb_info         *above,\n           const struct mv_clamp_rect   *bounds,\n           struct bool_decoder          *bool)\n{\n    struct vp8_entropy_hdr *hdr = &ctx->entropy_hdr;\n    union mv          near_mvs[4];\n    union mv          clamped_best_mv;\n    int               mv_cnts[4];\n    unsigned char     probs[4];\n    enum {BEST, NEAREST, NEAR};\n    int x, y, w, h, b;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "this->base.ref_frame = bool_get(bool, hdr->prob_last)\n                       ? 2 + bool_get(bool, hdr->prob_gf)\n                       : 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "find_near_mvs(this, this - 1, above,\n              ctx->reference_hdr.sign_bias, near_mvs, mv_cnts);\nprobs[0] = mv_counts_to_probs[mv_cnts[0]][0];\nprobs[1] = mv_counts_to_probs[mv_cnts[1]][1];\nprobs[2] = mv_counts_to_probs[mv_cnts[2]][2];\nprobs[3] = mv_counts_to_probs[mv_cnts[3]][3];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "this->base.y_mode = bool_read_tree(bool, mv_ref_tree, probs);\nthis->base.uv_mode = this->base.y_mode;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "this->base.need_mc_border = 0;\nx = (-bounds->to_left - 128) >> 3;\ny = (-bounds->to_top - 128) >> 3;\nw = ctx->mb_cols * 16;\nh = ctx->mb_rows * 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "switch (this->base.y_mode)\n{\ncase NEARESTMV:\n    this->base.mv = clamp_mv(near_mvs[NEAREST], bounds);\n    break;\ncase NEARMV:\n    this->base.mv = clamp_mv(near_mvs[NEAR], bounds);\n    break;\ncase ZEROMV:\n    this->base.mv.raw = 0;\n    return; //skip need_mc_border check\ncase NEWMV:\n    clamped_best_mv = clamp_mv(near_mvs[BEST], bounds);\n    read_mv(bool, &this->base.mv, hdr->mv_probs);\n    this->base.mv.d.x += clamped_best_mv.d.x;\n    this->base.mv.d.y += clamped_best_mv.d.y;\n    break;\ncase SPLITMV:\n{\n    union mv          chroma_mv[4] = {{{0}}};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "clamped_best_mv = clamp_mv(near_mvs[BEST], bounds);\ndecode_split_mv(this, left, above, hdr, &clamped_best_mv,\n                bool);\nthis->base.mv = this->split.mvs[15];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (b = 0; b < 16; b++)\n{\n    chroma_mv[(b>>1&1) + (b>>2&2)].d.x +=\n        this->split.mvs[b].d.x;\n    chroma_mv[(b>>1&1) + (b>>2&2)].d.y +=\n        this->split.mvs[b].d.y;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    if (need_mc_border(this->split.mvs[b],\n    x + (b & 3) * 4, y + (b & ~3), 4, w, h))\n    {\n        this->base.need_mc_border = 1;\n        break;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (b = 0; b < 4; b++)\n{\n    chroma_mv[b].d.x += 4 + 8 * (chroma_mv[b].d.x >> 31);\n    chroma_mv[b].d.y += 4 + 8 * (chroma_mv[b].d.y >> 31);\n    chroma_mv[b].d.x /= 4;\n    chroma_mv[b].d.y /= 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "//note we're passing in non-subsampled coordinates",
      "zh-CHS": "//注意，我们传递的是非二次采样坐标"
    },
    {
      "indent": 11,
      "text": "    if (need_mc_border(chroma_mv[b],\n    x + (b & 1) * 8, y + (b >> 1) * 8, 16, w, h))\n    {\n        this->base.need_mc_border = 1;\n        break;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    return; //skip need_mc_border check\n}\ndefault:\n    assert(0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if (need_mc_border(this->base.mv, x, y, 16, w, h))\n        this->base.need_mc_border = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_modemv_process_row(struct vp8_decoder_ctx *ctx,\nstruct bool_decoder    *bool,\nint                     row,\nint                     start_col,\nint                     num_cols)\n{\n    struct mb_info       *above, *this;\n    unsigned int          col;\n    struct mv_clamp_rect  bounds;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "this = ctx->mb_info_rows[row] + start_col;\nabove = ctx->mb_info_rows[row - 1] + start_col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Calculate the eighth-pel MV bounds using a 1 MB border. */\nbounds.to_left   = -((start_col + 1) << 7);\nbounds.to_right  = (ctx->mb_cols - start_col) << 7;\nbounds.to_top    = -((row + 1) << 7);\nbounds.to_bottom = (ctx->mb_rows - row) << 7;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (col = start_col; col < start_col + num_cols; col++)\n{\n    if (ctx->segment_hdr.update_map)\n        this->base.segment_id = read_segment_id(bool,\n        &ctx->segment_hdr);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (ctx->entropy_hdr.coeff_skip_enabled)\n    this->base.skip_coeff = bool_get(bool,\n    ctx->entropy_hdr.coeff_skip_prob);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (ctx->frame_hdr.is_keyframe)\n{\n    if (!ctx->segment_hdr.update_map)\n        this->base.segment_id = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    decode_kf_mb_mode(this, this - 1, above, bool);\n}\nelse\n{\n    if (bool_get(bool, ctx->entropy_hdr.prob_inter))\n        decode_mvs(ctx, this, this - 1, above, &bounds,\n                   bool);\n    else\n        decode_intra_mb_mode(this, &ctx->entropy_hdr, bool);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    bounds.to_left -= 16 << 3;\n    bounds.to_right -= 16 << 3;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        /* Advance to next mb */\n        this++;\n        above++;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_modemv_init(struct vp8_decoder_ctx *ctx)\n{\n    unsigned int    mbi_w, mbi_h, i;\n    struct mb_info *mbi;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "mbi_w = ctx->mb_cols + 1; /* For left border col */\nmbi_h = ctx->mb_rows + 1; /* For above border row */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->frame_hdr.frame_size_updated)\n{\n    free(ctx->mb_info_storage);\n    ctx->mb_info_storage = NULL;\n    free(ctx->mb_info_rows_storage);\n    ctx->mb_info_rows_storage = NULL;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!ctx->mb_info_storage)\n    ctx->mb_info_storage = calloc(mbi_w * mbi_h,\n    sizeof(*ctx->mb_info_storage));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!ctx->mb_info_rows_storage)",
      "zh-CHS": "如果（！ctx->mb\\u信息\\u行\\u存储）"
    },
    {
      "indent": 11,
      "text": "ctx->mb_info_rows_storage = calloc(mbi_h,\nsizeof(*ctx->mb_info_rows_storage));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Set up row pointers */\nmbi = ctx->mb_info_storage + 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < mbi_h; i++)\n{\n    ctx->mb_info_rows_storage[i] = mbi;\n    mbi += mbi_w;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    ctx->mb_info_rows = ctx->mb_info_rows_storage + 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_modemv_destroy(struct vp8_decoder_ctx *ctx)\n{\n    free(ctx->mb_info_storage);\n    ctx->mb_info_storage = NULL;\n    free(ctx->mb_info_rows_storage);\n    ctx->mb_info_rows_storage = NULL;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.12. modemv.h",
      "section_title": true,
      "zh-CHS": "20.12. modemv.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef MODEMV_H\n#define MODEMV_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_modemv_init(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "无效vp8_dixie_modemv_init（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_modemv_destroy(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "无效vp8_dixie_modemv_destroy（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_modemv_process_row(struct vp8_decoder_ctx *ctx, struct bool_decoder *bool, int row, int start_col, int num_cols);",
      "zh-CHS": "无效vp8_dixie_modemv_process_row（结构vp8_decoder_ctx*ctx，结构bool_decoder*bool，int row，int start_col，int num_cols）；"
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.13. modemv_data.h",
      "section_title": true,
      "zh-CHS": "20.13. modemv_data.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const unsigned char kf_y_mode_probs[] = { 145, 156, 163, 128};\nstatic const unsigned char kf_uv_mode_probs[] = { 142, 114, 183};\nstatic const unsigned char kf_b_mode_probs[10][10][9] =\n{\n  { /* above mode 0 */\n    { /* left mode 0 */ 231, 120,  48,  89, 115, 113, 120, 152, 112},\n    { /* left mode 1 */ 152, 179,  64, 126, 170, 118,  46,  70,  95},\n    { /* left mode 2 */ 175,  69, 143,  80,  85,  82,  72, 155, 103},\n    { /* left mode 3 */  56,  58,  10, 171, 218, 189,  17,  13, 152},\n    { /* left mode 4 */ 144,  71,  10,  38, 171, 213, 144,  34,  26},\n    { /* left mode 5 */ 114,  26,  17, 163,  44, 195,  21,  10, 173},\n    { /* left mode 6 */ 121,  24,  80, 195,  26,  62,  44,  64,  85},\n    { /* left mode 7 */ 170,  46,  55,  19, 136, 160,  33, 206,  71},\n    { /* left mode 8 */  63,  20,   8, 114, 114, 208,  12,   9, 226},\n    { /* left mode 9 */  81,  40,  11,  96, 182,  84,  29,  16,  36}\n  },\n  { /* above mode 1 */\n    { /* left mode 0 */ 134, 183,  89, 137,  98, 101, 106, 165, 148},\n    { /* left mode 1 */  72, 187, 100, 130, 157, 111,  32,  75,  80},\n    { /* left mode 2 */  66, 102, 167,  99,  74,  62,  40, 234, 128},\n    { /* left mode 3 */  41,  53,   9, 178, 241, 141,  26,   8, 107},\n    { /* left mode 4 */ 104,  79,  12,  27, 217, 255,  87,  17,   7},\n    { /* left mode 5 */  74,  43,  26, 146,  73, 166,  49,  23, 157},\n    { /* left mode 6 */  65,  38, 105, 160,  51,  52,  31, 115, 128},\n    { /* left mode 7 */  87,  68,  71,  44, 114,  51,  15, 186,  23},\n    { /* left mode 8 */  47,  41,  14, 110, 182, 183,  21,  17, 194},\n    { /* left mode 9 */  66,  45,  25, 102, 197, 189,  23,  18,  22}\n  },\n  { /* above mode 2 */\n    { /* left mode 0 */  88,  88, 147, 150,  42,  46,  45, 196, 205},\n    { /* left mode 1 */  43,  97, 183, 117,  85,  38,  35, 179,  61},\n    { /* left mode 2 */  39,  53, 200,  87,  26,  21,  43, 232, 171},\n    { /* left mode 3 */  56,  34,  51, 104, 114, 102,  29,  93,  77},\n    { /* left mode 4 */ 107,  54,  32,  26,  51,   1,  81,  43,  31},",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "  { /* left mode 5 */  39,  28,  85, 171,  58, 165,  90,  98,  64},\n  { /* left mode 6 */  34,  22, 116, 206,  23,  34,  43, 166,  73},\n  { /* left mode 7 */  68,  25, 106,  22,  64, 171,  36, 225, 114},\n  { /* left mode 8 */  34,  19,  21, 102, 132, 188,  16,  76, 124},\n  { /* left mode 9 */  62,  18,  78,  95,  85,  57,  50,  48,  51}\n},\n{ /* above mode 3 */\n  { /* left mode 0 */ 193, 101,  35, 159, 215, 111,  89,  46, 111},\n  { /* left mode 1 */  60, 148,  31, 172, 219, 228,  21,  18, 111},\n  { /* left mode 2 */ 112, 113,  77,  85, 179, 255,  38, 120, 114},\n  { /* left mode 3 */  40,  42,   1, 196, 245, 209,  10,  25, 109},\n  { /* left mode 4 */ 100,  80,   8,  43, 154,   1,  51,  26,  71},\n  { /* left mode 5 */  88,  43,  29, 140, 166, 213,  37,  43, 154},\n  { /* left mode 6 */  61,  63,  30, 155,  67,  45,  68,   1, 209},\n  { /* left mode 7 */ 142,  78,  78,  16, 255, 128,  34, 197, 171},\n  { /* left mode 8 */  41,  40,   5, 102, 211, 183,   4,   1, 221},\n  { /* left mode 9 */  51,  50,  17, 168, 209, 192,  23,  25,  82}\n},\n{ /* above mode 4 */\n  { /* left mode 0 */ 125,  98,  42,  88, 104,  85, 117, 175,  82},\n  { /* left mode 1 */  95,  84,  53,  89, 128, 100, 113, 101,  45},\n  { /* left mode 2 */  75,  79, 123,  47,  51, 128,  81, 171,   1},\n  { /* left mode 3 */  57,  17,   5,  71, 102,  57,  53,  41,  49},\n  { /* left mode 4 */ 115,  21,   2,  10, 102, 255, 166,  23,   6},\n  { /* left mode 5 */  38,  33,  13, 121,  57,  73,  26,   1,  85},\n  { /* left mode 6 */  41,  10,  67, 138,  77, 110,  90,  47, 114},\n  { /* left mode 7 */ 101,  29,  16,  10,  85, 128, 101, 196,  26},\n  { /* left mode 8 */  57,  18,  10, 102, 102, 213,  34,  20,  43},\n  { /* left mode 9 */ 117,  20,  15,  36, 163, 128,  68,   1,  26}\n},\n{ /* above mode 5 */\n  { /* left mode 0 */ 138,  31,  36, 171,  27, 166,  38,  44, 229},\n  { /* left mode 1 */  67,  87,  58, 169,  82, 115,  26,  59, 179},\n  { /* left mode 2 */  63,  59,  90, 180,  59, 166,  93,  73, 154},\n  { /* left mode 3 */  40,  40,  21, 116, 143, 209,  34,  39, 175},\n  { /* left mode 4 */  57,  46,  22,  24, 128,   1,  54,  17,  37},\n  { /* left mode 5 */  47,  15,  16, 183,  34, 223,  49,  45, 183},\n  { /* left mode 6 */  46,  17,  33, 183,   6,  98,  15,  32, 183},\n  { /* left mode 7 */  65,  32,  73, 115,  28, 128,  23, 128, 205},\n  { /* left mode 8 */  40,   3,   9, 115,  51, 192,  18,   6, 223},\n  { /* left mode 9 */  87,  37,   9, 115,  59,  77,  64,  21,  47}\n},\n{ /* above mode 6 */\n  { /* left mode 0 */ 104,  55,  44, 218,   9,  54,  53, 130, 226},\n  { /* left mode 1 */  64,  90,  70, 205,  40,  41,  23,  26,  57},\n  { /* left mode 2 */  54,  57, 112, 184,   5,  41,  38, 166, 213},\n  { /* left mode 3 */  30,  34,  26, 133, 152, 116,  10,  32, 134},\n  { /* left mode 4 */  75,  32,  12,  51, 192, 255, 160,  43,  51},",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    { /* left mode 5 */  39,  19,  53, 221,  26, 114,  32,  73, 255},\n    { /* left mode 6 */  31,   9,  65, 234,   2,  15,   1, 118,  73},\n    { /* left mode 7 */  88,  31,  35,  67, 102,  85,  55, 186,  85},\n    { /* left mode 8 */  56,  21,  23, 111,  59, 205,  45,  37, 192},\n    { /* left mode 9 */  55,  38,  70, 124,  73, 102,   1,  34,  98}\n  },\n  { /* above mode 7 */\n    { /* left mode 0 */ 102,  61,  71,  37,  34,  53,  31, 243, 192},\n    { /* left mode 1 */  69,  60,  71,  38,  73, 119,  28, 222,  37},\n    { /* left mode 2 */  68,  45, 128,  34,   1,  47,  11, 245, 171},\n    { /* left mode 3 */  62,  17,  19,  70, 146,  85,  55,  62,  70},\n    { /* left mode 4 */  75,  15,   9,   9,  64, 255, 184, 119,  16},\n    { /* left mode 5 */  37,  43,  37, 154, 100, 163,  85, 160,   1},\n    { /* left mode 6 */  63,   9,  92, 136,  28,  64,  32, 201,  85},\n    { /* left mode 7 */  86,   6,  28,   5,  64, 255,  25, 248,   1},\n    { /* left mode 8 */  56,   8,  17, 132, 137, 255,  55, 116, 128},\n    { /* left mode 9 */  58,  15,  20,  82, 135,  57,  26, 121,  40}\n  },\n  { /* above mode 8 */\n    { /* left mode 0 */ 164,  50,  31, 137, 154, 133,  25,  35, 218},\n    { /* left mode 1 */  51, 103,  44, 131, 131, 123,  31,   6, 158},\n    { /* left mode 2 */  86,  40,  64, 135, 148, 224,  45, 183, 128},\n    { /* left mode 3 */  22,  26,  17, 131, 240, 154,  14,   1, 209},\n    { /* left mode 4 */  83,  12,  13,  54, 192, 255,  68,  47,  28},\n    { /* left mode 5 */  45,  16,  21,  91,  64, 222,   7,   1, 197},\n    { /* left mode 6 */  56,  21,  39, 155,  60, 138,  23, 102, 213},\n    { /* left mode 7 */  85,  26,  85,  85, 128, 128,  32, 146, 171},\n    { /* left mode 8 */  18,  11,   7,  63, 144, 171,   4,   4, 246},\n    { /* left mode 9 */  35,  27,  10, 146, 174, 171,  12,  26, 128}\n  },\n  { /* above mode 9 */\n    { /* left mode 0 */ 190,  80,  35,  99, 180,  80, 126,  54,  45},\n    { /* left mode 1 */  85, 126,  47,  87, 176,  51,  41,  20,  32},\n    { /* left mode 2 */ 101,  75, 128, 139, 118, 146, 116, 128,  85},\n    { /* left mode 3 */  56,  41,  15, 176, 236,  85,  37,   9,  62},\n    { /* left mode 4 */ 146,  36,  19,  30, 171, 255,  97,  27,  20},\n    { /* left mode 5 */  71,  30,  17, 119, 118, 255,  17,  18, 138},\n    { /* left mode 6 */ 101,  38,  60, 138,  55,  70,  43,  26, 142},\n    { /* left mode 7 */ 138,  45,  61,  62, 219,   1,  81, 188,  64},\n    { /* left mode 8 */  32,  41,  20, 117, 151, 142,  20,  21, 163},\n    { /* left mode 9 */ 112,  19,  12,  61, 195, 128,  48,   4,  24}\n  }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int kf_y_mode_tree[] =\n{\n  -B_PRED, 2,\n  4, 6,\n  -DC_PRED, -V_PRED,\n  -H_PRED, -TM_PRED\n};\nstatic const int y_mode_tree[] =\n{\n  -DC_PRED, 2,\n  4, 6,\n  -V_PRED, -H_PRED,\n  -TM_PRED, -B_PRED\n};\nstatic const int uv_mode_tree[6] =\n{\n  -DC_PRED, 2,\n  -V_PRED, 4,\n  -H_PRED, -TM_PRED\n};\nstatic const int b_mode_tree[18] =\n{\n  -B_DC_PRED, 2,               /* 0 = DC_NODE */\n  -B_TM_PRED, 4,               /* 1 = TM_NODE */\n  -B_VE_PRED, 6,               /* 2 = VE_NODE */\n  8, 12,                       /* 3 = COM_NODE */\n  -B_HE_PRED, 10,              /* 4 = HE_NODE */\n  -B_RD_PRED, -B_VR_PRED,      /* 5 = RD_NODE */\n  -B_LD_PRED, 14,              /* 6 = LD_NODE */\n  -B_VL_PRED, 16,              /* 7 = VL_NODE */\n  -B_HD_PRED, -B_HU_PRED       /* 8 = HD_NODE */\n};\nstatic const int small_mv_tree[14] =\n{\n  2, 8,\n  4, 6,\n  -0, -1,\n  -2, -3,\n  10, 12,\n  -4, -5,\n  -6, -7\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const int mv_ref_tree[8] =\n{\n  -ZEROMV, 2,\n  -NEARESTMV, 4,\n  -NEARMV, 6,\n  -NEWMV, -SPLITMV\n};\nstatic const int submv_ref_tree[6] =\n{\n  -LEFT4X4, 2,\n  -ABOVE4X4, 4,\n  -ZERO4X4, -NEW4X4\n};\nstatic const int split_mv_tree[6] =\n{\n  -3, 2,\n  -2, 4,\n  -0, -1\n};\nstatic const unsigned char default_b_mode_probs[] =\n{ 120,  90,  79, 133,  87,  85,  80, 111, 151};\nstatic const unsigned char mv_counts_to_probs[6][4] =\n{\n  {   7,   1,   1, 143 },\n  {  14,  18,  14, 107 },\n  { 135,  64,  57,  68 },\n  {  60,  56, 128,  65 },\n  { 159, 134, 128,  34 },\n  { 234, 188, 128,  28 }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "};\nstatic const unsigned char split_mv_probs[3] =\n{ 110, 111, 150};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const unsigned char submv_ref_probs2[5][3] =\n{\n  { 147, 136, 18 },\n  { 106, 145,  1 },\n  { 179, 121,  1 },\n  { 223,   1, 34 },\n  { 208,   1,  1 }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "const static int mv_partitions[4][16] =\n{\n  {0, 0, 0, 0, 0, 0, 0, 0, 1, 1,  1,  1,  1,  1,  1,  1 },\n  {0, 0, 1, 1, 0, 0, 1, 1, 0, 0,  1,  1,  0,  0,  1,  1 },\n  {0, 0, 1, 1, 0, 0, 1, 1, 2, 2,  3,  3,  2,  2,  3,  3 },\n  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.14. predict.c",
      "section_title": true,
      "zh-CHS": "20.14. 预测"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"dixie.h\"\n#include \"predict.h\"\n#include \"idct_add.h\"\n#include \"mem.h\"\n#include <assert.h>\n#include <string.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    BORDER_PIXELS     = 16,\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const filter_t sixtap_filters[8] =\n{\n    { 0,   0, 128,    0,   0,  0 },\n    { 0,  -6, 123,   12,  -1,  0 },\n    { 2, -11, 108,   36,  -8,  1 },\n    { 0,  -9,  93,   50,  -6,  0 },\n    { 3, -16,  77,   77, -16,  3 },\n    { 0,  -6,  50,   93,  -9,  0 },\n    { 1,  -8,  36,  108, -11,  2 },\n    { 0,  -1,  12,  123,  -6,  0 }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const filter_t bilinear_filters[8] =\n{\n    { 0,  0,  128,    0,   0,  0 },\n    { 0,  0,  112,   16,   0,  0 },\n    { 0,  0,   96,   32,   0,  0 },\n    { 0,  0,   80,   48,   0,  0 },\n    { 0,  0,   64,   64,   0,  0 },\n    { 0,  0,   48,   80,   0,  0 },\n    { 0,  0,   32,   96,   0,  0 },\n    { 0,  0,   16,  112,   0,  0 }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_h_nxn(unsigned char *predict,\n              int            stride,\n              int            n)\n{\n    unsigned char *left = predict - 1;\n    int            i, j;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            predict[i *stride + j] = left[i * stride];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_v_nxn(unsigned char *predict,\n              int            stride,\n              int            n)\n{\n    unsigned char *above = predict - stride;\n    int            i, j;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            predict[i *stride + j] = above[j];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_tm_nxn(unsigned char *predict,\n               int            stride,\n               int            n)\n{\n    /* Transposes the left column to the top row for later\n     * consumption by the idct/recon stage\n     */\n    unsigned char *left = predict - 1;\n    unsigned char *above = predict - stride;\n    unsigned char  p = above[-1];\n    int            i, j;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (j = 0; j < n; j++)\n{\n    for (i = 0; i < n; i++)\n        predict[i] = CLAMP_255(*left + above[i] - p);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        predict += stride;\n        left += stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_dc_nxn(unsigned char *predict,\n               int            stride,\n               int            n)\n{\n    unsigned char *left = predict - 1;\n    unsigned char *above = predict - stride;\n    int            i, j, dc = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < n; i++)\n{\n    dc += *left + above[i];\n    left += stride;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "switch (n)\n{\ncase 16:\n    dc = (dc + 16) >> 5;\n    break;\ncase  8:\n    dc = (dc + 8) >> 4;\n    break;\ncase  4:\n    dc = (dc + 4) >> 3;\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            predict[i *stride + j] = dc;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_ve_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *above = predict - stride;\n    int            i, j;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = (above[-1] + 2 * above[0] + above[1] + 2) >> 2;\npredict[1] = (above[ 0] + 2 * above[1] + above[2] + 2) >> 2;\npredict[2] = (above[ 1] + 2 * above[2] + above[3] + 2) >> 2;\npredict[3] = (above[ 2] + 2 * above[3] + above[4] + 2) >> 2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 1; i < 4; i++)\n        for (j = 0; j < 4; j++)\n            predict[i *stride + j] = predict[j];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_he_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *left = predict - 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] =\npredict[1] =\npredict[2] =\npredict[3] = (left[-stride] + 2 * left[0] +\n              left[stride] + 2) >> 2;\npredict += stride;\nleft += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] =\npredict[1] =\npredict[2] =\npredict[3] = (left[-stride] + 2 * left[0] +\n              left[stride] + 2) >> 2;\npredict += stride;\nleft += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] =\npredict[1] =\npredict[2] =\npredict[3] = (left[-stride] + 2 * left[0] +\n              left[stride] + 2) >> 2;\npredict += stride;\nleft += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] =\n    predict[1] =\n    predict[2] =\n    predict[3] = (left[-stride] + 2 * left[0] + left[0] + 2) >> 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_ld_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *above = predict - stride;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 = (above[0] + 2 * above[1] +\n                      above[2] + 2) >> 2;\npredict[1] = pred1 = (above[1] + 2 * above[2] +\n                      above[3] + 2) >> 2;\npredict[2] = pred2 = (above[2] + 2 * above[3] +\n                      above[4] + 2) >> 2;\npredict[3] = pred3 = (above[3] + 2 * above[4] +\n                      above[5] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred1;\npredict[1] = pred2;\npredict[2] = pred3;\npredict[3] = pred4 = (above[4] + 2 * above[5] +\n                      above[6] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred2;\npredict[1] = pred3;\npredict[2] = pred4;\npredict[3] = pred5 = (above[5] + 2 * above[6] +\n                      above[7] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred3;\n    predict[1] = pred4;\n    predict[2] = pred5;\n    predict[3] = pred6 = (above[6] + 2 * above[7] +\n                          above[7] + 2) >> 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_rd_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *left = predict - 1;\n    unsigned char *above = predict - stride;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 =\n    (left[ 0] + 2 * above[-1] + above[0] + 2) >> 2;\npredict[1] = pred1 =\n    (above[-1] + 2 * above[ 0] + above[1] + 2) >> 2;\npredict[2] = pred2 =\n    (above[ 0] + 2 * above[ 1] + above[2] + 2) >> 2;\npredict[3] = pred3 =\n    (above[ 1] + 2 * above[ 2] + above[3] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred4 =\n    (left[stride] + 2 * left[0] + above[-1] + 2) >> 2;\npredict[1] = pred0;\npredict[2] = pred1;\npredict[3] = pred2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred5 =\n    (left[stride*2] + 2 * left[stride] + left[0] + 2) >> 2;\npredict[1] = pred4;\npredict[2] = pred0;\npredict[3] = pred1;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred6 = (left[stride*3] + 2 * left[stride*2] +\n                          left[stride] + 2) >> 2;\n    predict[1] = pred5;\n    predict[2] = pred4;\n    predict[3] = pred0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_vr_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *left = predict - 1;\n    unsigned char *above = predict - stride;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6,\n                   pred7, pred8, pred9;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 = (above[-1] + above[0] + 1) >> 1;\npredict[1] = pred1 = (above[ 0] + above[1] + 1) >> 1;\npredict[2] = pred2 = (above[ 1] + above[2] + 1) >> 1;\npredict[3] = pred3 = (above[ 2] + above[3] + 1) >> 1;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred4 = (left[ 0] + 2 * above[-1] +\n                      above[0] + 2) >> 2;\npredict[1] = pred5 = (above[-1] + 2 * above[ 0] +\n                      above[1] + 2) >> 2;\npredict[2] = pred6 = (above[ 0] + 2 * above[ 1] +\n                      above[2] + 2) >> 2;\npredict[3] = pred7 = (above[ 1] + 2 * above[ 2] +\n                      above[3] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred8 =\n    (left[stride] + 2 * left[0] + above[-1] + 2) >> 2;\npredict[1] = pred0;\npredict[2] = pred1;\npredict[3] = pred2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred9 =\n        (left[stride*2] + 2 * left[stride] + left[0] + 2) >> 2;\n    predict[1] = pred4;\n    predict[2] = pred5;\n    predict[3] = pred6;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_vl_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *above = predict - stride;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6,\n                   pred7, pred8, pred9;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 = (above[0] + above[1] + 1) >> 1;\npredict[1] = pred1 = (above[1] + above[2] + 1) >> 1;\npredict[2] = pred2 = (above[2] + above[3] + 1) >> 1;\npredict[3] = pred3 = (above[3] + above[4] + 1) >> 1;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred4 = (above[0] + 2 * above[1] +\n                      above[2] + 2) >> 2;\npredict[1] = pred5 = (above[1] + 2 * above[2] +\n                      above[3] + 2) >> 2;\npredict[2] = pred6 = (above[2] + 2 * above[3] +\n                      above[4] + 2) >> 2;\npredict[3] = pred7 = (above[3] + 2 * above[4] +\n                      above[5] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred1;\npredict[1] = pred2;\npredict[2] = pred3;\npredict[3] = pred8 = (above[4] + 2 * above[5] +\n                      above[6] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred5;\n    predict[1] = pred6;\n    predict[2] = pred7;\n    predict[3] = pred9 = (above[5] + 2 * above[6] +\n                          above[7] + 2) >> 2;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_hd_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *left = predict - 1;\n    unsigned char *above = predict - stride;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6,\n                   pred7, pred8, pred9;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 = (left[ 0] + above[-1] + 1) >> 1;\npredict[1] = pred1 = (left[ 0] + 2 * above[-1] +\n                      above[0] + 2) >> 2;\npredict[2] = pred2 = (above[-1] + 2 * above[ 0] +\n                      above[1] + 2) >> 2;\npredict[3] = pred3 = (above[ 0] + 2 * above[ 1] +\n                      above[2] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred4 = (left[stride] + left[0] + 1) >> 1;\npredict[1] = pred5 = (left[stride] + 2 * left[0] +\n                      above[-1] + 2) >> 2;\npredict[2] = pred0;\npredict[3] = pred1;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred6 = (left[stride*2] + left[stride] + 1) >> 1;\npredict[1] = pred7 = (left[stride*2] + 2 * left[stride] +\n                      left[0] + 2) >> 2;\npredict[2] = pred4;\npredict[3] = pred5;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred8 = (left[stride*3] + left[stride*2] + 1) >> 1;\n    predict[1] = pred9 = (left[stride*3] + 2 * left[stride*2] +\n                          left[stride] + 2) >> 2;\n    predict[2] = pred6;\n    predict[3] = pred7;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_hu_4x4(unsigned char *predict,\n               int            stride)\n{\n    unsigned char *left = predict - 1;\n    int            pred0, pred1, pred2, pred3, pred4, pred5, pred6;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred0 = (left[stride*0] +\n                      left[stride*1] + 1) >> 1;\npredict[1] = pred1 = (left[stride*0] + 2 * left[stride*1] +\n                      left[stride*2] + 2) >> 2;\npredict[2] = pred2 = (left[stride*1] + left[stride*2] + 1) >> 1;\npredict[3] = pred3 = (left[stride*1] + 2 * left[stride*2] +\n                      left[stride*3] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred2;\npredict[1] = pred3;\npredict[2] = pred4 = (left[stride*2] + left[stride*3] + 1) >> 1;\npredict[3] = pred5 = (left[stride*2] + 2 * left[stride*3] +\n                      left[stride*3] + 2) >> 2;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "predict[0] = pred4;\npredict[1] = pred5;\npredict[2] = pred6 = left[stride*3];\npredict[3] = pred6;\npredict += stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict[0] = pred6;\n    predict[1] = pred6;\n    predict[2] = pred6;\n    predict[3] = pred6;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_h_16x16(unsigned char *predict, int stride)\n{\n    predict_h_nxn(predict, stride, 16);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_v_16x16(unsigned char *predict, int stride)\n{\n    predict_v_nxn(predict, stride, 16);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_tm_16x16(unsigned char *predict, int stride)\n{\n    predict_tm_nxn(predict, stride, 16);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_h_8x8(unsigned char *predict, int stride)\n{\n    predict_h_nxn(predict, stride, 8);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_v_8x8(unsigned char *predict, int stride)\n{\n    predict_v_nxn(predict, stride, 8);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_tm_8x8(unsigned char *predict, int stride)\n{\n    predict_tm_nxn(predict, stride, 8);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_tm_4x4(unsigned char *predict, int stride)\n{\n    predict_tm_nxn(predict, stride, 4);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\ncopy_down(unsigned char           *recon,\n          int                      stride)\n{\n    /* Copy the four pixels above-right of subblock 3 to\n     * above-right of subblocks 7, 11, and 15\n     */\n    uint32_t tmp, *copy = (void *)(recon + 16 - stride);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    stride = stride / sizeof(unsigned int);\n    tmp = *copy;\n    copy += stride * 4;\n    *copy = tmp;\n    copy += stride * 4;\n    *copy = tmp;\n    copy += stride * 4;\n    *copy = tmp;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nb_pred(unsigned char  *predict,\n       int             stride,\n       struct mb_info *mbi,\n       short          *coeffs)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "copy_down(predict, stride);",
      "zh-CHS": "向下复制（预测、跨步）；"
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 16; i++)\n{\n    unsigned char *b_predict = predict + (i & 3) * 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "switch (mbi->split.modes[i])\n{\ncase B_DC_PRED:\n    predict_dc_nxn(b_predict, stride, 4);\n    break;\ncase B_TM_PRED:\n    predict_tm_4x4(b_predict, stride);\n    break;\ncase B_VE_PRED:\n    predict_ve_4x4(b_predict, stride);\n    break;\ncase B_HE_PRED:\n    predict_he_4x4(b_predict, stride);\n    break;\ncase B_LD_PRED:\n    predict_ld_4x4(b_predict, stride);\n    break;\ncase B_RD_PRED:\n    predict_rd_4x4(b_predict, stride);\n    break;\ncase B_VR_PRED:\n    predict_vr_4x4(b_predict, stride);\n    break;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "case B_VL_PRED:\n    predict_vl_4x4(b_predict, stride);\n    break;\ncase B_HD_PRED:\n    predict_hd_4x4(b_predict, stride);\n    break;\ncase B_HU_PRED:\n    predict_hu_4x4(b_predict, stride);\n    break;\ndefault:\n    assert(0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "vp8_dixie_idct_add(b_predict, b_predict, stride, coeffs);\ncoeffs += 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if ((i & 3) == 3)\n        {\n            predict += stride * 4;\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void",
      "zh-CHS": "静态空隙"
    },
    {
      "indent": 3,
      "text": "fixup_dc_coeffs(struct mb_info *mbi,\n                short          *coeffs)\n{\n    short y2[16];\n    int   i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "vp8_dixie_walsh(coeffs + 24 * 16, y2);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < 16; i++)\n        coeffs[i*16] = y2[i];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_intra_luma(unsigned char   *predict,\n                   int              stride,\n                   struct mb_info  *mbi,\n                   short           *coeffs)\n{\n    if (mbi->base.y_mode == B_PRED)\n        b_pred(predict, stride, mbi, coeffs);\n    else",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "switch (mbi->base.y_mode)\n{\ncase DC_PRED:\n    predict_dc_nxn(predict, stride, 16);\n    break;\ncase V_PRED:\n    predict_v_16x16(predict, stride);\n    break;\ncase H_PRED:\n    predict_h_16x16(predict, stride);\n    break;\ncase TM_PRED:\n    predict_tm_16x16(predict, stride);\n    break;\ndefault:\n    assert(0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "fixup_dc_coeffs(mbi, coeffs);",
      "zh-CHS": "修正系数（mbi，系数）；"
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < 16; i++)\n{\n    vp8_dixie_idct_add(predict, predict, stride, coeffs);\n    coeffs += 16;\n    predict += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "            if ((i & 3) == 3)\n                predict += stride * 4 - 16;\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_intra_chroma(unsigned char   *predict_u,\n                     unsigned char   *predict_v,\n                     int              stride,\n                     struct mb_info  *mbi,\n                     short           *coeffs)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "switch (mbi->base.uv_mode)\n{\ncase DC_PRED:\n    predict_dc_nxn(predict_u, stride, 8);\n    predict_dc_nxn(predict_v, stride, 8);\n    break;\ncase V_PRED:\n    predict_v_8x8(predict_u, stride);\n    predict_v_8x8(predict_v, stride);\n    break;\ncase H_PRED:\n    predict_h_8x8(predict_u, stride);\n    predict_h_8x8(predict_v, stride);\n    break;\ncase TM_PRED:\n    predict_tm_8x8(predict_u, stride);\n    predict_tm_8x8(predict_v, stride);\n    break;\ndefault:\n    assert(0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "coeffs += 16 * 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 16; i < 20; i++)\n{\n    vp8_dixie_idct_add(predict_u, predict_u, stride, coeffs);\n    coeffs += 16;\n    predict_u += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (i & 1)\n        predict_u += stride * 4 - 8;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 20; i < 24; i++)\n{\n    vp8_dixie_idct_add(predict_v, predict_v, stride, coeffs);\n    coeffs += 16;\n    predict_v += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (i & 1)\n            predict_v += stride * 4 - 8;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nsixtap_horiz(unsigned char       *output,\n             int                  output_stride,\n             const unsigned char *reference,\n             int                  reference_stride,\n             int                  cols,\n             int                  rows,\n             const filter_t       filter\n            )\n{\n    int r, c, temp;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (r = 0; r < rows; r++)\n{\n    for (c = 0; c < cols; c++)\n    {\n        temp = (reference[-2] * filter[0]) +\n               (reference[-1] * filter[1]) +\n               (reference[ 0] * filter[2]) +\n               (reference[ 1] * filter[3]) +\n               (reference[ 2] * filter[4]) +\n               (reference[ 3] * filter[5]) +\n               64;\n        temp >>= 7;\n        output[c] = CLAMP_255(temp);\n        reference++;\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        reference += reference_stride - cols;\n        output += output_stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nsixtap_vert(unsigned char       *output,\n            int                  output_stride,\n            const unsigned char *reference,\n            int                  reference_stride,\n            int                  cols,\n            int                  rows,\n            const filter_t       filter\n           )\n{\n    int r, c, temp;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (r = 0; r < rows; r++)\n{",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (c = 0; c < cols; c++)\n{\n    temp = (reference[-2*reference_stride] * filter[0]) +\n           (reference[-1*reference_stride] * filter[1]) +\n           (reference[ 0*reference_stride] * filter[2]) +\n           (reference[ 1*reference_stride] * filter[3]) +\n           (reference[ 2*reference_stride] * filter[4]) +\n           (reference[ 3*reference_stride] * filter[5]) +\n           64;\n    temp >>= 7;\n    output[c] = CLAMP_255(temp);\n    reference++;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        reference += reference_stride - cols;\n        output += output_stride;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nsixtap_2d(unsigned char       *output,\n          int                  output_stride,\n          const unsigned char *reference,\n          int                  reference_stride,\n          int                  cols,\n          int                  rows,\n          int                  mx,\n          int                  my,\n          const filter_t       filters[8]\n         )\n{\n    DECLARE_ALIGNED(16, unsigned char, temp[16*(16+5)]);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    sixtap_horiz(temp, 16,\n                 reference - 2 * reference_stride, reference_stride,\n                 cols, rows + 5, filters[mx]);\n    sixtap_vert(output, output_stride,\n                temp + 2 * 16, 16,\n                cols, rows, filters[my]);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct img_index\n{\n    unsigned char *y, *u, *v;\n    int            stride, uv_stride;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const unsigned char *\nfilter_block(unsigned char        *output,\n             const unsigned char  *reference,\n             int                   stride,\n             const union mv       *mv,\n             const filter_t        filters[8])\n{\n    int mx, my;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Handle 0,0 as a special case.  TODO: Does this make it any\n * faster?\n */\nif (!mv->raw)\n    return reference;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "mx = mv->d.x & 7;\nmy = mv->d.y & 7;\nreference += ((mv->d.y >> 3) * stride) + (mv->d.x >> 3);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (mx | my)\n{\n    sixtap_2d(output, stride, reference, stride, 4, 4, mx, my,\n              filters);\n    reference = output;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return reference;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nrecon_1_block(unsigned char        *output,\n              const unsigned char  *reference,\n              int                   stride,\n              const union mv       *mv,\n              const filter_t        filters[8],\n              short                *coeffs,\n              struct mb_info       *mbi,\n              int                   b\n             )\n{\n    const unsigned char *predict;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict = filter_block(output, reference, stride, mv, filters);\n    vp8_dixie_idct_add(output, predict, stride, coeffs + 16 * b);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static mv_t\ncalculate_chroma_splitmv(struct mb_info *mbi,\n                         int             b,\n                         int             full_pixel)\n{\n    int temp;\n    union mv mv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp = mbi->split.mvs[b].d.x +\n       mbi->split.mvs[b+1].d.x +\n       mbi->split.mvs[b+4].d.x +\n       mbi->split.mvs[b+5].d.x;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (temp < 0)\n    temp -= 4;\nelse\n    temp += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "mv.d.x = temp / 8;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "temp = mbi->split.mvs[b].d.y +\n       mbi->split.mvs[b+1].d.y +\n       mbi->split.mvs[b+4].d.y +\n       mbi->split.mvs[b+5].d.y;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (temp < 0)\n    temp -= 4;\nelse\n    temp += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "mv.d.y = temp / 8;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (full_pixel)\n{\n    mv.d.x &= ~7;\n    mv.d.y &= ~7;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return mv;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Note: We rely on the reconstructed border having the same stride\n * as the reference buffer because the filter_block can't adjust the\n * stride with its return value, only the reference pointer.\n */\nstatic void\nbuild_mc_border(unsigned char       *dst,\n                const unsigned char *src,\n                int                  stride,\n                int                  x,\n                int                  y,\n                int                  b_w,\n                int                  b_h,\n                int                  w,\n                int                  h\n               )\n{\n    const unsigned char *ref_row;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Get a pointer to the start of the real data for this row */\nref_row = src - x - y * stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (y >= h)\n    ref_row += (h - 1) * stride;\nelse if (y > 0)\n    ref_row += y * stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "do\n{\n    int left, right = 0, copy;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "left = x < 0 ? -x : 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (left > b_w) left = b_w;",
      "zh-CHS": "如果（左>黑白）左=黑白；"
    },
    {
      "indent": 11,
      "text": "if (x + b_w > w)\n    right = x + b_w - w;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (right > b_w) right = b_w;",
      "zh-CHS": "如果（右>黑白）右=黑白；"
    },
    {
      "indent": 11,
      "text": "copy = b_w - left - right;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (left) memset(dst, ref_row[0], left);",
      "zh-CHS": "if（左）memset（dst，参考行[0]，左）；"
    },
    {
      "indent": 11,
      "text": "if (copy)\n    memcpy(dst + left, ref_row + x + left, copy);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (right)\n    memset(dst + left + copy, ref_row[w-1], right);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "dst += stride;\ny++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (y < h && y > 0)\n            ref_row += stride;\n    }\n    while (--b_h);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nrecon_1_edge_block(unsigned char        *output,\n                   unsigned char        *emul_block,\n                   const unsigned char  *reference,\n                   int                   stride,\n                   const union mv       *mv,\n                   const filter_t        filters[8],\n                   short                *coeffs,\n                   struct mb_info       *mbi,\n                   int                   x,\n                   int                   y,\n                   int                   w,\n                   int                   h,\n                   int                   start_b\n                  )\n{\n    const unsigned char *predict;\n    int                  b = start_b;\n    const int            b_w = 4;\n    const int            b_h = 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "x += mv->d.x >> 3;\ny += mv->d.y >> 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Need two pixels left/above, 3 right/below for 6-tap */\nif (x < 2 || x + b_w - 1 + 3 >= w || y < 2 ||\n    y + b_h - 1 + 3 >= h)\n{\n    reference += (mv->d.x >> 3) + (mv->d.y >> 3) * stride;\n    build_mc_border(emul_block,\n                    reference - 2 - 2 * stride, stride,\n                    x - 2, y - 2, b_w + 5, b_h + 5, w, h);\n    reference = emul_block + 2 * stride + 2;\n    reference -= (mv->d.x >> 3) + (mv->d.y >> 3) * stride;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    predict = filter_block(output, reference, stride, mv, filters);\n    vp8_dixie_idct_add(output, predict, stride, coeffs + 16 * b);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\npredict_inter_emulated_edge(struct vp8_decoder_ctx  *ctx,\n                            struct img_index        *img,\n                            short                   *coeffs,\n                            struct mb_info          *mbi,\n                            int                      mb_col,\n                            int                      mb_row)\n{\n    /* TODO: Move this into its own buffer.  This only works because\n     * we still have a border allocated.\n     */\n    unsigned char *emul_block = ctx->frame_strg[0].img.img_data;\n    unsigned char *reference;\n    unsigned char *output;\n    ptrdiff_t      reference_offset;\n    int            w, h, x, y, b;\n    union mv       chroma_mv[4];\n    unsigned char *u = img->u, *v = img->v;\n    int            full_pixel = ctx->frame_hdr.version == 3;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "x = mb_col * 16;\ny = mb_row * 16;\nw = ctx->mb_cols * 16;\nh = ctx->mb_rows * 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "output = img->y;\nreference_offset = ctx->ref_frame_offsets[mbi->base.ref_frame];\nreference = output + reference_offset;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (mbi->base.y_mode != SPLITMV)\n{\n    union mv uvmv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "uvmv = mbi->base.mv;\nuvmv.d.x = (uvmv.d.x + 1 + (uvmv.d.x >> 31) * 2) / 2;\nuvmv.d.y = (uvmv.d.y + 1 + (uvmv.d.y >> 31) * 2) / 2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (full_pixel)\n{\n    uvmv.d.x &= ~7;\n    uvmv.d.y &= ~7;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    chroma_mv[0] = uvmv;\n    chroma_mv[1] = uvmv;\n    chroma_mv[2] = uvmv;\n    chroma_mv[3] = uvmv;\n}\nelse\n{\n    chroma_mv[0] = calculate_chroma_splitmv(mbi,  0, full_pixel);\n    chroma_mv[1] = calculate_chroma_splitmv(mbi,  2, full_pixel);\n    chroma_mv[2] = calculate_chroma_splitmv(mbi,  8, full_pixel);\n    chroma_mv[3] = calculate_chroma_splitmv(mbi, 10, full_pixel);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Luma */\nfor (b = 0; b < 16; b++)\n{\n    union mv *ymv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (mbi->base.y_mode != SPLITMV)\n    ymv = &mbi->base.mv;\nelse\n    ymv = mbi->split.mvs + b;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "recon_1_edge_block(output, emul_block, reference, img->stride, ymv, ctx->subpixel_filters, coeffs, mbi, x, y, w, h, b);",
      "zh-CHS": "识别边缘块（输出、emul块、参考、img->步幅、ymv、ctx->亚像素过滤器、系数、mbi、x、y、w、h、b）；"
    },
    {
      "indent": 11,
      "text": "x += 4;\noutput += 4;\nreference += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if ((b & 3) == 3)\n    {\n        x -= 16;\n        y += 4;\n        output += 4 * img->stride - 16;\n        reference += 4 * img->stride - 16;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "x = mb_col * 16;\ny = mb_row * 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Chroma */\nx >>= 1;\ny >>= 1;\nw >>= 1;\nh >>= 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (b = 0; b < 4; b++)\n{\n    recon_1_edge_block(u, emul_block, u + reference_offset,\n                       img->uv_stride,\n                       &chroma_mv[b], ctx->subpixel_filters,\n                       coeffs, mbi, x, y, w, h, b + 16);\n    recon_1_edge_block(v, emul_block, v + reference_offset,\n                       img->uv_stride,\n                       &chroma_mv[b], ctx->subpixel_filters,\n                       coeffs, mbi, x, y, w, h, b + 20);\n    u += 4;\n    v += 4;\n    x += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (b & 1)\n    {\n        x -= 8;\n        y += 4;\n        u += 4 * img->uv_stride - 8;\n        v += 4 * img->uv_stride - 8;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 3,
      "text": "static void predict_inter(struct vp8_decoder_ctx *ctx, struct img_index *img, short *coeffs, struct mb_info *mbi)",
      "zh-CHS": "静态void predict_inter（结构vp8_解码器_ctx*ctx，结构img_索引*img，short*系数，结构mb_信息*mbi）"
    },
    {
      "indent": 3,
      "text": "{\n    unsigned char *y = img->y;\n    unsigned char *u = img->u;\n    unsigned char *v = img->v;\n    ptrdiff_t      reference_offset;\n    union mv       chroma_mv[4];\n    int            full_pixel = ctx->frame_hdr.version == 3;\n    int b;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (mbi->base.y_mode != SPLITMV)\n{\n    union mv             uvmv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "uvmv = mbi->base.mv;\nuvmv.d.x = (uvmv.d.x + 1 + (uvmv.d.x >> 31) * 2) / 2;\nuvmv.d.y = (uvmv.d.y + 1 + (uvmv.d.y >> 31) * 2) / 2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (full_pixel)\n{\n    uvmv.d.x &= ~7;\n    uvmv.d.y &= ~7;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    chroma_mv[0] =\n        chroma_mv[1] =\n            chroma_mv[2] =\n                chroma_mv[3] = uvmv;\n}\nelse\n{\n    chroma_mv[0] = calculate_chroma_splitmv(mbi,  0, full_pixel);\n    chroma_mv[1] = calculate_chroma_splitmv(mbi,  2, full_pixel);\n    chroma_mv[2] = calculate_chroma_splitmv(mbi,  8, full_pixel);\n    chroma_mv[3] = calculate_chroma_splitmv(mbi, 10, full_pixel);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "reference_offset = ctx->ref_frame_offsets[mbi->base.ref_frame];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (b = 0; b < 16; b++)\n{\n    union mv *ymv;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (mbi->base.y_mode != SPLITMV)\n    ymv = &mbi->base.mv;\nelse\n    ymv = mbi->split.mvs + b;\nrecon_1_block(y, y + reference_offset, img->stride,\n              ymv, ctx->subpixel_filters, coeffs, mbi, b);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "y += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if ((b & 3) == 3)\n        y += 4 * img->stride - 16;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (b = 0; b < 4; b++)\n{\n    recon_1_block(u, u + reference_offset,\n                  img->uv_stride, &chroma_mv[b],\n                  ctx->subpixel_filters, coeffs, mbi, b + 16);\n    recon_1_block(v, v + reference_offset,\n                  img->uv_stride, &chroma_mv[b],\n                  ctx->subpixel_filters, coeffs, mbi, b + 20);\n    u += 4;\n    v += 4;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (b & 1)\n        {\n            u += 4 * img->uv_stride - 8;\n            v += 4 * img->uv_stride - 8;\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_release_ref_frame(struct ref_cnt_img *rcimg)\n{\n    if (rcimg)\n    {\n        assert(rcimg->ref_cnt);\n        rcimg->ref_cnt--;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct ref_cnt_img *\nvp8_dixie_ref_frame(struct ref_cnt_img *rcimg)\n{\n    rcimg->ref_cnt++;\n    return rcimg;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct ref_cnt_img *\nvp8_dixie_find_free_ref_frame(struct ref_cnt_img *frames)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < NUM_REF_FRAMES; i++)\n    if (frames[i].ref_cnt == 0)\n    {\n        frames[i].ref_cnt = 1;\n        return &frames[i];\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    assert(0);\n    return NULL;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfixup_left(unsigned char        *predict,\n           int                   width,\n           int                   stride,\n           unsigned int          row,\n           enum prediction_mode  mode)\n{\n    /* The left column of out-of-frame pixels is taken to be 129,\n     * unless we're doing DC_PRED, in which case we duplicate the\n     * above row, unless this is also row 0, in which case we use\n     * 129.\n     */\n    unsigned char *left = predict - 1;\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (mode == DC_PRED && row)\n{\n    unsigned char *above = predict - stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    for (i = 0; i < width; i++)\n    {\n        *left = above[i];\n        left += stride;\n    }\n}\nelse\n{\n    /* Need to re-set the above row, in case the above MB was\n     * DC_PRED.\n     */\n    left -= stride;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        for (i = -1; i < width; i++)\n        {\n            *left = 129;\n            left += stride;\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nfixup_above(unsigned char        *predict,\n            int                   width,\n            int                   stride,\n            unsigned int          col,\n            enum prediction_mode  mode)\n{\n    /* The above row of out-of-frame pixels is taken to be 127,\n     * unless we're doing DC_PRED, in which case we duplicate the\n     * left col, unless this is also col 0, in which case we use\n     * 127.\n     */\n    unsigned char *above = predict - stride;\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (mode == DC_PRED && col)\n{\n    unsigned char *left = predict - 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    for (i = 0; i < width; i++)\n    {\n        above[i] = *left;\n        left += stride;\n    }\n}\nelse\n    /* Need to re-set the left col, in case the last MB was\n     * DC_PRED.\n     */\n    memset(above - 1, 127, width + 1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    memset(above + width, 127, 4); // for above-right subblock modes\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_predict_init(struct vp8_decoder_ctx *ctx) {",
      "zh-CHS": "void vp8_dixie_predict_init（结构vp8_解码器_ctx*ctx）{"
    },
    {
      "indent": 7,
      "text": "int i;\nunsigned char *this_frame_base;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->frame_hdr.frame_size_updated)\n{\n    for (i = 0; i < NUM_REF_FRAMES; i++)\n    {\n        unsigned int w = ctx->mb_cols * 16 + BORDER_PIXELS * 2;\n        unsigned int h = ctx->mb_rows * 16 + BORDER_PIXELS * 2;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "vpx_img_free(&ctx->frame_strg[i].img);\nctx->frame_strg[i].ref_cnt = 0;\nctx->ref_frames[i] = NULL;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (!vpx_img_alloc(&ctx->frame_strg[i].img, IMG_FMT_I420, w, h, 16)) vpx_internal_error(&ctx->error, VPX_CODEC_MEM_ERROR, \"Failed to allocate %dx%d\" \" framebuffer\", w, h);",
      "zh-CHS": "如果（！vpx\\u img\\u alloc（&ctx->frame\\u strg[i].img，img\\u FMT\\u I420，w，h，16））vpx\\u内部错误（&ctx->error，vpx\\u CODEC\\u MEM\\u error，“无法分配%dx%d”“framebuffer”，w，h）；"
    },
    {
      "indent": 15,
      "text": "vpx_img_set_rect(&ctx->frame_strg[i].img, BORDER_PIXELS,\n    BORDER_PIXELS, ctx->frame_hdr.kf.w,\n    ctx->frame_hdr.kf.h);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "}",
      "zh-CHS": "}"
    },
    {
      "indent": 7,
      "text": "    if (ctx->frame_hdr.version)\n        ctx->subpixel_filters = bilinear_filters;\n    else\n        ctx->subpixel_filters = sixtap_filters;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Find a free framebuffer to predict into */\nif (ctx->ref_frames[CURRENT_FRAME])\n    vp8_dixie_release_ref_frame(ctx->ref_frames[CURRENT_FRAME]);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "ctx->ref_frames[CURRENT_FRAME] =\n    vp8_dixie_find_free_ref_frame(ctx->frame_strg);\nthis_frame_base = ctx->ref_frames[CURRENT_FRAME]->img.img_data;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Calculate offsets to the other reference frames */\nfor (i = 0; i < NUM_REF_FRAMES; i++)\n{\n    struct ref_cnt_img  *ref = ctx->ref_frames[i];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    ctx->ref_frame_offsets[i] =\n        ref ? ref->img.img_data - this_frame_base : 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /* TODO: No need to do this on every frame... */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_predict_destroy(struct vp8_decoder_ctx *ctx)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < NUM_REF_FRAMES; i++)\n    {\n        vpx_img_free(&ctx->frame_strg[i].img);\n        ctx->frame_strg[i].ref_cnt = 0;\n        ctx->ref_frames[i] = NULL;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_predict_process_row(struct vp8_decoder_ctx *ctx,\n                              unsigned int            row,\n                              unsigned int            start_col,\n                              unsigned int            num_cols)\n{\n    struct img_index img;\n    struct mb_info *mbi;\n    unsigned int    col;\n    short          *coeffs;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Adjust pointers based on row, start_col */\nimg.stride =\n    ctx->ref_frames[CURRENT_FRAME]->img.stride[PLANE_Y];\nimg.uv_stride =\n    ctx->ref_frames[CURRENT_FRAME]->img.stride[PLANE_U];\nimg.y = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_Y];\nimg.u = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_U];\nimg.v = ctx->ref_frames[CURRENT_FRAME]->img.planes[PLANE_V];\nimg.y += (img.stride * row + start_col) * 16;\nimg.u += (img.uv_stride * row + start_col) * 8;\nimg.v += (img.uv_stride * row + start_col) * 8;\nmbi = ctx->mb_info_rows[row] + start_col;\ncoeffs = ctx->tokens[row &\n    (ctx->token_hdr.partitions - 1)].coeffs +\n    25 * 16 * start_col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Fix up the out-of-frame pixels */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (start_col == 0)\n{\n    fixup_left(img.y, 16, img.stride, row, mbi->base.y_mode);\n    fixup_left(img.u, 8, img.uv_stride, row, mbi->base.uv_mode);\n    fixup_left(img.v, 8, img.uv_stride, row, mbi->base.uv_mode);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    if (row == 0)\n        *(img.y - img.stride - 1) = 127;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (col = start_col; col < start_col + num_cols; col++)\n{\n    if (row == 0)\n    {\n        fixup_above(img.y, 16, img.stride, col,\n                    mbi->base.y_mode);\n        fixup_above(img.u, 8, img.uv_stride, col,\n                    mbi->base.uv_mode);\n        fixup_above(img.v, 8, img.uv_stride, col,\n                    mbi->base.uv_mode);\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (mbi->base.y_mode <= B_PRED)\n{\n    predict_intra_luma(img.y, img.stride, mbi, coeffs);\n    predict_intra_chroma(img.u, img.v, img.uv_stride, mbi,\n                         coeffs);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "else\n{\n    if (mbi->base.y_mode != SPLITMV) // && != BPRED\n        fixup_dc_coeffs(mbi, coeffs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    if (mbi->base.need_mc_border)\n        predict_inter_emulated_edge(ctx, &img, coeffs, mbi,\n                                    col, row);\n    else\n        predict_inter(ctx, &img, coeffs, mbi);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    /* Advance to the next macroblock */\n    mbi++;\n    img.y += 16;\n    img.u += 8;\n    img.v += 8;\n    coeffs += 25 * 16;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if (col == ctx->mb_cols)\n    {\n        /* Extend the last row by four pixels for intra-prediction.\n         * This will be propagated later by copy_down.\n         */\n        uint32_t *extend = (uint32_t *)(img.y + 15 * img.stride);\n        uint32_t  val = 0x01010101 * img.y[-1 + 15 * img.stride];\n        *extend = val;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.15. predict.h",
      "section_title": true,
      "zh-CHS": "20.15. 预测"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef PREDICT_H\n#define PREDICT_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_predict_init(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "void vp8_dixie_predict_init（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_predict_destroy(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "无效vp8_dixie_预测_销毁（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_predict_process_row(struct vp8_decoder_ctx *ctx, unsigned int row, unsigned int start_col, unsigned int num_cols);",
      "zh-CHS": "void vp8_dixie_predict_process_row（结构vp8_decoder_ctx*ctx，无符号整数行，无符号整数起始列，无符号整数列）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_release_ref_frame(struct ref_cnt_img *rcimg);",
      "zh-CHS": "无效vp8释放参考帧（结构参考cnt img*rcimg）；"
    },
    {
      "indent": 3,
      "text": "struct ref_cnt_img *\nvp8_dixie_ref_frame(struct ref_cnt_img *rcimg);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "struct ref_cnt_img *\nvp8_dixie_find_free_ref_frame(struct ref_cnt_img *frames);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.16. tokens.c",
      "section_title": true,
      "zh-CHS": "20.16. 代币"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#include \"vpx_codec_internal.h\"\n#include \"dixie.h\"\n#include \"tokens.h\"\n#include <stdlib.h>\n#include <string.h>\n#include <malloc.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "enum\n{\n    EOB_CONTEXT_NODE,\n    ZERO_CONTEXT_NODE,\n    ONE_CONTEXT_NODE,\n    LOW_VAL_CONTEXT_NODE,\n    TWO_CONTEXT_NODE,\n    THREE_CONTEXT_NODE,\n    HIGH_LOW_CONTEXT_NODE,\n    CAT_ONE_CONTEXT_NODE,\n    CAT_THREEFOUR_CONTEXT_NODE,\n    CAT_THREE_CONTEXT_NODE,\n    CAT_FIVE_CONTEXT_NODE\n};\nenum\n{\n    ZERO_TOKEN,\n    ONE_TOKEN,\n    TWO_TOKEN,\n    THREE_TOKEN,\n    FOUR_TOKEN,\n    DCT_VAL_CATEGORY1,\n    DCT_VAL_CATEGORY2,\n    DCT_VAL_CATEGORY3,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    DCT_VAL_CATEGORY4,\n    DCT_VAL_CATEGORY5,\n    DCT_VAL_CATEGORY6,\n    DCT_EOB_TOKEN,\n    MAX_ENTROPY_TOKENS\n};\nstruct extrabits\n{\n    short         min_val;\n    short         length;\n    unsigned char probs[12];\n};\nstatic const unsigned int left_context_index[25] =\n{\n    0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,\n    4, 4, 5, 5, 6, 6, 7, 7, 8\n};\nstatic const unsigned int above_context_index[25] =\n{\n    0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,\n    4, 5, 4, 5, 6, 7, 6, 7, 8\n};\n#define X(n) ((n) * PREV_COEFF_CONTEXTS * ENTROPY_NODES)\nstatic const unsigned int bands_x[16] =\n{\n    X(0), X(1), X(2), X(3), X(6), X(4), X(5), X(6),\n    X(6), X(6), X(6), X(6), X(6), X(6), X(6), X(7)\n};\n#undef X\nstatic const struct extrabits extrabits[MAX_ENTROPY_TOKENS] =\n{\n    { 0, -1, {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //ZERO_TOKEN\n    { 1, 0,  {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //ONE_TOKEN\n    { 2, 0,  {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //TWO_TOKEN\n    { 3, 0,  {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //THREE_TOKEN\n    { 4, 0,  {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //FOUR_TOKEN\n    { 5, 0,  {159,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //DCT_VAL_CATEGORY1\n    { 7, 1,  {145, 165,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //DCT_VAL_CATEGORY2\n    {11, 2,  {140, 148, 173,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //DCT_VAL_CATEGORY3",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    {19, 3,  {135, 140, 155, 176,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, //DCT_VAL_CATEGORY4\n    {35, 4,  {130, 134, 141, 157, 180,   0,\n                0,   0,   0,   0,   0,   0 } }, //DCT_VAL_CATEGORY5\n    {67, 10, {129, 130, 133, 140, 153, 177,\n              196, 230, 243, 254, 254,   0 } }, //DCT_VAL_CATEGORY6\n    { 0, -1, {  0,   0,   0,   0,   0,   0,\n                0,   0,   0,   0,   0,   0 } }, // EOB TOKEN\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const unsigned int zigzag[16] =\n{\n    0,  1,  4,  8,  5,  2,  3,  6,  9, 12, 13, 10,  7, 11, 14, 15\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define DECODE_AND_APPLYSIGN(value_to_sign) \\\n    v = (bool_get_bit(bool) ? -value_to_sign \\\n                            : value_to_sign) * dqf[!!c];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define DECODE_AND_BRANCH_IF_ZERO(probability,branch) \\\n    if (!bool_get(bool, probability)) goto branch;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define DECODE_AND_LOOP_IF_ZERO(probability,branch) \\\n    if (!bool_get(bool, probability)) \\\n    { \\\n        prob = type_probs; \\\n        if (c<15) {\\\n            ++c; \\\n            prob += bands_x[c]; \\\n            goto branch; \\\n        }\\\n        else \\\n            goto BLOCK_FINISHED; /* for malformed input */\\\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val) \\\n    DECODE_AND_APPLYSIGN(val) \\\n    prob = type_probs + (ENTROPY_NODES*2); \\\n    if (c < 15){\\\n        b_tokens[zigzag[c]] = v; \\\n        ++c; \\\n        goto DO_WHILE; }\\\n    b_tokens[zigzag[15]] = v; \\\n    goto BLOCK_FINISHED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define DECODE_EXTRABIT_AND_ADJUST_VAL(t,bits_count)\\\n    val += bool_get(bool, extrabits[t].probs[bits_count]) << \\\n    bits_count;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static int\ndecode_mb_tokens(struct bool_decoder  *bool,\n                 token_entropy_ctx_t   left,\n                 token_entropy_ctx_t   above,\n                 short                *tokens,\n                 enum prediction_mode  mode,\n                 coeff_probs_table_t   probs,\n                 short                 factor[TOKEN_BLOCK_TYPES][2])\n{\n    int            i, stop, type;\n    int            c, t, v;\n    int            val, bits_count;\n    int            eob_mask;\n    short         *b_tokens;   // tokens for this block\n    unsigned char *type_probs; // probabilities for this block type\n    unsigned char *prob;\n    short         *dqf;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "eob_mask = 0;",
      "zh-CHS": "eob_掩码=0；"
    },
    {
      "indent": 7,
      "text": "if (mode != B_PRED && mode != SPLITMV)\n{\n    i = 24;\n    stop = 24;\n    type = 1;\n    b_tokens = tokens + 24 * 16;\n    dqf = factor[TOKEN_BLOCK_Y2];\n}\nelse\n{\n    i = 0;\n    stop = 16;\n    type = 3;\n    b_tokens = tokens;\n    dqf = factor[TOKEN_BLOCK_Y1];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Save a pointer to the coefficient probs for the current type.\n * Need to repeat this whenever type changes.\n */\ntype_probs = probs[type][0][0];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "BLOCK_LOOP:\n    t = left[left_context_index[i]] + above[above_context_index[i]];\n    c = !type; /* all blocks start at 0 except type 0, which starts\n                * at 1. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "prob = type_probs;\nprob += t * ENTROPY_NODES;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "DO_WHILE:\n    prob += bands_x[c];\n    DECODE_AND_BRANCH_IF_ZERO(prob[EOB_CONTEXT_NODE],\n      BLOCK_FINISHED);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CHECK_0_:\n    DECODE_AND_LOOP_IF_ZERO(prob[ZERO_CONTEXT_NODE], CHECK_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[ONE_CONTEXT_NODE],\n                              ONE_CONTEXT_NODE_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[LOW_VAL_CONTEXT_NODE],\n                              LOW_VAL_CONTEXT_NODE_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[HIGH_LOW_CONTEXT_NODE],\n                              HIGH_LOW_CONTEXT_NODE_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[CAT_THREEFOUR_CONTEXT_NODE],\n                              CAT_THREEFOUR_CONTEXT_NODE_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[CAT_FIVE_CONTEXT_NODE],\n                              CAT_FIVE_CONTEXT_NODE_0_);\n    val = extrabits[DCT_VAL_CATEGORY6].min_val;\n    bits_count = extrabits[DCT_VAL_CATEGORY6].length;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "do\n{\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY6,\n      bits_count);\n    bits_count --;\n}\nwhile (bits_count >= 0);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "zh-CHS": "解码、签名、写入、校验、退出（val）；"
    },
    {
      "indent": 3,
      "text": "CAT_FIVE_CONTEXT_NODE_0_:\n    val = extrabits[DCT_VAL_CATEGORY5].min_val;\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY5, 4);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY5, 3);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY5, 2);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY5, 1);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY5, 0);\n    DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CAT_THREEFOUR_CONTEXT_NODE_0_:\n    DECODE_AND_BRANCH_IF_ZERO(prob[CAT_THREE_CONTEXT_NODE],\n                              CAT_THREE_CONTEXT_NODE_0_);\n    val = extrabits[DCT_VAL_CATEGORY4].min_val;\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY4, 3);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY4, 2);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY4, 1);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY4, 0);\n    DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CAT_THREE_CONTEXT_NODE_0_:\n    val = extrabits[DCT_VAL_CATEGORY3].min_val;\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY3, 2);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY3, 1);\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY3, 0);\n    DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "HIGH_LOW_CONTEXT_NODE_0_: DECODE_AND_BRANCH_IF_ZERO(prob[CAT_ONE_CONTEXT_NODE], CAT_ONE_CONTEXT_NODE_0_);",
      "zh-CHS": "高\\u低\\u上下文\\u节点\\u 0 \\u：如果\\u为零，则解码\\u和\\u分支\\u（prob[CAT\\u ONE\\u CONTEXT\\u NODE]，CAT\\u ONE\\u CONTEXT\\u节点\\u 0）；"
    },
    {
      "indent": 7,
      "text": "val = extrabits[DCT_VAL_CATEGORY2].min_val;\nDECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY2, 1);\nDECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY2, 0);\nDECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CAT_ONE_CONTEXT_NODE_0_:\n    val = extrabits[DCT_VAL_CATEGORY1].min_val;\n    DECODE_EXTRABIT_AND_ADJUST_VAL(DCT_VAL_CATEGORY1, 0);\n    DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(val);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "LOW_VAL_CONTEXT_NODE_0_:\n    DECODE_AND_BRANCH_IF_ZERO(prob[TWO_CONTEXT_NODE],\n                              TWO_CONTEXT_NODE_0_);\n    DECODE_AND_BRANCH_IF_ZERO(prob[THREE_CONTEXT_NODE],\n                              THREE_CONTEXT_NODE_0_);\n    DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(4);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "THREE_CONTEXT_NODE_0_: DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(3);",
      "zh-CHS": "三个上下文节点：解码、签名、写入、校验、退出（3）；"
    },
    {
      "indent": 3,
      "text": "TWO_CONTEXT_NODE_0_: DECODE_SIGN_WRITE_COEFF_AND_CHECK_EXIT(2);",
      "zh-CHS": "两个\\u上下文\\u节点\\u 0\\u：解码\\u签名\\u写入\\u系数\\u和\\u检查\\u退出（2）；"
    },
    {
      "indent": 3,
      "text": "ONE_CONTEXT_NODE_0_:\n    DECODE_AND_APPLYSIGN(1);\n    prob = type_probs + ENTROPY_NODES;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (c < 15)\n{\n    b_tokens[zigzag[c]] = v;\n    ++c;\n    goto DO_WHILE;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    b_tokens[zigzag[15]] = v;\nBLOCK_FINISHED:\n    eob_mask |= (c > 1) << i;\n    t = (c != !type);   // any non-zero data?\n    eob_mask |= t << 31;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "left[left_context_index[i]] = above[above_context_index[i]] = t;\nb_tokens += 16;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "i++;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (i < stop) goto BLOCK_LOOP;",
      "zh-CHS": "如果（i<stop）转到BLOCK_循环；"
    },
    {
      "indent": 7,
      "text": "if (i == 25)\n{\n    type = 0;\n    i = 0;\n    stop = 16;\n    type_probs = probs[type][0][0];\n    b_tokens = tokens;\n    dqf = factor[TOKEN_BLOCK_Y1];\n    goto BLOCK_LOOP;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (i == 16)\n{\n    type = 2;\n    type_probs = probs[type][0][0];\n    stop = 24;\n    dqf = factor[TOKEN_BLOCK_UV];\n    goto BLOCK_LOOP;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return eob_mask;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nreset_row_context(token_entropy_ctx_t *left)\n{\n    memset(left, 0, sizeof(*left));\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nreset_above_context(token_entropy_ctx_t *above, unsigned int cols)\n{\n    memset(above, 0, cols * sizeof(*above));\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void\nreset_mb_context(token_entropy_ctx_t  *left,\n                 token_entropy_ctx_t  *above,\n                 enum prediction_mode  mode)\n{\n    /* Reset the macroblock context on the left and right.  We have\n     * to preserve the context of the second order block if this mode\n     * would not have updated it.\n     */\n    memset(left, 0, sizeof((*left)[0]) * 8);\n    memset(above, 0, sizeof((*above)[0]) * 8);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if (mode != B_PRED && mode != SPLITMV)\n    {\n        (*left)[8] = 0;\n        (*above)[8] = 0;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_tokens_process_row(struct vp8_decoder_ctx *ctx,\n                             unsigned int            partition,\n                             unsigned int            row,\n                             unsigned int            start_col,\n                             unsigned int            num_cols)\n{\n    struct token_decoder *tokens = &ctx->tokens[partition];\n    short              coeffs = tokens->coeffs + 25 * 16 * start_col;\n    unsigned int       col;\n    token_entropy_ctx_t  *above = ctx->above_token_entropy_ctx\n                                  + start_col;\n    token_entropy_ctx_t  *left = &tokens->left_token_entropy_ctx;\n    struct mb_info       *mbi = ctx->mb_info_rows[row] + start_col;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (row == 0)\n    reset_above_context(above, num_cols);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (start_col == 0)\n    reset_row_context(left);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (col = start_col; col < start_col + num_cols; col++)\n{\n    memset(coeffs, 0, 25 * 16 * sizeof(short));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (mbi->base.skip_coeff)\n{\n    reset_mb_context(left, above, mbi->base.y_mode);\n    mbi->base.eob_mask = 0;\n}\nelse\n{\n    struct dequant_factors *dqf;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    dqf = ctx->dequant_factors  + mbi->base.segment_id;\n    mbi->base.eob_mask =\n        decode_mb_tokens(&tokens->bool,\n                         *left, *above,\n                         coeffs,\n                         mbi->base.y_mode,\n                         ctx->entropy_hdr.coeff_probs,\n                         dqf->factor);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        above++;\n        mbi++;\n        coeffs += 25 * 16;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_tokens_init(struct vp8_decoder_ctx *ctx)\n{\n    unsigned int  partitions = ctx->token_hdr.partitions;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (ctx->frame_hdr.frame_size_updated)\n{\n    unsigned int i;\n    unsigned int coeff_row_sz =\n        ctx->mb_cols * 25 * 16 * sizeof(short);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "for (i = 0; i < partitions; i++)\n{\n    free(ctx->tokens[i].coeffs);\n    ctx->tokens[i].coeffs = memalign(16, coeff_row_sz);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    if (!ctx->tokens[i].coeffs)\n        vpx_internal_error(&ctx->error, VPX_CODEC_MEM_ERROR,\n                           NULL);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "free(ctx->above_token_entropy_ctx);\nctx->above_token_entropy_ctx =\n    calloc(ctx->mb_cols,\n    sizeof(*ctx->above_token_entropy_ctx));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (!ctx->above_token_entropy_ctx)\n            vpx_internal_error(&ctx->error,\n            VPX_CODEC_MEM_ERROR, NULL);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void\nvp8_dixie_tokens_destroy(struct vp8_decoder_ctx *ctx)\n{\n    int i;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < MAX_PARTITIONS; i++)\n    free(ctx->tokens[i].coeffs);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    free(ctx->above_token_entropy_ctx);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.17. tokens.h",
      "section_title": true,
      "zh-CHS": "20.17. 代币"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */\n#ifndef TOKENS_H\n#define TOKENS_H",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_tokens_init(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "void vp8_dixie_令牌_init（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_tokens_destroy(struct vp8_decoder_ctx *ctx);",
      "zh-CHS": "作废vp8_dixie_令牌_销毁（结构vp8_解码器_ctx*ctx）；"
    },
    {
      "indent": 3,
      "text": "void vp8_dixie_tokens_process_row(struct vp8_decoder_ctx *ctx, unsigned int partition, unsigned int row, unsigned int start_col, unsigned int num_cols);",
      "zh-CHS": "void vp8_dixie_tokens_process_row（结构vp8_decoder_ctx*ctx，无符号整数分区，无符号整数行，无符号整数起始列，无符号整数列）；"
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.18. vp8_prob_data.h",
      "section_title": true,
      "zh-CHS": "20.18. vp8_prob_data.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const\nunsigned char k_coeff_entropy_update_probs[BLOCK_TYPES][COEFF_BANDS]\n[PREV_COEFF_CONTEXTS]\n[ENTROPY_NODES] =\n{\n    {\n        {\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        },\n        {\n            {176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n            {223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n            {249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        },\n        {\n            {255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n            {234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n            {253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        },\n        {\n            {255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n            {239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n            {254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        },\n        {\n            {255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n            {251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    {\n        {255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255},\n        {250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255},\n        {254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n},\n{\n    {\n        {217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255},\n        {234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255},\n    },\n    {\n        {255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    {\n        {255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n},\n{\n    {\n        {186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255},\n        {234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255},\n        {251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255},\n    },\n    {\n        {255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    {\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n},\n{\n    {\n        {248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255},\n        {248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255},\n        {248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255},\n    },\n    {\n        {255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255},\n        {250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        {\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n            {254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n            {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},\n        },\n    },\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const unsigned char k_default_y_mode_probs [] = { 112, 86, 140, 37};",
      "zh-CHS": "静态常量无符号字符k_default_y_mode_probs[]={112,86,140,37}；"
    },
    {
      "indent": 3,
      "text": "static const unsigned char k_default_uv_mode_probs [] = { 162, 101, 204};",
      "zh-CHS": "静态常量无符号字符k_default_uv_mode_probs[]={162101204}；"
    },
    {
      "indent": 3,
      "text": "static const\nunsigned char k_default_coeff_probs [BLOCK_TYPES][COEFF_BANDS]\n[PREV_COEFF_CONTEXTS][ENTROPY_NODES] =\n{\n    { /* block type 0 */\n        { /* coeff band 0 */\n            { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n            { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n            { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n        },\n        { /* coeff band 1 */\n            { 253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128},\n            { 189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128},\n            { 106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128}\n        },\n        { /* coeff band 2 */\n            {   1,  98, 248, 255, 236, 226, 255, 255, 128, 128, 128},\n            { 181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128},\n            {  78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128}\n        },\n        { /* coeff band 3 */\n            {   1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128},\n            { 184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128},\n            {  77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128}\n        },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    { /* coeff band 4 */\n        {   1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128},\n        { 170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128},\n        {  37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128}\n    },\n    { /* coeff band 5 */\n        {   1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128},\n        { 207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128},\n        { 102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128}\n    },\n    { /* coeff band 6 */\n        {   1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128},\n        { 177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128},\n        {  80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128}\n    },\n    { /* coeff band 7 */\n        {   1,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 246,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n    }\n},\n{ /* block type 1 */\n    { /* coeff band 0 */\n        { 198,  35, 237, 223, 193, 187, 162, 160, 145, 155,  62},\n        { 131,  45, 198, 221, 172, 176, 220, 157, 252, 221,   1},\n        {  68,  47, 146, 208, 149, 167, 221, 162, 255, 223, 128}\n    },\n    { /* coeff band 1 */\n        {   1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128},\n        { 184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128},\n        {  81,  99, 181, 242, 176, 190, 249, 202, 255, 255, 128}\n    },\n    { /* coeff band 2 */\n        {   1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128},\n        {  99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128},\n        {  23,  91, 163, 242, 170, 187, 247, 210, 255, 255, 128}\n    },\n    { /* coeff band 3 */\n        {   1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128},\n        { 109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128},\n        {  44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128}\n    },\n    { /* coeff band 4 */\n        {   1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128},\n        {  94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128},\n        {  22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128}\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    { /* coeff band 5 */\n        {   1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128},\n        { 124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128},\n        {  35,  77, 181, 251, 193, 211, 255, 205, 128, 128, 128}\n    },\n    { /* coeff band 6 */\n        {   1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128},\n        { 121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128},\n        {  45,  99, 188, 251, 195, 217, 255, 224, 128, 128, 128}\n    },\n    { /* coeff band 7 */\n        {   1,   1, 251, 255, 213, 255, 128, 128, 128, 128, 128},\n        { 203,   1, 248, 255, 255, 128, 128, 128, 128, 128, 128},\n        { 137,   1, 177, 255, 224, 255, 128, 128, 128, 128, 128}\n    }\n},\n{ /* block type 2 */\n    { /* coeff band 0 */\n        { 253,   9, 248, 251, 207, 208, 255, 192, 128, 128, 128},\n        { 175,  13, 224, 243, 193, 185, 249, 198, 255, 255, 128},\n        {  73,  17, 171, 221, 161, 179, 236, 167, 255, 234, 128}\n    },\n    { /* coeff band 1 */\n        {   1,  95, 247, 253, 212, 183, 255, 255, 128, 128, 128},\n        { 239,  90, 244, 250, 211, 209, 255, 255, 128, 128, 128},\n        { 155,  77, 195, 248, 188, 195, 255, 255, 128, 128, 128}\n    },\n    { /* coeff band 2 */\n        {   1,  24, 239, 251, 218, 219, 255, 205, 128, 128, 128},\n        { 201,  51, 219, 255, 196, 186, 128, 128, 128, 128, 128},\n        {  69,  46, 190, 239, 201, 218, 255, 228, 128, 128, 128}\n    },\n    { /* coeff band 3 */\n        {   1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128},\n        { 223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128},\n        { 141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128}\n    },\n    { /* coeff band 4 */\n        {   1,  16, 248, 255, 255, 128, 128, 128, 128, 128, 128},\n        { 190,  36, 230, 255, 236, 255, 128, 128, 128, 128, 128},\n        { 149,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n    },\n    { /* coeff band 5 */\n        {   1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    { /* coeff band 6 */\n        {   1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128},\n        { 213,  62, 250, 255, 255, 128, 128, 128, 128, 128, 128},\n        {  55,  93, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n    },\n    { /* coeff band 7 */\n        { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},\n        { 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128}\n    }\n},\n{ /* block type 3 */\n    { /* coeff band 0 */\n        { 202,  24, 213, 235, 186, 191, 220, 160, 240, 175, 255},\n        { 126,  38, 182, 232, 169, 184, 228, 174, 255, 187, 128},\n        {  61,  46, 138, 219, 151, 178, 240, 170, 255, 216, 128}\n    },\n    { /* coeff band 1 */\n        {   1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128},\n        { 166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128},\n        {  39,  77, 162, 232, 172, 180, 245, 178, 255, 255, 128}\n    },\n    { /* coeff band 2 */\n        {   1,  52, 220, 246, 198, 199, 249, 220, 255, 255, 128},\n        { 124,  74, 191, 243, 183, 193, 250, 221, 255, 255, 128},\n        {  24,  71, 130, 219, 154, 170, 243, 182, 255, 255, 128}\n    },\n    { /* coeff band 3 */\n        {   1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128},\n        { 149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128},\n        {  28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128}\n    },\n    { /* coeff band 4 */\n        {   1,  81, 230, 252, 204, 203, 255, 192, 128, 128, 128},\n        { 123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128},\n        {  20,  95, 153, 243, 164, 173, 255, 203, 128, 128, 128}\n    },\n    { /* coeff band 5 */\n        {   1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128},\n        { 168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128},\n        {  47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128}\n    },\n    { /* coeff band 6 */\n        {   1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128},\n        { 141,  84, 213, 252, 201, 202, 255, 219, 128, 128, 128},\n        {  42,  80, 160, 240, 162, 185, 255, 205, 128, 128, 128}\n    },",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        { /* coeff band 7 */\n            {   1,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n            { 244,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128},\n            { 238,   1, 255, 128, 128, 128, 128, 128, 128, 128, 128}\n        }\n    }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const\nunsigned char k_mv_entropy_update_probs[2][MV_PROB_CNT] =\n{\n    {\n        237,\n        246,\n        253, 253, 254, 254, 254, 254, 254,\n        254, 254, 254, 254, 254, 250, 250, 252, 254, 254\n    },\n    {\n        231,\n        243,\n        245, 253, 254, 254, 254, 254, 254,\n        254, 254, 254, 254, 254, 251, 251, 254, 254, 254\n    }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static const\nunsigned char k_default_mv_probs[2][MV_PROB_CNT] =\n{\n    {                                                  // row\n        162,                                           // is short\n        128,                                           // sign\n        225, 146, 172, 147, 214,  39, 156,             // short tree\n        128, 129, 132,  75, 145, 178, 206, 239, 254, 254 // long bits\n    },\n    {\n        164,\n        128,\n        204, 170, 119, 235, 140, 230, 228,\n        128, 130, 130,  74, 148, 180, 203, 236, 254, 254",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    }\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.19. vpx_codec_internal.h",
      "section_title": true,
      "zh-CHS": "20.19. vpx_编解码器_internal.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\file vpx_codec_internal.h\n * \\brief Describes the decoder algorithm interface for algorithm\n *        implementations.\n *\n * This file defines the private structures and data types that are\n * only relevant to implementing an algorithm, as opposed to using\n * it.\n *\n * To create a decoder algorithm class, an interface structure is put\n * into the global namespace:\n *     <pre>\n *     my_codec.c:\n *       vpx_codec_iface_t my_codec = {\n *           \"My Codec v1.0\",\n *           VPX_CODEC_ALG_ABI_VERSION,\n *           ...\n *       };\n *     </pre>\n *\n * An application instantiates a specific decoder instance by using\n * vpx_codec_init() and a pointer to the algorithm's interface\n * structure:\n *     <pre>\n *     my_app.c:\n *       extern vpx_codec_iface_t my_codec;\n *       {\n *           vpx_codec_ctx_t algo;\n *           res = vpx_codec_init(&algo, &my_codec);\n *       }\n *     </pre>\n *",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": " * Once initialized, the instance is managed using other functions\n * from the vpx_codec_* family.\n */\n#ifndef VPX_CODEC_INTERNAL_H\n#define VPX_CODEC_INTERNAL_H\n#include \"vpx_decoder.h\"\n#include <stdarg.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief Current ABI version number\n *\n * \\internal\n * If this file is altered in any way that changes the Application\n * Binary Interface (ABI), this value must be bumped.  Examples\n * include, but are not limited to, changing types, removing or\n * reassigning enums, adding/removing/rearranging fields to\n * structures.\n */\n#define VPX_CODEC_INTERNAL_ABI_VERSION (3)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef struct vpx_codec_alg_priv vpx_codec_alg_priv_t;",
      "zh-CHS": "typedef struct vpx_codec_alg_priv vpx_codec_alg_priv；"
    },
    {
      "indent": 3,
      "text": "/*!\\brief init function pointer prototype\n *\n * Performs algorithm-specific initialization of the decoder context.\n * This function is called by the generic vpx_codec_init() wrapper\n * function, so plugins implementing this interface may trust the\n * input parameters to be properly initialized.\n *\n * \\param[in] ctx   Pointer to this instance's context\n * \\retval #VPX_CODEC_OK\n *     The input stream was recognized and decoder initialized.\n * \\retval #VPX_CODEC_MEM_ERROR\n *     Memory operation failed.\n */\ntypedef vpx_codec_err_t (*vpx_codec_init_fn_t)(vpx_codec_ctx_t *ctx);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief destroy function pointer prototype\n *\n * Performs algorithm-specific destruction of the decoder context.\n * This function is called by the generic vpx_codec_destroy() wrapper\n * function, so plugins implementing this interface may trust the\n * input parameters to be properly initialized.\n *\n * \\param[in] ctx   Pointer to this instance's context\n * \\retval #VPX_CODEC_OK\n *     The input stream was recognized and decoder initialized.\n * \\retval #VPX_CODEC_MEM_ERROR\n *     Memory operation failed.\n */\ntypedef vpx_codec_err_t (*vpx_codec_destroy_fn_t)(\n    vpx_codec_alg_priv_t *ctx);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief parse stream info function pointer prototype\n *\n * Performs high level parsing of the bitstream.  This function is\n * called by the generic vpx_codec_parse_stream() wrapper function,\n * so plugins implementing this interface may trust the input\n * parameters to be properly initialized.\n *\n * \\param[in]      data    Pointer to a block of data to parse\n * \\param[in]      data_sz Size of the data buffer\n * \\param[in,out]  si      Pointer to stream info to update.  The\n *                         size member \\ref MUST be properly\n *                         initialized, but \\ref MAY be clobbered by\n *                         the algorithm.  This parameter \\ref MAY\n *                         be NULL.\n *\n * \\retval #VPX_CODEC_OK\n *     Bitstream is parsable and stream information updated\n */\ntypedef vpx_codec_err_t (*vpx_codec_peek_si_fn_t)(\n    const uint8_t         *data,\n    unsigned int           data_sz,\n    vpx_codec_stream_info_t *si);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief Return information about the current stream.\n *\n * Returns information about the stream that has been parsed during\n * decoding.\n *\n * \\param[in]      ctx     Pointer to this instance's context\n * \\param[in,out]  si      Pointer to stream info to update.  The\n *                         size member \\ref MUST be properly\n *                         initialized, but \\ref MAY be clobbered by\n *                         the algorithm.  This parameter \\ref MAY\n *                         be NULL.\n *\n * \\retval #VPX_CODEC_OK\n *     Bitstream is parsable and stream information updated\n */\ntypedef vpx_codec_err_t (*vpx_codec_get_si_fn_t)(\n    vpx_codec_alg_priv_t    *ctx,\n    vpx_codec_stream_info_t *si);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief control function pointer prototype\n *\n * This function is used to exchange algorithm-specific data with the\n * decoder instance.  This can be used to implement features specific\n * to a particular algorithm.\n *\n * This function is called by the generic vpx_codec_control() wrapper\n * function, so plugins implementing this interface may trust the\n * input parameters to be properly initialized.  However, this\n * interface does not provide type safety for the exchanged data or\n * assign meanings to the control codes.  Those details should be\n * specified in the algorithm's header file.  In particular, the\n * ctrl_id parameter is guaranteed to exist in the algorithm's\n * control mapping table, and the data parameter may be NULL.\n *\n *\n * \\param[in]     ctx       Pointer to this instance's context\n * \\param[in]     ctrl_id   Algorithm-specific control identifier\n * \\param[in,out] data      Data to exchange with algorithm instance.\n *\n * \\retval #VPX_CODEC_OK\n *     The internal state data was deserialized.\n */\ntypedef vpx_codec_err_t (*vpx_codec_control_fn_t)(\n    vpx_codec_alg_priv_t  *ctx,\n    int                   ctrl_id,\n    va_list               ap);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief control function pointer mapping\n *\n * This structure stores the mapping between control identifiers and\n * implementing functions.  Each algorithm provides a list of these\n * mappings.  This list is searched by the vpx_codec_control()\n * wrapper function to determine which function to invoke.  The\n * special value {0, NULL} is used to indicate end-of-list, and must\n * be present.  The special value {0, <non-null>} can be used as a\n * catch-all mapping.  This implies that ctrl_id values chosen by the\n * algorithm \\ref MUST be non-zero.\n */\ntypedef const struct\n{\n    int                    ctrl_id;\n    vpx_codec_control_fn_t   fn;\n} vpx_codec_ctrl_fn_map_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief decode data function pointer prototype\n *\n * Processes a buffer of coded data.  If the processing results in a\n * new decoded frame becoming available, #VPX_CODEC_CB_PUT_SLICE and\n * #VPX_CODEC_CB_PUT_FRAME events are generated as appropriate.\n * This function is called by the generic vpx_codec_decode() wrapper\n * function, so plugins implementing this interface may trust the\n * input parameters to be properly initialized.\n *\n * \\param[in] ctx         Pointer to this instance's context\n * \\param[in] data        Pointer to this block of new coded data.\n *                        If NULL, a #VPX_CODEC_CB_PUT_FRAME event is\n *                        posted for the previously decoded frame.\n * \\param[in] data_sz     Size of the coded data, in bytes.\n *\n * \\return Returns #VPX_CODEC_OK if the coded data was processed\n *         completely and future pictures can be decoded without\n *         error.  Otherwise, see the descriptions of the other error\n *         codes in ::vpx_codec_err_t for recoverability\n *         capabilities.\n */\ntypedef vpx_codec_err_t (*vpx_codec_decode_fn_t)(\n    vpx_codec_alg_priv_t  *ctx,\n    const uint8_t         *data,\n    unsigned int     data_sz,\n    void        *user_priv,\n    long         deadline);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief Decoded frames iterator\n *\n * Iterates over a list of the frames available for display.  The\n * iterator storage should be initialized to NULL to start the\n * iteration.  Iteration is complete when this function returns NULL.\n *\n * The list of available frames becomes valid upon completion of the\n * vpx_codec_decode call, and remains valid until the next call to\n * vpx_codec_decode.\n *\n * \\param[in]     ctx      Pointer to this instance's context\n * \\param[in out] iter     Iterator storage, initialized to NULL\n *\n * \\return Returns a pointer to an image, if one is ready for\n *         display.  Frames produced will always be in PTS\n *         (presentation time stamp) order.\n */\ntypedef vpx_image_t*(*vpx_codec_get_frame_fn_t)(\n    vpx_codec_alg_priv_t *ctx,\n    vpx_codec_iter_t     *iter);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\\brief External Memory Allocation memory map get iterator\n *\n * Iterates over a list of the memory maps requested by the decoder.\n * The iterator storage should be initialized to NULL to start the\n * iteration.  Iteration is complete when this function returns NULL.\n *\n * \\param[in out] iter     Iterator storage, initialized to NULL\n *\n * \\return Returns a pointer to a memory segment descriptor, or NULL\n *         to indicate end-of-list.\n */\ntypedef vpx_codec_err_t (*vpx_codec_get_mmap_fn_t)(\n    const vpx_codec_ctx_t      *ctx,\n    vpx_codec_mmap_t           *mmap,\n    vpx_codec_iter_t           *iter);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\\brief External Memory Allocation memory map set iterator\n *\n * Sets a memory descriptor inside the decoder instance.\n *\n * \\param[in] ctx      Pointer to this instance's context\n * \\param[in] mmap     Memory map to store.\n *\n * \\retval #VPX_CODEC_OK\n *     The memory map was accepted and stored.\n * \\retval #VPX_CODEC_MEM_ERROR\n *     The memory map was rejected.\n */\ntypedef vpx_codec_err_t (*vpx_codec_set_mmap_fn_t)(\n    vpx_codec_ctx_t         *ctx,\n    const vpx_codec_mmap_t  *mmap);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef vpx_codec_err_t (*vpx_codec_encode_fn_t)(\n    vpx_codec_alg_priv_t  *ctx,\n    const vpx_image_t     *img,\n    vpx_codec_pts_t        pts,\n    unsigned long          duration,\n    vpx_enc_frame_flags_t  flags,\n    unsigned long          deadline);\ntypedef const vpx_codec_cx_pkt_t*(*vpx_codec_get_cx_data_fn_t)(\n    vpx_codec_alg_priv_t *ctx,\n    vpx_codec_iter_t     *iter);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef vpx_codec_err_t\n(*vpx_codec_enc_config_set_fn_t)(\n    vpx_codec_alg_priv_t       *ctx,\n    const vpx_codec_enc_cfg_t  *cfg);\ntypedef vpx_fixed_buf_t *\n(*vpx_codec_get_global_headers_fn_t)(vpx_codec_alg_priv_t   *ctx);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "typedef vpx_image_t *\n(*vpx_codec_get_preview_frame_fn_t)(vpx_codec_alg_priv_t   *ctx);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief usage configuration mapping\n *\n * This structure stores the mapping between usage identifiers and\n * configuration structures.  Each algorithm provides a list of these\n * mappings.  This list is searched by the\n * vpx_codec_enc_config_default() wrapper function to determine which",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": " * config to return.  The special value {-1, {0}} is used to indicate\n * end-of-list, and must be present.  At least one mapping must be\n * present, in addition to the end-of-list.\n *\n */\ntypedef const struct\n{\n    int                 usage;\n    vpx_codec_enc_cfg_t cfg;\n} vpx_codec_enc_cfg_map_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define NOT_IMPLEMENTED 0",
      "zh-CHS": "#定义未实现0"
    },
    {
      "indent": 3,
      "text": "/*!\\brief Decoder algorithm interface\n *\n * All decoders \\ref MUST expose a variable of this type.\n */\nstruct vpx_codec_iface\n{\n    const char               *name;\n    int                       abi_version;\n    vpx_codec_caps_t          caps;\n    vpx_codec_init_fn_t       init;\n    vpx_codec_destroy_fn_t    destroy;\n    vpx_codec_ctrl_fn_map_t  *ctrl_maps;\n    vpx_codec_get_mmap_fn_t   get_mmap;\n    vpx_codec_set_mmap_fn_t   set_mmap;\n    struct\n    {\n        vpx_codec_peek_si_fn_t    peek_si;\n        vpx_codec_get_si_fn_t     get_si;\n        vpx_codec_decode_fn_t     decode;\n        vpx_codec_get_frame_fn_t  get_frame;\n    } dec;\n    struct\n    {\n        vpx_codec_enc_cfg_map_t           *cfg_maps;\n        vpx_codec_encode_fn_t              encode;\n        vpx_codec_get_cx_data_fn_t         get_cx_data;\n        vpx_codec_enc_config_set_fn_t      cfg_set;\n        vpx_codec_get_global_headers_fn_t  get_glob_hdrs;\n        vpx_codec_get_preview_frame_fn_t   get_preview;\n    } enc;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief Callback function pointer / user data pair storage */\ntypedef struct vpx_codec_priv_cb_pair\n{\n    union\n    {\n        vpx_codec_put_frame_cb_fn_t    put_frame;\n        vpx_codec_put_slice_cb_fn_t    put_slice;\n    };\n    void                            *user_priv;\n} vpx_codec_priv_cb_pair_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\brief Instance private storage\n *\n * This structure is allocated by the algorithm's init function.  It\n * can be extended in one of two ways.  First, a second, algorithm\n * specific structure can be allocated and the priv member pointed to\n * it.  Alternatively, this structure can be made the first member of\n * the algorithm-specific structure, and the pointer casted to the\n * proper type.\n */\nstruct vpx_codec_priv\n{\n    unsigned int                    sz;\n    vpx_codec_iface_t              *iface;\n    struct vpx_codec_alg_priv      *alg_priv;\n    const char                     *err_detail;\n    vpx_codec_flags_t               init_flags;\n    struct\n    {\n        vpx_codec_priv_cb_pair_t    put_frame_cb;\n        vpx_codec_priv_cb_pair_t    put_slice_cb;\n    } dec;\n    struct\n    {\n        struct vpx_fixed_buf        cx_data_dst_buf;\n        unsigned int                cx_data_pad_before;\n        unsigned int                cx_data_pad_after;\n        vpx_codec_cx_pkt_t          cx_data_pkt;\n    } enc;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#undef VPX_CTRL_USE_TYPE\n#define VPX_CTRL_USE_TYPE(id, typ) \\\n    static typ id##__value(va_list args) \\\n    {return va_arg(args, typ);} \\\n    static typ id##__convert(void *x)\\\n    {\\",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    union\\\n    {\\\n        void *x;\\\n        typ   d;\\\n    } u;\\\n    u.x = x;\\\n    return u.d;\\\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#undef VPX_CTRL_USE_TYPE_DEPRECATED\n#define VPX_CTRL_USE_TYPE_DEPRECATED(id, typ) \\\n    static typ id##__value(va_list args) \\\n    {return va_arg(args, typ);} \\\n    static typ id##__convert(void *x)\\\n    {\\\n        union\\\n        {\\\n            void *x;\\\n            typ   d;\\\n        } u;\\\n        u.x = x;\\\n        return u.d;\\\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define CAST(id, arg) id##__value(arg)\n#define RECAST(id, x) id##__convert(x)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/* Internal Utility Functions\n *\n * The following functions are intended to be used inside algorithms\n * as utilities for manipulating vpx_codec_* data structures.\n */\nstruct vpx_codec_pkt_list\n{\n    unsigned int            cnt;\n    unsigned int            max;\n    struct vpx_codec_cx_pkt pkts[1];\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define vpx_codec_pkt_list_decl(n)\\\n    union {struct vpx_codec_pkt_list head;\\\n        struct {struct vpx_codec_pkt_list head;\\\n            struct vpx_codec_cx_pkt    pkts[n];} alloc;}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define vpx_codec_pkt_list_init(m)\\\n    (m)->alloc.head.cnt = 0,\\\n    (m)->alloc.head.max = \\\n    sizeof((m)->alloc.pkts) / sizeof((m)->alloc.pkts[0])",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int vpx_codec_pkt_list_add(struct vpx_codec_pkt_list *, const struct vpx_codec_cx_pkt *);",
      "zh-CHS": "int vpx_编解码器_pkt_列表_添加（结构vpx_编解码器_pkt_列表*，常量结构vpx_编解码器_cx_pkt*）；"
    },
    {
      "indent": 3,
      "text": "const vpx_codec_cx_pkt_t*\nvpx_codec_pkt_list_get(struct vpx_codec_pkt_list *list,\n                       vpx_codec_iter_t           *iter);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#include <stdio.h>\n#include <setjmp.h>\nstruct vpx_internal_error_info\n{\n    vpx_codec_err_t  error_code;\n    int              has_detail;\n    char             detail[80];\n    int              setjmp;\n    jmp_buf          jmp;\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static void vpx_internal_error(struct vpx_internal_error_info *info,\n                               vpx_codec_err_t                 error,\n                               const char                     *fmt,\n                               ...)\n{\n    va_list ap;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "info->error_code = error;\ninfo->has_detail = 0;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (fmt)\n{\n    size_t  sz = sizeof(info->detail);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    info->has_detail = 1;\n    va_start(ap, fmt);\n    vsnprintf(info->detail, sz - 1, fmt, ap);\n    va_end(ap);\n    info->detail[sz-1] = '\\0';\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    if (info->setjmp)\n        longjmp(info->jmp, info->error_code);\n}\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.20. vpx_decoder.h",
      "section_title": true,
      "zh-CHS": "20.20. vpx_解码器.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\defgroup decoder Decoder Algorithm Interface\n * \\ingroup codec\n * This abstraction allows applications using this decoder to easily\n * support multiple video formats with minimal code duplication.\n * This section describes the interface common to all decoders.\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\file vpx_decoder.h\n * \\brief Describes the decoder algorithm interface to applications.\n *\n * This file describes the interface between an application and a\n * video decoder algorithm.\n *\n */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n#ifndef VPX_DECODER_H\n#define VPX_DECODER_H\n#include \"vpx_codec.h\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Current ABI version number\n     *\n     * \\internal\n     * If this file is altered in any way that changes the ABI, this\n     * value must be bumped.  Examples include, but are not limited\n     * to, changing types, removing or reassigning enums,\n     * adding/removing/rearranging fields to structures\n     */\n#define VPX_DECODER_ABI_VERSION (2 + VPX_CODEC_ABI_VERSION)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*! \\brief Decoder capabilities bitfield\n     *\n     *  Each decoder advertises the capabilities it supports as part\n     *  of its ::vpx_codec_iface_t interface structure.  Capabilities\n     *  are extra interfaces or functionality, and are not required\n     *  to be supported by a decoder.\n     *\n     *  The available flags are specified by VPX_CODEC_CAP_* defines.\n     */\n#define VPX_CODEC_CAP_PUT_SLICE  0x10000 /**< Will issue put_slice\n    callbacks */\n#define VPX_CODEC_CAP_PUT_FRAME  0x20000 /**< Will issue put_frame\n    callbacks */\n#define VPX_CODEC_CAP_POSTPROC   0x40000 /**< Can postprocess decoded\n    frame */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*! \\brief Initialization-time Feature Enabling\n     *\n     *  Certain codec features must be known at initialization time,\n     *  to allow for proper memory allocation.\n     *\n     *  The available flags are specified by VPX_CODEC_USE_* defines.\n     */\n#define VPX_CODEC_USE_POSTPROC   0x10000 /**< Postprocess decoded\n    frame */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Stream properties\n *\n * This structure is used to query or set properties of the\n * decoded stream.  Algorithms may extend this structure with\n * data specific to their bitstream by setting the sz member\n * appropriately.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "typedef struct vpx_codec_stream_info\n{\n    unsigned int sz;    /**< Size of this structure */\n    unsigned int w;     /**< Width (or 0 for unknown/default) */\n    unsigned int h;     /**< Height (or 0 for unknown/default) */\n    unsigned int is_kf; /**< Current frame is a keyframe */\n} vpx_codec_stream_info_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* REQUIRED FUNCTIONS\n *\n * The following functions are required to be implemented for all\n * decoders.  They represent the base case functionality expected\n * of all decoders.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Initialization Configurations\n *\n * This structure is used to pass init time configuration options\n * to the decoder.\n */\ntypedef struct vpx_codec_dec_cfg\n{\n    unsigned int threads; /**< Maximum number of threads to use,\n        default 1 */\n    unsigned int w;      /**< Width */\n    unsigned int h;      /**< Height */\n} vpx_codec_dec_cfg_t; /**< alias for struct vpx_codec_dec_cfg */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Initialize a decoder instance\n *\n * Initializes a decoder context using the given interface.\n * Applications should call the vpx_codec_dec_init convenience\n * macro instead of this function directly, to ensure that the\n * ABI version number parameter is properly initialized.\n *\n * In XMA mode (activated by setting VPX_CODEC_USE_XMA in the\n * flags parameter), the storage pointed to by the cfg parameter\n * must be kept readable and stable until all memory maps have\n * been set.\n *\n * \\param[in]    ctx     Pointer to this instance's context.\n * \\param[in]    iface   Pointer to the algorithm interface to\n *                       use.\n * \\param[in]    cfg     Configuration to use, if known.  May be\n *                       NULL.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " * \\param[in]    flags   Bitfield of VPX_CODEC_USE_* flags\n * \\param[in]    ver     ABI version number.  Must be set to\n *                       VPX_DECODER_ABI_VERSION\n * \\retval #VPX_CODEC_OK\n *     The decoder algorithm initialized.\n * \\retval #VPX_CODEC_MEM_ERROR\n *     Memory allocation failed.\n */\nvpx_codec_err_t vpx_codec_dec_init_ver(\n    vpx_codec_ctx_t      *ctx,\n    vpx_codec_iface_t    *iface,\n    vpx_codec_dec_cfg_t  *cfg,\n    vpx_codec_flags_t     flags,\n    int                   ver);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Convenience macro for vpx_codec_dec_init_ver()\n     *\n     * Ensures the ABI version parameter is properly set.\n     */\n#define vpx_codec_dec_init(ctx, iface, cfg, flags) \\\n    vpx_codec_dec_init_ver(ctx, iface, cfg, flags, \\\n    VPX_DECODER_ABI_VERSION)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Parse stream info from a buffer\n *\n * Performs high level parsing of the bitstream.  Construction of\n * a decoder context is not necessary.  Can be used to determine\n * if the bitstream is of the proper format, and to extract\n * information from the stream.\n *\n * \\param[in]      iface   Pointer to the algorithm interface\n * \\param[in]      data    Pointer to a block of data to parse\n * \\param[in]      data_sz Size of the data buffer\n * \\param[in,out]  si      Pointer to stream info to update.  The\n *                         size member\n *                         \\ref MUST be properly initialized, but\n *                         \\ref MAY be clobbered by the\n *                         algorithm.  This parameter \\ref MAY be\n *                         NULL.\n *\n * \\retval #VPX_CODEC_OK\n *     Bitstream is parsable and stream information updated\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "vpx_codec_err_t vpx_codec_peek_stream_info( vpx_codec_iface_t *iface, const uint8_t *data, unsigned int data_sz, vpx_codec_stream_info_t *si);",
      "zh-CHS": "vpx_编解码器_err_t vpx_编解码器_peek_stream_信息（vpx_编解码器_iface_t*iface、const uint8_t*数据、无符号整数数据_sz、vpx_编解码器_stream_信息_t*si）；"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Return information about the current stream.\n *\n * Returns information about the stream that has been parsed\n * during decoding.\n *\n * \\param[in]      ctx     Pointer to this instance's context\n * \\param[in,out]  si      Pointer to stream info to update.  The\n *                         size member \\ref MUST be properly\n *                         initialized, but \\ref MAY be clobbered\n *                         by the algorithm.  This parameter \\ref\n *                         MAY be NULL.\n *\n * \\retval #VPX_CODEC_OK\n *     Bitstream is parsable and stream information updated\n */\nvpx_codec_err_t vpx_codec_get_stream_info(\n    vpx_codec_ctx_t         *ctx,\n    vpx_codec_stream_info_t *si);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decode data\n *\n * Processes a buffer of coded data.  If the processing results\n * in a new decoded frame becoming available, PUT_SLICE and\n * PUT_FRAME events may be generated, as appropriate.  Encoded\n * data \\ref MUST be passed in DTS (decode time stamp) order.\n * Frames produced will always be in PTS (presentation time\n * stamp) order.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] data         Pointer to this block of new coded\n *                         data.  If NULL, a\n *                         VPX_CODEC_CB_PUT_FRAME event is posted\n *                         for the previously decoded frame.\n * \\param[in] data_sz      Size of the coded data, in bytes.\n * \\param[in] user_priv    Application-specific data to associate\n *                         with this frame.\n * \\param[in] deadline     Soft deadline the decoder should\n *                         attempt to meet, in us.  Set to zero\n *                         for unlimited.\n *",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " * \\return Returns #VPX_CODEC_OK if the coded data was processed\n *         completely and future pictures can be decoded without\n *         error.  Otherwise, see the descriptions of the other\n *         error codes in ::vpx_codec_err_t for recoverability\n *         capabilities.\n */\nvpx_codec_err_t vpx_codec_decode(vpx_codec_ctx_t    *ctx,\n                                 const uint8_t        *data,\n                                 unsigned int            data_sz,\n                                 void               *user_priv,\n                                 long                deadline);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decoded frames iterator\n *\n * Iterates over a list of the frames available for display.  The\n * iterator storage should be initialized to NULL to start the\n * iteration.  Iteration is complete when this function returns\n * NULL.\n *\n * The list of available frames becomes valid upon completion of\n * the vpx_codec_decode call, and remains valid until the next\n * call to vpx_codec_decode.\n *\n * \\param[in]     ctx      Pointer to this instance's context\n * \\param[in,out] iter     Iterator storage, initialized to NULL\n *\n * \\return Returns a pointer to an image, if one is ready for\n *         display.  Frames produced will always be in PTS\n *         (presentation time stamp) order.\n */\nvpx_image_t *vpx_codec_get_frame(vpx_codec_ctx_t  *ctx,\n                                 vpx_codec_iter_t *iter);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\defgroup cap_put_frame Frame-Based Decoding Functions\n *\n * The following functions are required to be implemented for all\n * decoders that advertise the VPX_CODEC_CAP_PUT_FRAME\n * capability.  Calling these functions for codecs that don't\n * advertise this capability will result in an error code being\n * returned, usually VPX_CODEC_ERROR\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief put frame callback prototype\n *\n * This callback is invoked by the decoder to notify the\n * application of the availability of decoded image data.\n */\ntypedef void (*vpx_codec_put_frame_cb_fn_t)(\n    void        *user_priv,\n    const vpx_image_t *img);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Register for notification of frame completion.\n *\n * Registers a given function to be called when a decoded frame\n * is available.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] cb           Pointer to the callback function\n * \\param[in] user_priv    User's private data\n *\n * \\retval #VPX_CODEC_OK\n *     Callback successfully registered.\n * \\retval #VPX_CODEC_ERROR\n *     Decoder context not initialized, or algorithm not capable\n *     of posting slice completion.\n */\nvpx_codec_err_t vpx_codec_register_put_frame_cb(\n    vpx_codec_ctx_t             *ctx,\n    vpx_codec_put_frame_cb_fn_t  cb,\n    void                        *user_priv);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup cap_put_frame */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\defgroup cap_put_slice Slice-Based Decoding Functions\n *\n * The following functions are required to be implemented for all\n * decoders that advertise the VPX_CODEC_CAP_PUT_SLICE\n * capability.  Calling these functions for codecs that don't\n * advertise this capability will result in an error code being\n * returned, usually VPX_CODEC_ERROR\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief put slice callback prototype\n *\n * This callback is invoked by the decoder to notify the\n * application of the availability of partially decoded image\n * data.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "typedef void (*vpx_codec_put_slice_cb_fn_t)(\n    void         *user_priv,\n    const vpx_image_t      *img,\n    const vpx_image_rect_t *valid,\n    const vpx_image_rect_t *update);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Register for notification of slice completion.\n *\n * Registers a given function to be called when a decoded slice\n * is available.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] cb           Pointer to the callback function\n * \\param[in] user_priv    User's private data\n *\n * \\retval #VPX_CODEC_OK\n *     Callback successfully registered.\n * \\retval #VPX_CODEC_ERROR\n *     Decoder context not initialized, or algorithm not capable\n *     of posting slice completion.\n */\nvpx_codec_err_t vpx_codec_register_put_slice_cb(\n    vpx_codec_ctx_t             *ctx,\n    vpx_codec_put_slice_cb_fn_t  cb,\n    void                        *user_priv);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup cap_put_slice*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup decoder*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "#ifdef __cplusplus\n}\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if !defined(VPX_CODEC_DISABLE_COMPAT) || !VPX_CODEC_DISABLE_COMPAT\n#include \"vpx_decoder_compat.h\"\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.21. vpx_decoder_compat.h",
      "section_title": true,
      "zh-CHS": "20.21. vpx_解码器_compat.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n * Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n * Use of this source code is governed by a BSD-style license\n * that can be found in the LICENSE file in the root of the source\n * tree.  An additional intellectual property rights grant can be\n * found in the file PATENTS.  All contributing project authors may\n * be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\defgroup decoder Common Decoder Algorithm Interface\n * This abstraction allows applications using this decoder to easily\n * support multiple video formats with minimal code duplication.\n * This section describes the interface common to all codecs.\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\file\n * \\brief Provides a compatibility layer between version 1 and 2 of\n * this API.\n *\n * This interface has been deprecated.  Only existing code should\n * make use of this interface, and therefore, it is only thinly\n * documented.  Existing code should be ported to the vpx_codec_*\n * API.\n */\n#ifdef __cplusplus\nextern \"C\" {\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifndef VPX_DECODER_COMPAT_H #define VPX_DECODER_COMPAT_H",
      "zh-CHS": "#ifndef VPX_解码器兼容#定义VPX_解码器兼容#"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decoder algorithm return codes */\ntypedef enum {\n    /*!\\brief Operation completed without error */\n    VPX_DEC_OK = VPX_CODEC_OK,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief Unspecified error */\nVPX_DEC_ERROR = VPX_CODEC_ERROR,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief Memory operation failed */\nVPX_DEC_MEM_ERROR = VPX_CODEC_MEM_ERROR,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief ABI version mismatch */\nVPX_DEC_ABI_MISMATCH = VPX_CODEC_ABI_MISMATCH,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief The given bitstream is not supported.\n *\n * The bitstream was unable to be parsed at the highest\n * level.  The decoder is unable to proceed.  This error \\ref\n * SHOULD be treated as fatal to the stream.\n */\nVPX_DEC_UNSUP_BITSTREAM = VPX_CODEC_UNSUP_BITSTREAM,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief Encoded bitstream uses an unsupported feature\n *\n * The decoder does not implement a feature required by the\n * encoder.  This return code should only be used for\n * features that prevent future pictures from being properly\n * decoded.  This error \\ref MAY be treated as fatal to the\n * stream or \\ref MAY be treated as fatal to the current\n * Group of Pictures (GOP).\n */\nVPX_DEC_UNSUP_FEATURE = VPX_CODEC_UNSUP_FEATURE,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief The coded data for this stream is corrupt or\n * incomplete\n *\n * There was a problem decoding the current frame.  This\n * return code should only be used for failures that prevent\n * future pictures from being properly decoded.  This error\n * \\ref MAY be treated as fatal to the stream or \\ref MAY be\n * treated as fatal to the current GOP.  If decoding is\n * continued for the current GOP, artifacts may be present.\n */\nVPX_DEC_CORRUPT_FRAME = VPX_CODEC_CORRUPT_FRAME,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief An application-supplied parameter is not valid.\n *\n */\nVPX_DEC_INVALID_PARAM = VPX_CODEC_INVALID_PARAM,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/*!\\brief An iterator reached the end of list.\n *\n */\nVPX_DEC_LIST_END = VPX_CODEC_LIST_END",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "}\nvpx_dec_err_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*! \\brief Decoder capabilities bitfield\n     *\n     *  Each decoder advertises the capabilities it supports as part\n     *  of its ::vpx_dec_iface_t interface structure.  Capabilities\n     *  are extra interfaces or functionality, and are not required\n     *  to be supported by a decoder.\n     *\n     *  The available flags are specified by VPX_DEC_CAP_* defines.\n     */\n    typedef int vpx_dec_caps_t;\n#define VPX_DEC_CAP_PUT_SLICE  0x0001 /**< Will issue put_slice\n                                         callbacks */\n#define VPX_DEC_CAP_PUT_FRAME  0x0002 /**< Will issue put_frame\n                                         callbacks */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define VPX_DEC_CAP_XMA        0x0004 /**< Supports External Memory\n                                         Allocation */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Stream properties\n     *\n     * This structure is used to query or set properties of the\n     * decoded stream.  Algorithms may extend this structure with\n     * data specific to their bitstream by setting the sz member\n     * appropriately.\n     */\n#if 1\n    typedef vpx_codec_stream_info_t vpx_dec_stream_info_t;\n#else\n    typedef struct\n    {\n        unsigned int sz;    /**< Size of this structure */\n        unsigned int w;     /**< Width (or 0 for unknown/default) */\n        unsigned int h;     /**< Height (or 0 for unknown/default) */\n        unsigned int is_kf; /**< Current frame is a keyframe */\n    } vpx_dec_stream_info_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decoder interface structure.\n *\n * Contains function pointers and other data private to the\n * decoder implementation.  This structure is opaque to the\n * application.\n */\ntypedef const struct vpx_codec_iface vpx_dec_iface_t;\ntypedef       struct vpx_codec_priv  vpx_dec_priv_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Iterator\n *\n * Opaque storage used for iterating over lists.\n */\ntypedef vpx_codec_iter_t vpx_dec_iter_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Decoder context structure\n     *\n     * All decoders \\ref MUST support this context structure fully.\n     * In general, this data should be considered private to the\n     * decoder algorithm, and not be manipulated or examined by the\n     * calling application.  Applications may reference the 'name'\n     * member to get a printable description of the algorithm.\n     */\n#if 1\n    typedef vpx_codec_ctx_t vpx_dec_ctx_t;\n#else\n    typedef struct\n    {\n        const char          *name;  /**< Printable interface name */\n        vpx_dec_iface_t     *iface; /**< Interface pointers */\n        vpx_dec_err_t        err;   /**< Last returned error */\n        vpx_dec_priv_t      *priv;  /**< Algorithm private storage */\n    } vpx_dec_ctx_t;\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Return the build configuration\n *\n * Returns a printable string containing an encoded version of\n * the build configuration.  This may be useful to vpx support.\n *\n */\nconst char *vpx_dec_build_config(void) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Return the name for a given interface\n *\n * Returns a human readable string for name of the given decoder\n * interface.\n *\n * \\param[in]    iface     Interface pointer\n *\n */\nconst char *vpx_dec_iface_name(\n    vpx_dec_iface_t *iface) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Convert error number to printable string\n *\n * Returns a human readable string for the last error returned\n * by the algorithm.  The returned error will be one line and\n * will not contain any newline characters.\n *\n *\n * \\param[in]    err     Error number.\n *\n */\nconst char *vpx_dec_err_to_string(vpx_dec_err_t  err) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Retrieve error synopsis for decoder context\n *\n * Returns a human readable string for the last error returned by\n * the algorithm.  The returned error will be one line and will\n * not contain any newline characters.\n *\n *\n * \\param[in]    ctx     Pointer to this instance's context.\n *\n */\nconst char *vpx_dec_error(vpx_dec_ctx_t  *ctx) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Retrieve detailed error information for decoder context\n *\n * Returns a human readable string providing detailed information\n * about the last error.\n *\n * \\param[in]    ctx     Pointer to this instance's context.\n *",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " * \\retval NULL\n *     No detailed information is available.\n */\nconst char *vpx_dec_error_detail(vpx_dec_ctx_t  *ctx) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* REQUIRED FUNCTIONS\n *\n * The following functions are required to be implemented for all\n * decoders.  They represent the base case functionality expected\n * of all decoders.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Initialize a decoder instance\n *\n * Initializes a decoder context using the given interface.\n * Applications should call the vpx_dec_init convenience macro\n * instead of this function directly, to ensure that the ABI\n * version number parameter is properly initialized.\n *\n * \\param[in]   ctx    Pointer to this instance's context.\n * \\param[in]   iface  Pointer to the algorithm interface to use.\n * \\param[in]   ver    ABI version number.  Must be set to\n *                       VPX_DECODER_ABI_VERSION\n * \\retval #VPX_DEC_OK\n *     The decoder algorithm initialized.\n * \\retval #VPX_DEC_MEM_ERROR\n *     Memory allocation failed.\n */\nvpx_dec_err_t vpx_dec_init_ver(\n    vpx_dec_ctx_t    *ctx,\n    vpx_dec_iface_t  *iface,\n    int               ver) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define vpx_dec_init(ctx, iface) \\ vpx_dec_init_ver(ctx, iface, VPX_DECODER_ABI_VERSION)",
      "zh-CHS": "#定义vpx_dec_init（ctx，iface）\\vpx_dec_init版本（ctx，iface，vpx_解码器ABI_版本）"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Destroy a decoder instance\n *\n * Destroys a decoder context, freeing any associated memory\n * buffers.\n *\n * \\param[in] ctx   Pointer to this instance's context\n *\n * \\retval #VPX_DEC_OK\n *     The decoder algorithm initialized.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " * \\retval #VPX_DEC_MEM_ERROR\n *     Memory allocation failed.\n */\nvpx_dec_err_t vpx_dec_destroy(vpx_dec_ctx_t *ctx) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Get the capabilities of an algorithm.\n *\n * Retrieves the capabilities bitfield from the algorithm's\n * interface.\n *\n * \\param[in] iface   Pointer to the algorithm interface\n *\n */\nvpx_dec_caps_t vpx_dec_get_caps(\n    vpx_dec_iface_t *iface) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Parse stream info from a buffer\n *\n * Performs high level parsing of the bitstream.  Construction of\n * a decoder context is not necessary.  Can be used to determine\n * if the bitstream is of the proper format, and to extract\n * information from the stream.\n *\n * \\param[in]      iface   Pointer to the algorithm interface\n * \\param[in]      data    Pointer to a block of data to parse\n * \\param[in]      data_sz Size of the data buffer\n * \\param[in,out]  si      Pointer to stream info to update.  The\n *                         size member \\ref MUST be properly\n *                         initialized, but \\ref MAY be\n *                         clobbered by the algorithm.  This\n *                         parameter \\ref MAY be NULL.\n *\n * \\retval #VPX_DEC_OK\n *     Bitstream is parsable and stream information updated\n */\nvpx_dec_err_t vpx_dec_peek_stream_info(\n                         vpx_dec_iface_t       *iface,\n                         const uint8_t         *data,\n                         unsigned int           data_sz,\n                         vpx_dec_stream_info_t *si) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Return information about the current stream.\n *\n * Returns information about the stream that has been parsed\n * during decoding.\n *\n * \\param[in]      ctx     Pointer to this instance's context\n * \\param[in,out]  si      Pointer to stream info to update.\n *                         The size member \\ref MUST be properly\n *                         initialized, but \\ref MAY be clobbered\n *                         by the algorithm.  This parameter \\ref\n *                         MAY be NULL.\n *\n * \\retval #VPX_DEC_OK\n *     Bitstream is parsable and stream information updated\n */\nvpx_dec_err_t vpx_dec_get_stream_info(\n    vpx_dec_ctx_t         *ctx,\n    vpx_dec_stream_info_t *si) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Control algorithm\n *\n * This function is used to exchange algorithm-specific data with\n * the decoder instance.  This can be used to implement features\n * specific to a particular algorithm.\n *\n * This wrapper function dispatches the request to the helper\n * function associated with the given ctrl_id.  It tries to call\n * this function transparently, but will return #VPX_DEC_ERROR if\n * the request could not be dispatched.\n *\n * \\param[in]     ctx          Pointer to this instance's context\n * \\param[in]     ctrl_id      Algorithm-specific control\n *                             identifier\n * \\param[in,out] data         Data to exchange with algorithm\n *                             instance.\n *\n * \\retval #VPX_DEC_OK\n *     The control request was processed.\n * \\retval #VPX_DEC_ERROR\n *     The control request was not processed.\n * \\retval #VPX_DEC_INVALID_PARAM\n *     The data was not valid.\n */\nvpx_dec_err_t vpx_dec_control(vpx_dec_ctx_t  *ctx,\n                              int             ctrl_id,\n                              void           *data) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decode data\n *\n * Processes a buffer of coded data.  If the processing results\n * in a new decoded frame becoming available,\n * #VPX_DEC_CB_PUT_SLICE and #VPX_DEC_CB_PUT_FRAME events may be\n * generated, as appropriate.  Encoded data \\ref MUST be passed\n * in DTS (decode time stamp) order.  Frames produced will always\n * be in PTS (presentation time stamp) order.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] data         Pointer to this block of new coded\n *                         data.  If NULL, a VPX_DEC_CB_PUT_FRAME\n *                         event is posted for the previously\n *                         decoded frame.\n * \\param[in] data_sz      Size of the coded data, in bytes.\n * \\param[in] user_priv    Application-specific data to associate\n *                         with this frame.\n * \\param[in] rel_pts      PTS relative to the previous frame, in\n *                         us.  If unknown or unavailable, set to\n *                         zero.\n *\n * \\return Returns #VPX_DEC_OK if the coded data was processed\n *         completely and future pictures can be decoded without\n *         error.  Otherwise, see the descriptions of the other\n *         error codes in ::vpx_dec_err_t for recoverability\n *         capabilities.\n */\nvpx_dec_err_t vpx_dec_decode(\n    vpx_dec_ctx_t  *ctx,\n    uint8_t        *data,\n    unsigned int    data_sz,\n    void           *user_priv,\n    int             rel_pts) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Decoded frames iterator\n *\n * Iterates over a list of the frames available for display.  The\n * iterator storage should be initialized to NULL to start the\n * iteration.  Iteration is complete when this function returns\n * NULL.\n *\n * The list of available frames becomes valid upon completion of\n * the vpx_dec_decode call, and remains valid until the next call\n * to vpx_dec_decode.\n *\n * \\param[in]     ctx      Pointer to this instance's context\n * \\param[in out] iter     Iterator storage, initialized to NULL",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " *\n * \\return Returns a pointer to an image, if one is ready for\n *         display.  Frames produced will always be in PTS\n *         (presentation time stamp) order.\n */\nvpx_image_t *vpx_dec_get_frame(vpx_dec_ctx_t  *ctx,\n                               vpx_dec_iter_t *iter) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\defgroup cap_put_frame Frame-Based Decoding Functions\n *\n * The following functions are required to be implemented for all\n * decoders that advertise the VPX_DEC_CAP_PUT_FRAME capability.\n * Calling these functions for codecs that don't advertise this\n * capability will result in an error code being returned,\n * usually VPX_DEC_ERROR @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief put frame callback prototype\n *\n * This callback is invoked by the decoder to notify the\n * application of the availability of decoded image data.\n */\ntypedef void (*vpx_dec_put_frame_cb_fn_t)(\n        void          *user_priv,\n        const vpx_image_t *img);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Register for notification of frame completion.\n *\n * Registers a given function to be called when a decoded frame\n * is available.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] cb           Pointer to the callback function\n * \\param[in] user_priv    User's private data\n *\n * \\retval #VPX_DEC_OK\n *     Callback successfully registered.\n * \\retval #VPX_DEC_ERROR\n *     Decoder context not initialized, or algorithm not capable\n *     of posting slice completion.\n */\nvpx_dec_err_t vpx_dec_register_put_frame_cb(\n        vpx_dec_ctx_t             *ctx,\n        vpx_dec_put_frame_cb_fn_t  cb,\n        void                      *user_priv) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup cap_put_frame */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\defgroup cap_put_slice Slice-Based Decoding Functions\n *\n * The following functions are required to be implemented for all\n * decoders that advertise the VPX_DEC_CAP_PUT_SLICE capability.\n * Calling these functions for codecs that don't advertise this\n * capability will result in an error code being returned,\n * usually VPX_DEC_ERROR\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief put slice callback prototype\n *\n * This callback is invoked by the decoder to notify the\n * application of the availability of partially decoded image\n * data.\n */\ntypedef void (*vpx_dec_put_slice_cb_fn_t)(void        *user_priv,\n        const vpx_image_t      *img,\n        const vpx_image_rect_t *valid,\n        const vpx_image_rect_t *update);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Register for notification of slice completion.\n *\n * Registers a given function to be called when a decoded slice\n * is available.\n *\n * \\param[in] ctx          Pointer to this instance's context\n * \\param[in] cb           Pointer to the callback function\n * \\param[in] user_priv    User's private data\n *\n * \\retval #VPX_DEC_OK\n *     Callback successfully registered.\n * \\retval #VPX_DEC_ERROR\n *     Decoder context not initialized, or algorithm not capable\n *     of posting slice completion.\n */\nvpx_dec_err_t vpx_dec_register_put_slice_cb(vpx_dec_ctx_t   *ctx,\n        vpx_dec_put_slice_cb_fn_t  cb,\n        void                      *user_priv) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup cap_put_slice*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\defgroup cap_xma External Memory Allocation Functions\n *\n * The following functions are required to be implemented for all\n * decoders that advertise the VPX_DEC_CAP_XMA capability.\n * Calling these functions for codecs that don't advertise this\n * capability will result in an error code being returned,\n * usually VPX_DEC_ERROR\n * @{\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Memory Map Entry\n     *\n     * This structure is used to contain the properties of a memory\n     * segment.  It is populated by the decoder in the request phase,\n     * and by the calling application once the requested allocation\n     * has been performed.\n     */\n#if 1\n#define VPX_DEC_MEM_ZERO     0x1  /**< Segment must be zeroed by\n                                       allocation */\n#define VPX_DEC_MEM_WRONLY   0x2  /**< Segment need not be\n                                       readable */\n#define VPX_DEC_MEM_FAST     0x4  /**< Place in fast memory, if\n                                       available */\n    typedef struct vpx_codec_mmap vpx_dec_mmap_t;\n#else\n    typedef struct vpx_dec_mmap\n    {\n        /*\n         * The following members are set by the codec when requesting\n         * a segment\n         */\n        unsigned int   id;     /**< identifier for the segment's\n                                    contents */\n        unsigned long  sz;     /**< size of the segment, in bytes */\n        unsigned int   align;  /**< required alignment of the\n                                    segment, in bytes */\n        unsigned int   flags;  /**< bitfield containing segment\n                                    properties */\n#define VPX_DEC_MEM_ZERO     0x1  /**< Segment must be zeroed by\n                                       allocation */\n#define VPX_DEC_MEM_WRONLY   0x2  /**< Segment need not be\n                                       readable */\n#define VPX_DEC_MEM_FAST     0x4  /**< Place in fast memory, if\n                                       available */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        /* The following members are to be filled in by the\n         * allocation function */\n        void          *base;   /**< pointer to the allocated\n                                    segment */\n        void (*dtor)(struct vpx_dec_mmap *map);  /**< destructor to\n                                                      call */\n        void          *priv;   /**< allocator private storage */\n    } vpx_dec_mmap_t;\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Initialize a decoder instance in external allocation\n     * mode\n     *\n     * Initializes a decoder context using the given interface.\n     * Applications should call the vpx_dec_xma_init convenience\n     * macro instead of this function directly, to ensure that the\n     * ABI version number parameter is properly initialized.\n     *\n     * \\param[in]    ctx     Pointer to this instance's context.\n     * \\param[in]    iface   Pointer to the algorithm interface to\n     *                       use.\n     * \\param[in]    ver     ABI version number.  Must be set to\n     *                       VPX_DECODER_ABI_VERSION\n     * \\retval #VPX_DEC_OK\n     *     The decoder algorithm initialized.\n     * \\retval #VPX_DEC_ERROR\n     *     Decoder does not support XMA mode.\n     */\n    vpx_dec_err_t vpx_dec_xma_init_ver(vpx_dec_ctx_t    *ctx,\n                                       vpx_dec_iface_t  *iface,\n                                       int           ver) DEPRECATED;\n#define vpx_dec_xma_init(ctx, iface) \\\n    vpx_dec_xma_init_ver(ctx, iface, VPX_DECODER_ABI_VERSION)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Iterate over the list of segments to allocate.\n *\n * Iterates over a list of the segments to allocate.  The\n * iterator storage should be initialized to NULL to start the\n * iteration.  Iteration is complete when this function returns\n * VPX_DEC_LIST_END.  The amount of memory needed to allocate is\n * dependent upon the size of the encoded stream.  This means\n * that the stream info structure must be known at allocation\n * time.  It can be populated with the vpx_dec_peek_stream_info()\n * function.  In cases where the stream to be decoded is not\n * available at allocation time, a fixed size must be requested.\n * The decoder will not be able to decode streams larger than the\n * size used at allocation time.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " *\n * \\param[in]      ctx     Pointer to this instance's context.\n * \\param[out]     mmap    Pointer to the memory map entry to\n *                         populate.\n * \\param[in]      si      Pointer to the stream info.\n * \\param[in out]  iter    Iterator storage, initialized to NULL\n *\n * \\retval #VPX_DEC_OK\n *     The memory map entry was populated.\n * \\retval #VPX_DEC_ERROR\n *     Decoder does not support XMA mode.\n * \\retval #VPX_DEC_MEM_ERROR\n *     Unable to determine segment size from stream info.\n */\nvpx_dec_err_t vpx_dec_get_mem_map(\n    vpx_dec_ctx_t                *ctx,\n    vpx_dec_mmap_t               *mmap,\n    const vpx_dec_stream_info_t  *si,\n    vpx_dec_iter_t               *iter) DEPRECATED;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Identify allocated segments to decoder instance\n *\n * Stores a list of allocated segments in the decoder.  Segments\n * \\ref MUST be passed in the order they are read from\n * vpx_dec_get_mem_map(), but may be passed in groups of any\n * size.  Segments \\ref MUST be set only once.  The allocation\n * function \\ref MUST ensure that the vpx_dec_mmap_t::base member\n * is non-NULL.  If the segment requires cleanup handling (e.g.,\n * calling free() or close()) then the vpx_dec_mmap_t::dtor\n * member \\ref MUST be populated.\n *\n * \\param[in]      ctx       Pointer to this instance's context.\n * \\param[in]      mmaps     Pointer to the first memory map\n *                           entry in the list.\n * \\param[in]      num_maps  Number of entries being set at this\n *                           time\n *\n * \\retval #VPX_DEC_OK\n *     The segment was stored in the decoder context.\n * \\retval #VPX_DEC_ERROR\n *     Decoder does not support XMA mode.\n * \\retval #VPX_DEC_MEM_ERROR\n *     Segment base address was not set, or segment was already\n * stored.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 8,
      "text": "*/",
      "zh-CHS": "*/"
    },
    {
      "indent": 7,
      "text": "vpx_dec_err_t vpx_dec_set_mem_map( vpx_dec_ctx_t *ctx, vpx_dec_mmap_t *mmaps, unsigned int num_maps) DEPRECATED;",
      "zh-CHS": "vpx_dec_err_t vpx_dec_set_mem_map（vpx_dec_ctx_t*ctx，vpx_dec_mmap_t*mmaps，无符号整数映射）已弃用；"
    },
    {
      "indent": 7,
      "text": "/*!@} - end defgroup cap_xma*/\n/*!@} - end defgroup decoder*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif\n#ifdef __cplusplus\n}\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.22. vpx_image.c",
      "section_title": true,
      "zh-CHS": "20.22. vpx_image.c"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n * Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n * Use of this source code is governed by a BSD-style license\n * that can be found in the LICENSE file in the root of the source\n * tree.  An additional intellectual property rights grant can be\n * found in the file PATENTS.  All contributing project authors may\n * be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#include <stdlib.h>\n#include <string.h>\n#include \"vpx/vpx_image.h\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "static vpx_image_t *img_alloc_helper(vpx_image_t *img, vpx_img_fmt_t fmt, unsigned int d_w, unsigned int d_h, unsigned int stride_align, unsigned char *img_data) {",
      "zh-CHS": "静态vpx_image_t*img_alloc_helper（vpx_image_t*img，vpx_img_fmt_t fmt，无符号整数d_w，无符号整数d_h，无符号整数步长对齐，无符号字符*img_数据）{"
    },
    {
      "indent": 7,
      "text": "unsigned int  h, w, s, xcs, ycs, bps;\nint           align;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Treat align==0 like align==1 */\nif (!stride_align)\n    stride_align = 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Validate alignment (must be power of 2) */\nif (stride_align & (stride_align - 1))\n    goto fail;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Get sample size for this format */\nswitch (fmt)\n{\ncase VPX_IMG_FMT_RGB32:\ncase VPX_IMG_FMT_RGB32_LE:\ncase VPX_IMG_FMT_ARGB:\ncase VPX_IMG_FMT_ARGB_LE:\n    bps = 32;\n    break;\ncase VPX_IMG_FMT_RGB24:\ncase VPX_IMG_FMT_BGR24:\n    bps = 24;\n    break;\ncase VPX_IMG_FMT_RGB565:\ncase VPX_IMG_FMT_RGB565_LE:\ncase VPX_IMG_FMT_RGB555:\ncase VPX_IMG_FMT_RGB555_LE:\ncase VPX_IMG_FMT_UYVY:\ncase VPX_IMG_FMT_YUY2:\ncase VPX_IMG_FMT_YVYU:\n    bps = 16;\n    break;\ncase VPX_IMG_FMT_I420:\ncase VPX_IMG_FMT_YV12:\ncase VPX_IMG_FMT_VPXI420:\ncase VPX_IMG_FMT_VPXYV12:\n    bps = 12;\n    break;\ndefault:\n    bps = 16;\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Get chroma shift values for this format */\nswitch (fmt)\n{\ncase VPX_IMG_FMT_I420:\ncase VPX_IMG_FMT_YV12:\ncase VPX_IMG_FMT_VPXI420:\ncase VPX_IMG_FMT_VPXYV12:\n    xcs = 1;\n    break;\ndefault:\n    xcs = 0;\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "switch (fmt)\n{\ncase VPX_IMG_FMT_I420:\ncase VPX_IMG_FMT_YV12:\ncase VPX_IMG_FMT_VPXI420:\ncase VPX_IMG_FMT_VPXYV12:\n    ycs = 1;\n    break;\ndefault:\n    ycs = 0;\n    break;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Calculate storage sizes given the chroma subsampling */\nalign = (1 << xcs) - 1;\nw = (d_w + align) & ~align;\nalign = (1 << ycs) - 1;\nh = (d_h + align) & ~align;\ns = (fmt & VPX_IMG_FMT_PLANAR) ? w : bps * w / 8;\ns = (s + stride_align - 1) & ~(stride_align - 1);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Allocate the new image */\nif (!img)\n{\n    img = (vpx_image_t *)calloc(1, sizeof(vpx_image_t));",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "if (!img) goto fail;",
      "zh-CHS": "如果（！img）转到失败；"
    },
    {
      "indent": 7,
      "text": "    img->self_allocd = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "else\n{\n    memset(img, 0, sizeof(vpx_image_t));\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "img->img_data = img_data;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!img_data)\n{\n    img->img_data = malloc((fmt & VPX_IMG_FMT_PLANAR) ?\n      h * w * bps / 8 : h * s);\n    img->img_data_owner = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (!img->img_data) goto fail;",
      "zh-CHS": "如果（！img->img_data）转到失败；"
    },
    {
      "indent": 7,
      "text": "img->fmt = fmt;\nimg->w = w;\nimg->h = h;\nimg->x_chroma_shift = xcs;\nimg->y_chroma_shift = ycs;\nimg->bps = bps;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Calculate strides */\nimg->stride[VPX_PLANE_Y] = img->stride[VPX_PLANE_ALPHA] = s;\nimg->stride[VPX_PLANE_U] = img->stride[VPX_PLANE_V] = s >> xcs;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/* Default viewport to entire image */\nif (!vpx_img_set_rect(img, 0, 0, d_w, d_h))\n    return img;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "fail:\n    vpx_img_free(img);\n    return NULL;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "vpx_image_t *vpx_img_alloc(vpx_image_t  *img,\n                           vpx_img_fmt_t fmt,\n                           unsigned int  d_w,\n                           unsigned int  d_h,\n                           unsigned int  stride_align)\n{\n    return img_alloc_helper(img, fmt, d_w, d_h, stride_align, NULL);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "vpx_image_t *vpx_img_wrap(vpx_image_t  *img,\n                          vpx_img_fmt_t fmt,\n                          unsigned int  d_w,\n                          unsigned int  d_h,\n                          unsigned int  stride_align,\n                          unsigned char       *img_data)\n{\n    return img_alloc_helper(img, fmt, d_w, d_h, stride_align,\n      img_data);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "int vpx_img_set_rect(vpx_image_t  *img,\n                     unsigned int  x,\n                     unsigned int  y,\n                     unsigned int  w,\n                     unsigned int  h)\n{\n    unsigned char      *data;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "if (x + w <= img->w && y + h <= img->h)\n{\n    img->d_w = w;\n    img->d_h = h;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Calculate plane pointers */\nif (!(img->fmt & VPX_IMG_FMT_PLANAR))\n{\n    img->planes[VPX_PLANE_PACKED] =\n        img->img_data + x * img->bps / 8 + y *\n          img->stride[VPX_PLANE_PACKED];\n}\nelse\n{\n    data = img->img_data;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "if (img->fmt & VPX_IMG_FMT_HAS_ALPHA)\n{\n    img->planes[VPX_PLANE_ALPHA] =\n        data + x + y * img->stride[VPX_PLANE_ALPHA];\n    data += img->h * img->stride[VPX_PLANE_ALPHA];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 15,
      "text": "img->planes[VPX_PLANE_Y] =\n  data + x + y * img->stride[VPX_PLANE_Y];\ndata += img->h * img->stride[VPX_PLANE_Y];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "    if (!(img->fmt & VPX_IMG_FMT_UV_FLIP))\n    {\n        img->planes[VPX_PLANE_U] = data\n                               + (x >> img->x_chroma_shift)\n                               + (y >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_U];\n        data += (img->h >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_U];\n        img->planes[VPX_PLANE_V] = data\n                               + (x >> img->x_chroma_shift)\n                               + (y >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_V];\n    }\n    else\n    {\n        img->planes[VPX_PLANE_V] = data\n                               + (x >> img->x_chroma_shift)\n                               + (y >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_V];\n        data += (img->h >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_V];\n        img->planes[VPX_PLANE_U] = data\n                               + (x >> img->x_chroma_shift)\n                               + (y >> img->y_chroma_shift) *\n                                 img->stride[VPX_PLANE_U];\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    return 0;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    return -1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vpx_img_flip(vpx_image_t *img)\n{\n    /* Note: In the calculation pointer adjustment calculation, we\n     * want the rhs to be promoted to a signed type.  Section 6.3.1.8\n     * of the ISO C99 standard [ISO-C99] indicates that if the\n     * adjustment parameter is unsigned, the stride parameter will be\n     * promoted to unsigned, causing errors when the lhs is a larger\n     * type than the rhs.\n     */\n    img->planes[VPX_PLANE_Y] += (signed)\n      (img->d_h - 1) * img->stride[VPX_PLANE_Y];\n    img->stride[VPX_PLANE_Y] = -img->stride[VPX_PLANE_Y];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "img->planes[VPX_PLANE_U] += (signed)\n  ((img->d_h >> img->y_chroma_shift) - 1)\n                        * img->stride[VPX_PLANE_U];\nimg->stride[VPX_PLANE_U] = -img->stride[VPX_PLANE_U];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "img->planes[VPX_PLANE_V] += (signed)\n                        ((img->d_h >> img->y_chroma_shift) - 1) *\n                        img->stride[VPX_PLANE_V];\nimg->stride[VPX_PLANE_V] = -img->stride[VPX_PLANE_V];",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    img->planes[VPX_PLANE_ALPHA] += (signed)\n      (img->d_h - 1) * img->stride[VPX_PLANE_ALPHA];\n    img->stride[VPX_PLANE_ALPHA] = -img->stride[VPX_PLANE_ALPHA];\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "void vpx_img_free(vpx_image_t *img)\n{\n    if (img)\n    {\n        if (img->img_data && img->img_data_owner)\n            free(img->img_data);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        if (img->self_allocd)\n            free(img);\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.23. vpx_image.h",
      "section_title": true,
      "zh-CHS": "20.23. vpx_image.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n * Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n * Use of this source code is governed by a BSD-style license\n * that can be found in the LICENSE file in the root of the source\n * tree.  An additional intellectual property rights grant can be\n * found in the file PATENTS.  All contributing project authors may\n * be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*!\\file\n * \\brief Describes the vpx image descriptor and associated\n * operations\n *\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifdef __cplusplus\nextern \"C\" {\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifndef VPX_IMAGE_H #define VPX_IMAGE_H",
      "zh-CHS": "#ifndef VPX_图像#定义VPX_图像#"
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Current ABI version number\n     *\n     * \\internal\n     * If this file is altered in any way that changes the ABI, this\n     * value must be bumped.  Examples include, but are not limited\n     * to, changing types, removing or reassigning enums,\n     * adding/removing/rearranging fields to structures\n     */\n#define VPX_IMAGE_ABI_VERSION (1) /**<\\hideinitializer*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#define VPX_IMG_FMT_PLANAR     0x100  /**< Image is a planar\n                                           format */\n#define VPX_IMG_FMT_UV_FLIP    0x200  /**< V plane precedes U plane\n                                           in memory */\n#define VPX_IMG_FMT_HAS_ALPHA  0x400  /**< Image has an alpha channel\n                                           component */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief List of supported image formats */\ntypedef enum vpx_img_fmt {\n    VPX_IMG_FMT_NONE,\n    VPX_IMG_FMT_RGB24,      /**< 24 bit per pixel packed RGB */\n    VPX_IMG_FMT_RGB32,      /**< 32 bit per pixel packed 0RGB */\n    VPX_IMG_FMT_RGB565,     /**< 16 bit per pixel, 565 */\n    VPX_IMGFMT_RGB555,      /**< 16 bit per pixel, 555 */\n    VPX_IMG_FMT_UYVY,       /**< UYVY packed YUV */\n    VPX_IMG_FMT_YUY2,       /**< YUYV packed YUV */\n    VPX_IMG_FMT_YVYU,       /**< YVYU packed YUV */\n    VPX_IMG_FMT_BGR24,      /**< 24 bit per pixel packed BGR */\n    VPX_IMG_FMT_RGB32_LE,   /**< 32 bit packed BGR0 */\n    VPX_IMG_FMT_ARGB,       /**< 32 bit packed ARGB, alpha=255 */\n    VPX_IMG_FMT_ARGB_LE,    /**< 32 bit packed BGRA, alpha=255 */\n    VPX_IMG_FMT_RGB565_LE,  /**< 16 bit per pixel,\n                                 gggbbbbb rrrrrggg */\n    VPX_IMG_FMT_RGB555_LE,  /**< 16 bit per pixel,\n                                 gggbbbbb 0rrrrrgg */\n    VPX_IMG_FMT_YV12    = VPX_IMG_FMT_PLANAR |\n      VPX_IMG_FMT_UV_FLIP | 1, /**< planar YVU */\n    VPX_IMG_FMT_I420    = VPX_IMG_FMT_PLANAR | 2,",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    VPX_IMG_FMT_VPXYV12 = VPX_IMG_FMT_PLANAR |\n      VPX_IMG_FMT_UV_FLIP | 3, /** < planar 4:2:0 format with\n                                     vpx color space */\n    VPX_IMG_FMT_VPXI420 = VPX_IMG_FMT_PLANAR | 4   /** < planar\n      4:2:0 format with vpx color space */\n}\nvpx_img_fmt_t; /**< alias for enum vpx_img_fmt */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if !defined(VPX_CODEC_DISABLE_COMPAT) || !VPX_CODEC_DISABLE_COMPAT\n/** \\deprecated Use #VPX_IMG_FMT_PLANAR */\n#define IMG_FMT_PLANAR         VPX_IMG_FMT_PLANAR\n/** \\deprecated Use #VPX_IMG_FMT_UV_FLIP */\n#define IMG_FMT_UV_FLIP        VPX_IMG_FMT_UV_FLIP\n/** \\deprecated Use #VPX_IMG_FMT_HAS_ALPHA */\n#define IMG_FMT_HAS_ALPHA      VPX_IMG_FMT_HAS_ALPHA",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    /*!\\brief Deprecated list of supported image formats\n     * \\deprecated New code should use #vpx_img_fmt\n     */\n#define img_fmt   vpx_img_fmt\n    /*!\\brief alias for enum img_fmt.\n     * \\deprecated New code should use #vpx_img_fmt_t\n     */\n#define img_fmt_t vpx_img_fmt_t",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/** \\deprecated Use #VPX_IMG_FMT_NONE */\n#define IMG_FMT_NONE       VPX_IMG_FMT_NONE\n/** \\deprecated Use #VPX_IMG_FMT_RGB24 */\n#define IMG_FMT_RGB24      VPX_IMG_FMT_RGB24\n/** \\deprecated Use #VPX_IMG_FMT_RGB32 */\n#define IMG_FMT_RGB32      VPX_IMG_FMT_RGB32\n/** \\deprecated Use #VPX_IMG_FMT_RGB565 */\n#define IMG_FMT_RGB565     VPX_IMG_FMT_RGB565\n/** \\deprecated Use #VPX_IMG_FMT_RGB555 */\n#define IMG_FMT_RGB555     VPX_IMG_FMT_RGB555\n/** \\deprecated Use #VPX_IMG_FMT_UYVY */\n#define IMG_FMT_UYVY       VPX_IMG_FMT_UYVY\n/** \\deprecated Use #VPX_IMG_FMT_YUY2 */\n#define IMG_FMT_YUY2       VPX_IMG_FMT_YUY2\n/** \\deprecated Use #VPX_IMG_FMT_YVYU */\n#define IMG_FMT_YVYU       VPX_IMG_FMT_YVYU\n/** \\deprecated Use #VPX_IMG_FMT_BGR24 */\n#define IMG_FMT_BGR24      VPX_IMG_FMT_BGR24\n/**< \\deprecated Use #VPX_IMG_FMT_RGB32_LE */\n#define IMG_FMT_RGB32_LE   VPX_IMG_FMT_RGB32_LE\n/** \\deprecated Use #VPX_IMG_FMT_ARGB */\n#define IMG_FMT_ARGB       VPX_IMG_FMT_ARGB",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/** \\deprecated Use #VPX_IMG_FMT_ARGB_LE */\n#define IMG_FMT_ARGB_LE    VPX_IMG_FMT_ARGB_LE\n/** \\deprecated Use #VPX_IMG_FMT_RGB565_LE */\n#define IMG_FMT_RGB565_LE  VPX_IMG_FMT_RGB565_LE\n/** \\deprecated Use #VPX_IMG_FMT_RGB555_LE */\n#define IMG_FMT_RGB555_LE  VPX_IMG_FMT_RGB555_LE\n/** \\deprecated Use #VPX_IMG_FMT_YV12 */\n#define IMG_FMT_YV12       VPX_IMG_FMT_YV12\n/** \\deprecated Use #VPX_IMG_FMT_I420 */\n#define IMG_FMT_I420       VPX_IMG_FMT_I420\n/** \\deprecated Use #VPX_IMG_FMT_VPXYV12 */\n#define IMG_FMT_VPXYV12    VPX_IMG_FMT_VPXYV12\n/** \\deprecated Use #VPX_IMG_FMT_VPXI420 */\n#define IMG_FMT_VPXI420    VPX_IMG_FMT_VPXI420\n#endif /* VPX_CODEC_DISABLE_COMPAT */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/**\\brief Image Descriptor */\ntypedef struct vpx_image\n{\n    vpx_img_fmt_t fmt; /**< Image Format */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Image storage dimensions */\nunsigned int  w;   /**< Stored image width */\nunsigned int  h;   /**< Stored image height */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Image display dimensions */\nunsigned int  d_w;   /**< Displayed image width */\nunsigned int  d_h;   /**< Displayed image height */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* Chroma subsampling info */\nunsigned int  x_chroma_shift;   /**< subsampling order, X */\nunsigned int  y_chroma_shift;   /**< subsampling order, Y */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "        /* Image data pointers. */\n#define VPX_PLANE_PACKED 0  /**< To be used for all packed formats */\n#define VPX_PLANE_Y      0  /**< Y (Luminance) plane */\n#define VPX_PLANE_U      1  /**< U (Chroma) plane */\n#define VPX_PLANE_V      2  /**< V (Chroma) plane */\n#define VPX_PLANE_ALPHA  3  /**< A (Transparency) plane */\n#if !defined(VPX_CODEC_DISABLE_COMPAT) || !VPX_CODEC_DISABLE_COMPAT\n#define PLANE_PACKED     VPX_PLANE_PACKED\n#define PLANE_Y          VPX_PLANE_Y\n#define PLANE_U          VPX_PLANE_U\n#define PLANE_V          VPX_PLANE_V\n#define PLANE_ALPHA      VPX_PLANE_ALPHA\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "unsigned char *planes[4];  /**< pointer to the top-left pixel\nq                               for each plane */\nint    stride[4];  /**< stride between rows for each plane */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "int    bps; /**< bits per sample (for packed formats) */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "/* The following member may be set by the application to\n * associate data with this image.\n */\nvoid   *user_priv; /**< may be set by the application to\n                         associate data with this image. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "    /* The following members should be treated as private. */\n    unsigned char *img_data;       /**< private */\n    int      img_data_owner; /**< private */\n    int      self_allocd;    /**< private */\n} vpx_image_t; /**< alias for struct vpx_image */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/**\\brief Representation of a rectangle on a surface */\ntypedef struct vpx_image_rect\n{\n    unsigned int x; /**< leftmost column */\n    unsigned int y; /**< topmost row */\n    unsigned int w; /**< width */\n    unsigned int h; /**< height */\n} vpx_image_rect_t; /**< alias for struct vpx_image_rect */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Open a descriptor, allocating storage for the\n * underlying image\n *\n * Returns a descriptor for storing an image of the given format.\n * The storage for the descriptor is allocated on the heap.\n *\n * \\param[in]    img       Pointer to storage for descriptor.\n *                         If this parameter is NULL, the storage\n *                         for the descriptor will be allocated\n *                         on the heap.\n * \\param[in]    fmt       Format for the image\n * \\param[in]    d_w       Width of the image\n * \\param[in]    d_h       Height of the image\n * \\param[in]    align     Alignment, in bytes, of each row in\n *                         the image.\n *\n * \\return Returns a pointer to the initialized image descriptor.\n *         If the img parameter is non-null, the value of the img\n *         parameter will be returned.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "vpx_image_t *vpx_img_alloc(vpx_image_t *img, vpx_img_fmt_t fmt, unsigned int d_w, unsigned int d_h, unsigned int align);",
      "zh-CHS": "vpx_image_t*vpx_img_alloc（vpx_image_t*img，vpx_img_fmt_t fmt，无符号整数d_w，无符号整数d_h，无符号整数对齐）；"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Open a descriptor, using existing storage for the\n * underlying image\n *\n * Returns a descriptor for storing an image of the given format.\n * The storage for descriptor has been allocated elsewhere, and a\n * descriptor is desired to \"wrap\" that storage.\n *\n * \\param[in]    img       Pointer to storage for descriptor.\n *                         If this parameter is NULL, the storage\n *                         for the descriptor will be\n *                         allocated on the heap.\n * \\param[in]    fmt       Format for the image\n * \\param[in]    d_w       Width of the image\n * \\param[in]    d_h       Height of the image\n * \\param[in]    align     Alignment, in bytes, of each row in\n *                         the image.\n * \\param[in]    img_data  Storage to use for the image\n *\n * \\return Returns a pointer to the initialized image descriptor.\n *         If the img parameter is non-null, the value of the img\n *         parameter will be returned.\n */\nvpx_image_t *vpx_img_wrap(vpx_image_t  *img,\n                          vpx_img_fmt_t fmt,\n                          unsigned int d_w,\n                          unsigned int d_h,\n                          unsigned int align,\n                          unsigned char      *img_data);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Set the rectangle identifying the displayed portion of\n * the image\n *\n * Updates the displayed rectangle (aka viewport) on the image\n * surface to match the specified coordinates and size.\n *\n * \\param[in]    img       Image descriptor\n * \\param[in]    x         leftmost column\n * \\param[in]    y         topmost row\n * \\param[in]    w         width\n * \\param[in]    h         height\n *",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": " * \\return 0 if the requested rectangle is valid, non-zero * otherwise. */ int vpx_img_set_rect(vpx_image_t *img, unsigned int x, unsigned int y, unsigned int w, unsigned int h);",
      "zh-CHS": "*\\如果请求的矩形有效，则返回0，否则返回非零。*/int vpx_img_set_rect（vpx_image_t*img，无符号int x，无符号int y，无符号int w，无符号int h）；"
    },
    {
      "indent": 7,
      "text": "/*!\\brief Flip the image vertically (top for bottom)\n *\n * Adjusts the image descriptor's pointers and strides to make\n * the image be referenced upside-down.\n *\n * \\param[in]    img       Image descriptor\n */\nvoid vpx_img_flip(vpx_image_t *img);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 7,
      "text": "/*!\\brief Close an image descriptor\n *\n * Frees all allocated storage associated with an image\n * descriptor.\n *\n * \\param[in]    img       Image descriptor\n */\nvoid vpx_img_free(vpx_image_t *img);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif\n#ifdef __cplusplus\n}\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.24. vpx_integer.h",
      "section_title": true,
      "zh-CHS": "20.24. vpx_整数.h"
    },
    {
      "indent": 3,
      "text": "---- Begin code block --------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "/*\n *  Copyright (c) 2010, 2011, Google Inc.  All rights reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.  An additional intellectual property rights grant can be\n *  found in the file PATENTS.  All contributing project authors may\n *  be found in the AUTHORS file in the root of the source tree.\n */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifndef VPX_INTEGER_H #define VPX_INTEGER_H",
      "zh-CHS": "#如果ndef VPX_INTEGER#H#定义VPX_INTEGER#H"
    },
    {
      "indent": 3,
      "text": "/* get ptrdiff_t, size_t, wchar_t, NULL */\n#include <stddef.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if defined(_MSC_VER) || defined(VPX_EMULATE_INTTYPES)\ntypedef signed char  int8_t;\ntypedef signed short int16_t;\ntypedef signed int   int32_t;\ntypedef unsigned char  uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int   uint32_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if defined(_MSC_VER)\ntypedef signed __int64   int64_t;\ntypedef unsigned __int64 uint64_t;\n#define PRId64 \"I64d\"\n#endif",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifdef HAVE_ARMV6\ntypedef unsigned int int_fast16_t;\n#else\ntypedef signed short int_fast16_t;\n#endif\ntypedef signed char int_fast8_t;\ntypedef unsigned char uint_fast8_t;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#ifndef _UINTPTR_T_DEFINED typedef unsigned int uintptr_t; #endif",
      "zh-CHS": "#如果定义的类型定义为无符号整数UINTPTR#恩迪夫"
    },
    {
      "indent": 3,
      "text": "#else",
      "zh-CHS": "#否则"
    },
    {
      "indent": 3,
      "text": "/* Most platforms have the C99 standard integer types. */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#if defined(__cplusplus) && !defined(__STDC_FORMAT_MACROS)\n#define __STDC_FORMAT_MACROS\n#endif\n#include <stdint.h>\n#include <inttypes.h>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "#endif",
      "zh-CHS": "#恩迪夫"
    },
    {
      "indent": 3,
      "text": "---- End code block ----------------------------------------",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "20.25. AUTHORS File",
      "section_title": true,
      "zh-CHS": "20.25. 作者档案"
    },
    {
      "indent": 3,
      "text": "Aaron Watry <awatry@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Adrian Grange <agrange@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Alex Converse <alex.converse@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Andoni Morales Alastruey <ylatuya@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Andres Mejia <mcitadel@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Attila Nagy <attilanagy@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Fabio Pedretti <fabio.ped@libero.it>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Frank Galligan <fgalligan@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Fredrik Soederquist <fs@opera.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Fritz Koenig <frkoenig@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Gaute Strokkenes <gaute.strokkenes@broadcom.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Giuseppe Scrivano <gscrivano@gnu.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Guillermo Ballester Valor <gbvalor@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Henrik Lundin <hlundin@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "James Berry <jamesberry@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "James Zern <jzern@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Jan Kratochvil <jan.kratochvil@redhat.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Jeff Muizelaar <jmuizelaar@mozilla.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Jim Bankoski <jimbankoski@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Johann Koenig <johannkoenig@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "John Koleszar <jkoleszar@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Justin Clift <justin@salasaga.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Justin Lebar <justin.lebar@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Luca Barbato <lu_zero@gentoo.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Makoto Kato <makoto.kt@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Martin Ettl <ettl.martin78@googlemail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Michael Kohler <michaelkohler@live.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Mikhal Shemer <mikhal@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pascal Massimino <pascal.massimino@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Patrik Westin <patrik.westin@gmail.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Paul Wilkins <paulwilkins@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Pavol Rusnak <stick@gk2.sk>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Philip Jaegenstedt <philipj@opera.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Scott LaVarnway <slavarnway@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Tero Rintaluoma <teror@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Timothy B. Terriberry <tterribe@xiph.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Tom Finegan <tomfinegan@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Yaowu Xu <yaowu@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Yunqing Wang <yunqingwang@google.com>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Google Inc.",
      "zh-CHS": "谷歌公司。"
    },
    {
      "indent": 3,
      "text": "The Mozilla Foundation",
      "zh-CHS": "Mozilla基金会"
    },
    {
      "indent": 3,
      "text": "The Xiph.Org Foundation",
      "zh-CHS": "XIPH.org基金会"
    },
    {
      "indent": 0,
      "text": "20.26. LICENSE",
      "section_title": true,
      "zh-CHS": "20.26. 许可证"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2010, 2011, Google Inc. All rights reserved.",
      "zh-CHS": "版权所有（c）201012011，谷歌公司保留所有权利。"
    },
    {
      "indent": 3,
      "text": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:",
      "zh-CHS": "在满足以下条件的情况下，允许以源代码和二进制格式重新分发和使用，无论是否修改："
    },
    {
      "indent": 3,
      "text": "o Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.",
      "zh-CHS": "o 源代码的重新分发必须保留上述版权声明、此条件列表和以下免责声明。"
    },
    {
      "indent": 3,
      "text": "o Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.",
      "zh-CHS": "o 以二进制形式重新分发时，必须在分发时提供的文档和/或其他材料中复制上述版权声明、本条件列表和以下免责声明。"
    },
    {
      "indent": 3,
      "text": "o Neither the name of Google nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.",
      "zh-CHS": "o 未经事先书面许可，谷歌及其贡献者的姓名不得用于支持或推广源自本软件的产品。"
    },
    {
      "indent": 3,
      "text": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "zh-CHS": "本软件由版权所有者和贡献者“按原样”提供，不承担任何明示或暗示的担保，包括但不限于对适销性和特定用途适用性的暗示担保。在任何情况下，版权持有人或贡献者均不对任何直接、间接、偶然、特殊、惩戒性或后果性损害（包括但不限于替代商品或服务的采购；使用、数据或利润的损失；或业务中断）负责，无论是在合同中还是在任何责任理论下，严格责任，或因使用本软件而产生的侵权行为（包括疏忽或其他），即使告知可能发生此类损害。"
    },
    {
      "indent": 0,
      "text": "20.27. PATENTS",
      "section_title": true,
      "zh-CHS": "20.27. 专利权"
    },
    {
      "indent": 3,
      "text": "Additional IP Rights Grant (Patents)",
      "zh-CHS": "额外知识产权授予（专利）"
    },
    {
      "indent": 3,
      "text": "\"This implementation\" means the copyrightable works distributed by Google as part of the WebM Project.",
      "zh-CHS": "“本实施”是指谷歌作为WebM项目的一部分发布的受版权保护的作品。"
    },
    {
      "indent": 3,
      "text": "Google hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, transfer, and otherwise run, modify and propagate the contents of this implementation of VP8, where such license applies only to those patent claims, both currently owned by Google and acquired in the future, licensable by Google that are necessarily infringed by this implementation of VP8. This grant does not include claims that would be infringed only as a consequence of further modification of this implementation. If you or your agent or exclusive licensee institute or order or agree to the institution of patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that this implementation of VP8 or any code incorporated within this implementation of VP8 constitutes direct or contributory patent infringement, or inducement of patent infringement, then any patent rights granted to you under this License for this implementation of VP8 shall terminate as of the date such litigation is filed.",
      "zh-CHS": "谷歌特此授予您永久的、全球范围的、非排他性的、免费的、免版税的、不可撤销的（本节规定的除外）专利许可，以制作、制作、使用、提供销售、销售、进口、转让以及以其他方式运行、修改和传播VP8实施的内容，如果此类许可仅适用于谷歌目前拥有的和未来获得的、可由谷歌许可的、因VP8实施而必然受到侵犯的专利权利要求。本授权不包括仅因进一步修改本实施而被侵犯的索赔。如果您或您的代理人或独家被许可人针对任何实体提起专利诉讼（包括诉讼中的交叉索赔或反诉），声称VP8的实施或VP8实施中包含的任何代码构成直接或共同的专利侵权，或专利侵权的诱因，则根据本许可证授予您的、用于实施VP8的任何专利权应自提起诉讼之日起终止。"
    },
    {
      "indent": 0,
      "text": "21. Security Considerations",
      "section_title": true,
      "zh-CHS": "21. 安全考虑"
    },
    {
      "indent": 3,
      "text": "A VP8 decoder should take appropriate security considerations into account, as outlined in [RFC4732] and [RFC3552]. It is extremely important that a decoder be robust against malicious payloads. Malicious payloads must not cause the decoder to overrun its allocated memory or to consume inordinate resources. Although encoder issues are typically rarer, the same applies to an encoder. Malicious stream data must not cause the encoder to misbehave, as this might allow an attacker access to transcoding gateways.",
      "zh-CHS": "VP8解码器应考虑适当的安全因素，如[RFC4732]和[RFC3552]所述。解码器对恶意有效负载具有鲁棒性是非常重要的。恶意有效负载不得导致解码器超出其分配的内存或消耗过多的资源。虽然编码器问题通常比较少见，但同样的情况也适用于编码器。恶意流数据不得导致编码器行为不当，因为这可能允许攻击者访问转码网关。"
    },
    {
      "indent": 0,
      "text": "22. References",
      "section_title": true,
      "zh-CHS": "22. 工具书类"
    },
    {
      "indent": 0,
      "text": "22.1. Normative Reference",
      "section_title": true,
      "zh-CHS": "22.1. 规范性引用文件"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "zh-CHS": "[RFC2119]Bradner，S.，“RFC中用于表示需求水平的关键词”，BCP 14，RFC 2119，1997年3月。"
    },
    {
      "indent": 0,
      "text": "22.2. Informative References",
      "section_title": true,
      "zh-CHS": "22.2. 资料性引用"
    },
    {
      "indent": 3,
      "text": "[Bell] Bell, T., Cleary, J., and I. Witten, \"Text Compression\", 1990.",
      "zh-CHS": "[Bell]Bell，T.，Cleary，J.，和I.Witten，“文本压缩”，1990年。"
    },
    {
      "indent": 3,
      "text": "[ISO-C99] International Organization for Standardization, \"Information technology -- Programming languages -- C\", ISO/IEC 9899:1999, 1999.",
      "zh-CHS": "[ISO-C99]国际标准化组织，“信息技术——编程语言——C”，ISO/IEC 9899:1999，1999。"
    },
    {
      "indent": 3,
      "text": "[ITU-R_BT.601] International Telecommunication Union, \"ITU BT.601-7: Studio encoding parameters of digital television for standard 4:3 and wide screen 16:9 aspect ratios\", March 2011.",
      "zh-CHS": "[ITU-R_BT.601]国际电信联盟，“ITU BT.601-7：标准4:3和宽屏幕16:9纵横比数字电视的演播室编码参数”，2011年3月。"
    },
    {
      "indent": 3,
      "text": "[Kernighan] Kernighan, B. and D. Ritchie, \"The C Programming Language (2nd edition)\", April 1988.",
      "zh-CHS": "[Kernighan]Kernighan，B.和D.Ritchie，“C编程语言（第二版）”，1988年4月。"
    },
    {
      "indent": 3,
      "text": "[Loeffler] Loeffler, C., Ligtenberg , A., and G. Moschytz, \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\", May 1989.",
      "zh-CHS": "[Loeffler]Loeffler，C.，Ligtenberg，A.，和G.Moschytz，“具有11次乘法的实用快速1-D DCT算法”，1989年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3552] Rescorla, E. and B. Korver, \"Guidelines for Writing RFC Text on Security Considerations\", BCP 72, RFC 3552, July 2003.",
      "zh-CHS": "[RFC3552]Rescorla，E.和B.Korver，“关于安全考虑的RFC文本编写指南”，BCP 72，RFC 3552，2003年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC4732] Handley, M., Ed., Rescorla, E., Ed., and IAB, \"Internet Denial-of-Service Considerations\", RFC 4732, December 2006.",
      "zh-CHS": "[RFC4732]Handley，M.，Ed.，Rescorla，E.，Ed.，和IAB，“互联网拒绝服务注意事项”，RFC 47322006年12月。"
    },
    {
      "indent": 3,
      "text": "[Shannon] Shannon, C., \"A Mathematical Theory of Communication\", Bell System Technical Journal Vol. 27, pp. 379-423 and 623-656, July and October 1948.",
      "zh-CHS": "[Shannon]Shannon，C.，“通信的数学理论”，《贝尔系统技术期刊》第27卷，379-423和623-656页，1948年7月和10月。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "zh-CHS": "作者地址"
    },
    {
      "indent": 3,
      "text": "James Bankoski Google Inc.",
      "zh-CHS": "詹姆斯·班科斯基谷歌公司。"
    },
    {
      "indent": 3,
      "text": "EMail: jimbankoski@google.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "John Koleszar Google Inc.",
      "zh-CHS": "约翰·科莱萨谷歌公司。"
    },
    {
      "indent": 3,
      "text": "EMail: jkoleszar@google.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Lou Quillio Google Inc.",
      "zh-CHS": "卢·奎利奥谷歌公司。"
    },
    {
      "indent": 3,
      "text": "EMail: louquillio@google.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Janne Salonen Google Inc.",
      "zh-CHS": "Janne Salonen谷歌公司。"
    },
    {
      "indent": 3,
      "text": "EMail: jsalonen@google.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Paul Wilkins Google Inc.",
      "zh-CHS": "保罗·威尔金斯谷歌公司。"
    },
    {
      "indent": 3,
      "text": "EMail: paulwilkins@google.com",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Yaowu Xu Google Inc.",
      "zh-CHS": "耀武旭谷歌有限公司。"
    },
    {
      "indent": 3,
      "text": "EMail: yaowu@google.com",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}