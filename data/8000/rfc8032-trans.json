{
  "title": {
    "text": "RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA)",
    "zh-CHS": "RFC 8032"
  },
  "number": 8032,
  "created_at": "2021-10-28 13:07:29.686068+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Research Task Force (IRTF)                         S. Josefsson\nRequest for Comments: 8032                                        SJD AB\nCategory: Informational                                     I. Liusvaara\nISSN: 2070-1721                                              Independent\n                                                            January 2017",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 11,
      "text": "Edwards-Curve Digital Signature Algorithm (EdDSA)",
      "zh-CHS": "爱德华兹曲线数字签名算法（EdDSA）"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "zh-CHS": "摘要"
    },
    {
      "indent": 3,
      "text": "This document describes elliptic curve signature scheme Edwards-curve Digital Signature Algorithm (EdDSA). The algorithm is instantiated with recommended parameters for the edwards25519 and edwards448 curves. An example implementation and test vectors are provided.",
      "zh-CHS": "本文描述了椭圆曲线签名方案Edwards曲线数字签名算法（EdDSA）。该算法使用edwards25519和edwards448曲线的推荐参数进行实例化。提供了一个示例实现和测试向量。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "zh-CHS": "关于下段备忘"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "zh-CHS": "本文件不是互联网标准跟踪规范；它是为了提供信息而发布的。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Crypto Forum Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not a candidate for any level of Internet Standard; see Section 2 of RFC 7841.",
      "zh-CHS": "本文件是互联网研究工作组（IRTF）的产品。IRTF发布互联网相关研究和开发活动的结果。这些结果可能不适合部署。本RFC代表了互联网研究工作组（IRTF）加密论坛研究小组的共识。IRSG批准发布的文件不适用于任何级别的互联网标准；见RFC 7841第2节。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc8032.",
      "zh-CHS": "有关本文件当前状态、任何勘误表以及如何提供反馈的信息，请访问http://www.rfc-editor.org/info/rfc8032."
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "zh-CHS": "版权公告"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2017 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "zh-CHS": "版权所有（c）2017 IETF信托基金和确定为文件作者的人员。版权所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "zh-CHS": "本文件受BCP 78和IETF信托有关IETF文件的法律规定的约束(http://trustee.ietf.org/license-info)自本文件出版之日起生效。请仔细阅读这些文件，因为它们描述了您对本文件的权利和限制。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "zh-CHS": "目录"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3\n2.  Notation and Conventions  . . . . . . . . . . . . . . . . . .   4\n3.  EdDSA Algorithm . . . . . . . . . . . . . . . . . . . . . . .   5\n  3.1.  Encoding  . . . . . . . . . . . . . . . . . . . . . . . .   7\n  3.2.  Keys  . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n  3.3.  Sign  . . . . . . . . . . . . . . . . . . . . . . . . . .   8\n  3.4.  Verify  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n4.  PureEdDSA, HashEdDSA, and Naming  . . . . . . . . . . . . . .   8\n5.  EdDSA Instances . . . . . . . . . . . . . . . . . . . . . . .   9\n  5.1.  Ed25519ph, Ed25519ctx, and Ed25519  . . . . . . . . . . .   9\n    5.1.1.  Modular Arithmetic  . . . . . . . . . . . . . . . . .  10\n    5.1.2.  Encoding  . . . . . . . . . . . . . . . . . . . . . .  10\n    5.1.3.  Decoding  . . . . . . . . . . . . . . . . . . . . . .  11\n    5.1.4.  Point Addition  . . . . . . . . . . . . . . . . . . .  11\n    5.1.5.  Key Generation  . . . . . . . . . . . . . . . . . . .  13\n    5.1.6.  Sign  . . . . . . . . . . . . . . . . . . . . . . . .  13\n    5.1.7.  Verify  . . . . . . . . . . . . . . . . . . . . . . .  14\n  5.2.  Ed448ph and Ed448 . . . . . . . . . . . . . . . . . . . .  15\n    5.2.1.  Modular Arithmetic  . . . . . . . . . . . . . . . . .  16\n    5.2.2.  Encoding  . . . . . . . . . . . . . . . . . . . . . .  16\n    5.2.3.  Decoding  . . . . . . . . . . . . . . . . . . . . . .  16\n    5.2.4.  Point Addition  . . . . . . . . . . . . . . . . . . .  17\n    5.2.5.  Key Generation  . . . . . . . . . . . . . . . . . . .  18\n    5.2.6.  Sign  . . . . . . . . . . . . . . . . . . . . . . . .  19\n    5.2.7.  Verify  . . . . . . . . . . . . . . . . . . . . . . .  19\n6.  Ed25519 Python Illustration . . . . . . . . . . . . . . . . .  20\n7.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  23\n  7.1.  Test Vectors for Ed25519  . . . . . . . . . . . . . . . .  24\n  7.2.  Test Vectors for Ed25519ctx . . . . . . . . . . . . . . .  27\n  7.3.  Test Vectors for Ed25519ph  . . . . . . . . . . . . . . .  30\n  7.4.  Test Vectors for Ed448  . . . . . . . . . . . . . . . . .  30\n  7.5.  Test Vectors for Ed448ph  . . . . . . . . . . . . . . . .  38\n8.  Security Considerations . . . . . . . . . . . . . . . . . . .  40\n  8.1.  Side-Channel Leaks  . . . . . . . . . . . . . . . . . . .  40\n  8.2.  Randomness Considerations . . . . . . . . . . . . . . . .  40\n  8.3.  Use of Contexts . . . . . . . . . . . . . . . . . . . . .  41\n  8.4.  Signature Malleability  . . . . . . . . . . . . . . . . .  41\n  8.5.  Choice of Signature Primitive . . . . . . . . . . . . . .  41\n  8.6.  Mixing Different Prehashes  . . . . . . . . . . . . . . .  42\n  8.7.  Signing Large Amounts of Data at Once . . . . . . . . . .  42\n  8.8.  Multiplication by Cofactor in Verification  . . . . . . .  43\n  8.9.  Use of SHAKE256 as a Hash Function  . . . . . . . . . . .  43\n9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  43\n  9.1.  Normative References  . . . . . . . . . . . . . . . . . .  43\n  9.2.  Informative References  . . . . . . . . . . . . . . . . .  44",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Appendix A.  Ed25519/Ed448 Python Library . . . . . . . . . . . .  46\nAppendix B.  Library Driver . . . . . . . . . . . . . . . . . . .  58\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  60\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  60",
      "raw": true,
      "toc": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "zh-CHS": "1. 介绍"
    },
    {
      "indent": 3,
      "text": "The Edwards-curve Digital Signature Algorithm (EdDSA) is a variant of Schnorr's signature system with (possibly twisted) Edwards curves. EdDSA needs to be instantiated with certain parameters, and this document describes some recommended variants.",
      "zh-CHS": "Edwards曲线数字签名算法（EdDSA）是Schnorr签名系统的一个变体，具有（可能扭曲的）Edwards曲线。EdDSA需要使用某些参数进行实例化，本文档描述了一些推荐的变体。"
    },
    {
      "indent": 3,
      "text": "To facilitate adoption of EdDSA in the Internet community, this document describes the signature scheme in an implementation-oriented way and provides sample code and test vectors.",
      "zh-CHS": "为了便于在互联网社区中采用EdDSA，本文档以面向实现的方式描述了签名方案，并提供了示例代码和测试向量。"
    },
    {
      "indent": 3,
      "text": "The advantages with EdDSA are as follows:",
      "zh-CHS": "EdDSA的优点如下："
    },
    {
      "indent": 3,
      "text": "1. EdDSA provides high performance on a variety of platforms;",
      "zh-CHS": "1. EdDSA在各种平台上提供高性能；"
    },
    {
      "indent": 3,
      "text": "2. The use of a unique random number for each signature is not required;",
      "zh-CHS": "2. 不需要为每个签名使用唯一的随机数；"
    },
    {
      "indent": 3,
      "text": "3. It is more resilient to side-channel attacks;",
      "zh-CHS": "3. 它对侧通道攻击更具弹性；"
    },
    {
      "indent": 3,
      "text": "4. EdDSA uses small public keys (32 or 57 bytes) and signatures (64 or 114 bytes) for Ed25519 and Ed448, respectively;",
      "zh-CHS": "4. EdDSA分别对Ed25519和Ed448使用小型公钥（32或57字节）和签名（64或114字节）；"
    },
    {
      "indent": 3,
      "text": "5. The formulas are \"complete\", i.e., they are valid for all points on the curve, with no exceptions. This obviates the need for EdDSA to perform expensive point validation on untrusted public values; and",
      "zh-CHS": "5. 这些公式是“完整的”，即它们对曲线上的所有点都有效，没有例外。这样就不需要EdDSA对不可信的公共值执行昂贵的点验证；和"
    },
    {
      "indent": 3,
      "text": "6. EdDSA provides collision resilience, meaning that hash-function collisions do not break this system (only holds for PureEdDSA).",
      "zh-CHS": "6. EdDSA提供冲突恢复能力，这意味着哈希函数冲突不会破坏该系统（仅适用于PureEdDSA）。"
    },
    {
      "indent": 3,
      "text": "The original EdDSA paper [EDDSA] and the generalized version described in \"EdDSA for more curves\" [EDDSA2] provide further background. RFC 7748 [RFC7748] discusses specific curves, including Curve25519 [CURVE25519] and Ed448-Goldilocks [ED448].",
      "zh-CHS": "最初的EdDSA论文[EdDSA]和“更多曲线的EdDSA”[EDDSA2]中描述的广义版本提供了进一步的背景。RFC 7748[RFC7748]讨论了特定曲线，包括Curve25519[Curve25519]和Ed448 Goldilocks[Ed448]。"
    },
    {
      "indent": 3,
      "text": "Ed25519 is intended to operate at around the 128-bit security level and Ed448 at around the 224-bit security level. A sufficiently large quantum computer would be able to break both. Reasonable projections of the abilities of classical computers conclude that Ed25519 is perfectly safe. Ed448 is provided for those applications with relaxed performance requirements and where there is a desire to hedge against analytical attacks on elliptic curves.",
      "zh-CHS": "Ed25519拟在128位安全级别左右运行，Ed448拟在224位安全级别左右运行。一台足够大的量子计算机将能够同时破解这两个问题。对经典计算机能力的合理预测得出结论，Ed25519是完全安全的。Ed448适用于性能要求较宽松的应用程序，并且希望避免对椭圆曲线的分析攻击。"
    },
    {
      "indent": 0,
      "text": "2. Notation and Conventions",
      "section_title": true,
      "zh-CHS": "2. 符号和约定"
    },
    {
      "indent": 3,
      "text": "The following notation is used throughout the document:",
      "zh-CHS": "本文件中使用了以下符号："
    },
    {
      "indent": 3,
      "text": "p Denotes the prime number defining the underlying field",
      "zh-CHS": "p表示定义基础字段的素数"
    },
    {
      "indent": 3,
      "text": "GF(p) Finite field with p elements",
      "zh-CHS": "含p元的GF（p）有限域"
    },
    {
      "indent": 3,
      "text": "x^y x multiplied by itself y times",
      "zh-CHS": "x^y x乘以自身y倍"
    },
    {
      "indent": 3,
      "text": "B Generator of the group or subgroup of interest",
      "zh-CHS": "B感兴趣的组或子组的生成器"
    },
    {
      "indent": 3,
      "text": "[n]X X added to itself n times",
      "zh-CHS": "[n] X自身添加了n次"
    },
    {
      "indent": 3,
      "text": "h[i] The i'th octet of octet string",
      "zh-CHS": "h[i]八位元字符串的第i个八位元"
    },
    {
      "indent": 3,
      "text": "h_i The i'th bit of h",
      "zh-CHS": "h_i是h的第i位"
    },
    {
      "indent": 3,
      "text": "a || b (bit-)string a concatenated with (bit-)string b",
      "zh-CHS": "a | | b（位-）字符串a与（位-）字符串b连接"
    },
    {
      "indent": 3,
      "text": "a <= b a is less than or equal to b",
      "zh-CHS": "a<=b a小于或等于b"
    },
    {
      "indent": 3,
      "text": "a >= b a is greater than or equal to b",
      "zh-CHS": "a>=b a大于或等于b"
    },
    {
      "indent": 3,
      "text": "i+j Sum of i and j",
      "zh-CHS": "i+j i和j之和"
    },
    {
      "indent": 3,
      "text": "i*j Multiplication of i and j",
      "zh-CHS": "i和j的i*j乘法"
    },
    {
      "indent": 3,
      "text": "i-j Subtraction of j from i",
      "zh-CHS": "i-j从i减去j"
    },
    {
      "indent": 3,
      "text": "i/j Division of i by j",
      "zh-CHS": "i/j按j划分i/j"
    },
    {
      "indent": 3,
      "text": "i x j Cartesian product of i and j",
      "zh-CHS": "i和j的笛卡尔积"
    },
    {
      "indent": 3,
      "text": "(u,v) Elliptic curve point with x-coordinate u and y-coordinate v",
      "zh-CHS": "具有x坐标u和y坐标v的（u，v）椭圆曲线点"
    },
    {
      "indent": 3,
      "text": "SHAKE256(x, y) The y first octets of SHAKE256 [FIPS202] output for input x",
      "zh-CHS": "SHAKE256（x，y）输入x的SHAKE256[FIPS202]输出的y个前八位字节"
    },
    {
      "indent": 3,
      "text": "OCTET(x) The octet with value x",
      "zh-CHS": "八位组（x）值为x的八位组"
    },
    {
      "indent": 3,
      "text": "OLEN(x) The number of octets in string x",
      "zh-CHS": "OLEN（x）字符串x中的八位字节数"
    },
    {
      "indent": 3,
      "text": "dom2(x, y) The blank octet string when signing or verifying Ed25519. Otherwise, the octet string: \"SigEd25519 no Ed25519 collisions\" || octet(x) || octet(OLEN(y)) || y, where x is in range 0-255 and y is an octet string of at most 255 octets. \"SigEd25519 no Ed25519 collisions\" is in ASCII (32 octets).",
      "zh-CHS": "DOM2（x，y）在签名或验证ED25519时的空白八位字节字符串。否则，八进制字符串：“SigEd25519无Ed25519冲突”| | |八进制（x）| | |八进制（OLEN（y））| | | y，其中x在0-255范围内，y是最多255个八进制的八进制字符串。“SigEd25519无Ed25519冲突”是ASCII码（32个八位字节）。"
    },
    {
      "indent": 3,
      "text": "dom4(x, y) The octet string \"SigEd448\" || octet(x) || octet(OLEN(y)) || y, where x is in range 0-255 and y is an octet string of at most 255 octets. \"SigEd448\" is in ASCII (8 octets).",
      "zh-CHS": "dom4（x，y）八位字节字符串“SigEd448”| |八位字节（x）| |八位字节（OLEN（y））| | y，其中x在0-255范围内，y是最多255个八位字节的八位字节字符串。“SigEd448”是ASCII码（8个八位字节）。"
    },
    {
      "indent": 3,
      "text": "Parentheses (i.e., '(' and ')') are used to group expressions, in order to avoid having the description depend on a binding order between operators.",
      "zh-CHS": "括号（即“（”和“）”）用于对表达式进行分组，以避免描述依赖于运算符之间的绑定顺序。"
    },
    {
      "indent": 3,
      "text": "Bit strings are converted to octet strings by taking bits from left to right, packing those from the least significant bit of each octet to the most significant bit, and moving to the next octet when each octet fills up. The conversion from octet string to bit string is the reverse of this process; for example, the 16-bit bit string",
      "zh-CHS": "通过从左到右取位，将每个八位字节的最低有效位压缩到最高有效位，并在每个八位字节填满时移动到下一个八位字节，位字符串转换为八位字节字符串。从八进制字符串到位字符串的转换与此过程相反；例如，16位字符串"
    },
    {
      "indent": 13,
      "text": "b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 b13 b14 b15",
      "zh-CHS": "b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 b11 b12 b13 b14 b15"
    },
    {
      "indent": 3,
      "text": "is converted into two octets x0 and x1 (in this order) as",
      "zh-CHS": "转换为两个八位字节x0和x1（按此顺序），如下所示："
    },
    {
      "indent": 13,
      "text": "x0 = b7*128+b6*64+b5*32+b4*16+b3*8+b2*4+b1*2+b0\nx1 = b15*128+b14*64+b13*32+b12*16+b11*8+b10*4+b9*2+b8",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Little-endian encoding into bits places bits from left to right and from least significant to most significant. If combined with bit-string-to-octet-string conversion defined above, this results in little-endian encoding into octets (if length is not a multiple of 8, the most significant bits of the last octet remain unused).",
      "zh-CHS": "位的小端编码将位从左到右，从最低有效位到最高有效位。如果与上面定义的位字符串到八位字节字符串的转换相结合，这将导致小端编码到八位字节（如果长度不是8的倍数，则最后一个八位字节的最高有效位保持未使用）。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“必需”、“应”、“不应”、“应”、“不应”、“建议”、“可”和“可选”应按照[RFC2119]中所述进行解释。"
    },
    {
      "indent": 0,
      "text": "3. EdDSA Algorithm",
      "section_title": true,
      "zh-CHS": "3. EdDSA算法"
    },
    {
      "indent": 3,
      "text": "EdDSA is a digital signature system with 11 parameters.",
      "zh-CHS": "EdDSA是一个具有11个参数的数字签名系统。"
    },
    {
      "indent": 3,
      "text": "The generic EdDSA digital signature system with its 11 input parameters is not intended to be implemented directly. Choosing parameters is critical for secure and efficient operation. Instead, you would implement a particular parameter choice for EdDSA (such as",
      "zh-CHS": "具有11个输入参数的通用EdDSA数字签名系统不打算直接实现。选择参数对安全高效运行至关重要。相反，您将为EdDSA实现一个特定的参数选择（例如"
    },
    {
      "indent": 3,
      "text": "Ed25519 or Ed448), sometimes slightly generalized to achieve code reuse to cover Ed25519 and Ed448.",
      "zh-CHS": "Ed25519或Ed448），有时稍微泛化以实现代码重用，从而涵盖Ed25519和Ed448。"
    },
    {
      "indent": 3,
      "text": "Therefore, a precise explanation of the generic EdDSA is thus not particularly useful for implementers. For background and completeness, a succinct description of the generic EdDSA algorithm is given here.",
      "zh-CHS": "因此，对通用EdDSA的精确解释对实现者来说并不特别有用。为了背景和完整性，这里给出了通用EdDSA算法的简洁描述。"
    },
    {
      "indent": 3,
      "text": "The definition of some parameters, such as n and c, may help to explain some steps of the algorithm that are not intuitive.",
      "zh-CHS": "一些参数的定义，如n和c，可能有助于解释算法中一些不直观的步骤。"
    },
    {
      "indent": 3,
      "text": "This description closely follows [EDDSA2].",
      "zh-CHS": "此描述紧跟[EDDSA2]。"
    },
    {
      "indent": 3,
      "text": "EdDSA has 11 parameters:",
      "zh-CHS": "EdDSA有11个参数："
    },
    {
      "indent": 3,
      "text": "1. An odd prime power p. EdDSA uses an elliptic curve over the finite field GF(p).",
      "zh-CHS": "1. 奇素数幂p。EdDSA使用有限域GF（p）上的椭圆曲线。"
    },
    {
      "indent": 3,
      "text": "2. An integer b with 2^(b-1) > p. EdDSA public keys have exactly b bits, and EdDSA signatures have exactly 2*b bits. b is recommended to be a multiple of 8, so public key and signature lengths are an integral number of octets.",
      "zh-CHS": "2. 一个2^（b-1）>p的整数b。EdDSA公钥正好有b位，EdDSA签名正好有2*b位。建议b是8的倍数，因此公钥和签名长度是八位字节的整数。"
    },
    {
      "indent": 3,
      "text": "3. A (b-1)-bit encoding of elements of the finite field GF(p).",
      "zh-CHS": "3. 有限域GF（p）元素的A（b-1）-位编码。"
    },
    {
      "indent": 3,
      "text": "4. A cryptographic hash function H producing 2*b-bit output. Conservative hash functions (i.e., hash functions where it is infeasible to create collisions) are recommended and do not have much impact on the total cost of EdDSA.",
      "zh-CHS": "4. 产生2*b位输出的加密哈希函数H。建议使用保守的散列函数（即不可能创建冲突的散列函数），并且对EdDSA的总成本没有太大影响。"
    },
    {
      "indent": 3,
      "text": "5. An integer c that is 2 or 3. Secret EdDSA scalars are multiples of 2^c. The integer c is the base-2 logarithm of the so-called cofactor.",
      "zh-CHS": "5. 2或3的整数c。秘密EdDSA标量是2^c的倍数。整数c是所谓余因子的以2为底的对数。"
    },
    {
      "indent": 3,
      "text": "6. An integer n with c <= n < b. Secret EdDSA scalars have exactly n + 1 bits, with the top bit (the 2^n position) always set and the bottom c bits always cleared.",
      "zh-CHS": "6. c<=n<b的整数n。秘密EdDSA标量正好有n+1位，顶部位（2^n位置）始终设置，底部c位始终清除。"
    },
    {
      "indent": 3,
      "text": "7. A non-square element d of GF(p). The usual recommendation is to take it as the value nearest to zero that gives an acceptable curve.",
      "zh-CHS": "7. GF（p）的非平方元d。通常的建议是将其视为最接近零的值，以给出可接受的曲线。"
    },
    {
      "indent": 3,
      "text": "8. A non-zero square element a of GF(p). The usual recommendation for best performance is a = -1 if p mod 4 = 1, and a = 1 if p mod 4 = 3.",
      "zh-CHS": "8. GF（p）的非零平方元A。对于最佳性能，通常的建议是：如果p mod 4=1，则a=-1；如果p mod 4=3，则a=1。"
    },
    {
      "indent": 3,
      "text": "9. An element B != (0,1) of the set E = { (x,y) is a member of GF(p) x GF(p) such that a * x^2 + y^2 = 1 + d * x^2 * y^2 }.",
      "zh-CHS": "9. 元素B！=集合E={（x，y）的（0,1）是GF（p）xgf（p）的一个成员，使得a*x^2+y^2=1+d*x^2*y^2}。"
    },
    {
      "indent": 3,
      "text": "10. An odd prime L such that [L]B = 0 and 2^c * L = #E. The number #E (the number of points on the curve) is part of the standard data provided for an elliptic curve E, or it can be computed as cofactor * order.",
      "zh-CHS": "10. 一种奇数素数L，使得[L]B=0，2^c*L=#E。数#E（曲线上的点数）是为椭圆曲线E提供的标准数据的一部分，或者可以计算为余因子*阶。"
    },
    {
      "indent": 3,
      "text": "11. A \"prehash\" function PH. PureEdDSA means EdDSA where PH is the identity function, i.e., PH(M) = M. HashEdDSA means EdDSA where PH generates a short output, no matter how long the message is; for example, PH(M) = SHA-512(M).",
      "zh-CHS": "11. “预灰化”函数PH.PureEdDSA表示EdDSA，其中PH是标识函数，即PH（M）=M。HashEdDSA表示EdDSA，其中PH生成短输出，无论消息有多长；例如，PH（M）=SHA-512（M）。"
    },
    {
      "indent": 3,
      "text": "Points on the curve form a group under addition, (x3, y3) = (x1, y1)\n+ (x2, y2), with the formulas",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "          x1 * y2 + x2 * y1                y1 * y2 - a * x1 * x2\nx3 = --------------------------,   y3 = ---------------------------\n      1 + d * x1 * x2 * y1 * y2          1 - d * x1 * x2 * y1 * y2",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "The neutral element in the group is (0,1).",
      "zh-CHS": "组中的中性元素为（0,1）。"
    },
    {
      "indent": 3,
      "text": "Unlike many other curves used for cryptographic applications, these formulas are \"complete\"; they are valid for all points on the curve, with no exceptions. In particular, the denominators are non-zero for all input points.",
      "zh-CHS": "与用于加密应用的许多其他曲线不同，这些公式是“完整的”；它们对曲线上的所有点都有效，没有例外。特别是，所有输入点的分母都不是零。"
    },
    {
      "indent": 3,
      "text": "There are more efficient formulas, which are still complete, that use homogeneous coordinates to avoid the expensive modulo p inversions. See [Faster-ECC] and [Edwards-revisited].",
      "zh-CHS": "还有一些更有效的公式仍然是完整的，它们使用齐次坐标来避免昂贵的模p反演。请参阅[更快的ECC]和[重新访问爱德华兹]。"
    },
    {
      "indent": 0,
      "text": "3.1. Encoding",
      "section_title": true,
      "zh-CHS": "3.1. 编码"
    },
    {
      "indent": 3,
      "text": "An integer 0 < S < L - 1 is encoded in little-endian form as a b-bit string ENC(S).",
      "zh-CHS": "整数0<S<L-1以小端形式编码为b位字符串ENC（S）。"
    },
    {
      "indent": 3,
      "text": "An element (x,y) of E is encoded as a b-bit string called ENC(x,y), which is the (b-1)-bit encoding of y concatenated with one bit that is 1 if x is negative and 0 if x is not negative.",
      "zh-CHS": "E的一个元素（x，y）被编码为一个称为ENC（x，y）的b位字符串，它是y的（b-1）位编码，与一个位连接，如果x为负，则该位为1；如果x为非负，则该位为0。"
    },
    {
      "indent": 3,
      "text": "The encoding of GF(p) is used to define \"negative\" elements of GF(p): specifically, x is negative if the (b-1)-bit encoding of x is lexicographically larger than the (b-1)-bit encoding of -x.",
      "zh-CHS": "GF（p）的编码用于定义GF（p）的“负”元素：具体地说，如果x的（b-1）位编码在词典学上大于-x的（b-1）位编码，那么x是负的。"
    },
    {
      "indent": 0,
      "text": "3.2. Keys",
      "section_title": true,
      "zh-CHS": "3.2. 钥匙"
    },
    {
      "indent": 3,
      "text": "An EdDSA private key is a b-bit string k.  Let the hash H(k) =\n(h_0, h_1, ..., h_(2b-1)) determine an integer s, which is 2^n plus\nthe sum of m = 2^i * h_i for all integer i, c <= i < n.  Let s\ndetermine the multiple A = [s]B.  The EdDSA public key is ENC(A).\nThe bits h_b, ..., h_(2b-1) are used below during signing.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "3.3. Sign",
      "section_title": true,
      "zh-CHS": "3.3. 签名"
    },
    {
      "indent": 3,
      "text": "The EdDSA signature of a message M under a private key k is defined as the PureEdDSA signature of PH(M). In other words, EdDSA simply uses PureEdDSA to sign PH(M).",
      "zh-CHS": "私钥k下消息M的EdDSA签名被定义为PH（M）的PureEdDSA签名。换句话说，EdDSA只是使用PureEdDSA来表示PH（M）。"
    },
    {
      "indent": 3,
      "text": "The PureEdDSA signature of a message M under a private key k is the\n2*b-bit string ENC(R) || ENC(S).  R and S are derived as follows.\nFirst define r = H(h_b || ... || h_(2b-1) || M) interpreting 2*b-bit\nstrings in little-endian form as integers in {0, 1, ..., 2^(2*b) -\n1}.  Let R = [r]B and S = (r + H(ENC(R) || ENC(A) || PH(M)) * s) mod\nL.  The s used here is from the previous section.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "3.4. Verify",
      "section_title": true,
      "zh-CHS": "3.4. 验证"
    },
    {
      "indent": 3,
      "text": "To verify a PureEdDSA signature ENC(R) || ENC(S) on a message M under a public key ENC(A), proceed as follows. Parse the inputs so that A and R are elements of E, and S is a member of the set {0, 1, ..., L-1}. Compute h = H(ENC(R) || ENC(A) || M), and check the group equation [2^c * S] B = 2^c * R + [2^c * h] A in E. The signature is rejected if parsing fails (including S being out of range) or if the group equation does not hold.",
      "zh-CHS": "要验证公钥ENC（a）下消息M上的PureEdDSA签名ENC（R）| | ENC（S），请执行以下操作。解析输入，使A和R是E的元素，S是集合{0，1，…，L-1}的成员。计算h=h（ENC（R）| | ENC（A）| | | M），并检查E中的组方程[2^c*S]B=2^c*R+[2^c*h]A。如果解析失败（包括S超出范围）或组方程不成立，则拒绝签名。"
    },
    {
      "indent": 3,
      "text": "EdDSA verification for a message M is defined as PureEdDSA verification for PH(M).",
      "zh-CHS": "消息M的EdDSA验证定义为PH（M）的PureEdDSA验证。"
    },
    {
      "indent": 0,
      "text": "4. PureEdDSA, HashEdDSA, and Naming",
      "section_title": true,
      "zh-CHS": "4. pureddsa、hashedsa和命名"
    },
    {
      "indent": 3,
      "text": "One of the parameters of the EdDSA algorithm is the \"prehash\" function. This may be the identity function, resulting in an algorithm called PureEdDSA, or a collision-resistant hash function such as SHA-512, resulting in an algorithm called HashEdDSA.",
      "zh-CHS": "EdDSA算法的参数之一是“预灰分”函数。这可能是identity函数，生成一个名为pureddsa的算法，或者是抗冲突哈希函数（如SHA-512），生成一个名为HashEdDSA的算法。"
    },
    {
      "indent": 3,
      "text": "Choosing which variant to use depends on which property is deemed to be more important between 1) collision resilience and 2) a single-pass interface for creating signatures. The collision resilience property means EdDSA is secure even if it is feasible to compute collisions for the hash function. The single-pass interface property means that only one pass over the input message is required to create a signature. PureEdDSA requires two passes over the input. Many existing APIs, protocols, and environments assume digital signature algorithms only need one pass over the input and may have API or bandwidth concerns supporting anything else.",
      "zh-CHS": "选择使用哪种变体取决于在1）冲突恢复能力和2）用于创建签名的单通道接口之间，哪个属性被认为更重要。冲突弹性属性意味着即使可以为哈希函数计算冲突，EdDSA也是安全的。single pass interface属性意味着创建签名只需要对输入消息进行一次传递。PureEdDSA需要对输入进行两次传递。许多现有的API、协议和环境都假设数字签名算法只需要对输入进行一次传递，并且可能需要API或带宽问题来支持其他任何内容。"
    },
    {
      "indent": 3,
      "text": "Note that single-pass verification is not possible with most uses of signatures, no matter which signature algorithm is chosen. This is because most of the time, one can't process the message until the signature is validated, which needs a pass on the entire message.",
      "zh-CHS": "请注意，无论选择哪种签名算法，在大多数签名使用情况下，单次通过验证都是不可能的。这是因为在大多数情况下，只有验证签名才能处理消息，签名需要传递整个消息。"
    },
    {
      "indent": 3,
      "text": "This document specifies parameters resulting in the HashEdDSA variants Ed25519ph and Ed448ph and the PureEdDSA variants Ed25519 and Ed448.",
      "zh-CHS": "本文档指定了导致HashEdDSA变体Ed25519ph和Ed448ph以及PureEdDSA变体Ed25519和Ed448的参数。"
    },
    {
      "indent": 0,
      "text": "5. EdDSA Instances",
      "section_title": true,
      "zh-CHS": "5. EdDSA实例"
    },
    {
      "indent": 3,
      "text": "This section instantiates the general EdDSA algorithm for the edwards25519 and edwards448 curves, each for the PureEdDSA and HashEdDSA variants (plus a contextualized extension of the Ed25519 scheme). Thus, five different parameter sets are described.",
      "zh-CHS": "This section instantiates the general EdDSA algorithm for the edwards25519 and edwards448 curves, each for the PureEdDSA and HashEdDSA variants (plus a contextualized extension of the Ed25519 scheme). Thus, five different parameter sets are described.translate error, please retry"
    },
    {
      "indent": 0,
      "text": "5.1. Ed25519ph, Ed25519ctx, and Ed25519",
      "section_title": true,
      "zh-CHS": "5.1. Ed25519ph、Ed25519ctx和Ed25519"
    },
    {
      "indent": 3,
      "text": "Ed25519 is EdDSA instantiated with:",
      "zh-CHS": "Ed25519是EdDSA的一个实例："
    },
    {
      "indent": 3,
      "text": "+-----------+-------------------------------------------------------+\n| Parameter | Value                                                 |\n+-----------+-------------------------------------------------------+\n|     p     | p of edwards25519 in [RFC7748] (i.e., 2^255 - 19)     |\n|     b     | 256                                                   |\n|  encoding | 255-bit little-endian encoding of {0, 1, ..., p-1}    |\n|  of GF(p) |                                                       |\n|    H(x)   | SHA-512(dom2(phflag,context)||x) [RFC6234]            |\n|     c     | base 2 logarithm of cofactor of edwards25519 in       |\n|           | [RFC7748] (i.e., 3)                                   |\n|     n     | 254                                                   |\n|     d     | d of edwards25519 in [RFC7748] (i.e., -121665/121666  |\n|           | = 370957059346694393431380835087545651895421138798432 |\n|           | 19016388785533085940283555)                           |\n|     a     | -1                                                    |\n|     B     | (X(P),Y(P)) of edwards25519 in [RFC7748] (i.e., (1511 |\n|           | 22213495354007725011514095885315114540126930418572060 |\n|           | 46113283949847762202, 4631683569492647816942839400347 |\n|           | 5163141307993866256225615783033603165251855960))      |\n|     L     | order of edwards25519 in [RFC7748] (i.e.,             |\n|           | 2^252+27742317777372353535851937790883648493).        |\n|   PH(x)   | x (i.e., the identity function)                       |\n+-----------+-------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 22,
      "text": "Table 1: Parameters of Ed25519",
      "zh-CHS": "表1:Ed25519的参数"
    },
    {
      "indent": 3,
      "text": "For Ed25519, dom2(f,c) is the empty string. The phflag value is irrelevant. The context (if present at all) MUST be empty. This causes the scheme to be one and the same with the Ed25519 scheme published earlier.",
      "zh-CHS": "对于Ed25519，dom2（f，c）是空字符串。phflag值是不相关的。上下文（如果存在）必须为空。这导致该方案与先前发布的Ed25519方案相同。"
    },
    {
      "indent": 3,
      "text": "For Ed25519ctx, phflag=0. The context input SHOULD NOT be empty.",
      "zh-CHS": "对于Ed25519ctx，phflag=0。上下文输入不应为空。"
    },
    {
      "indent": 3,
      "text": "For Ed25519ph, phflag=1 and PH is SHA512 instead. That is, the input is hashed using SHA-512 before signing with Ed25519.",
      "zh-CHS": "对于Ed25519ph，phflag=1，而PH为SHA512。也就是说，在使用Ed25519签名之前，使用SHA-512对输入进行哈希处理。"
    },
    {
      "indent": 3,
      "text": "Value of context is set by the signer and verifier (maximum of 255 octets; the default is empty string, except for Ed25519, which can't have context) and has to match octet by octet for verification to be successful.",
      "zh-CHS": "上下文的值由签名者和验证者设置（最多255个八位字节；默认值为空字符串，Ed25519除外，它不能有上下文），并且必须逐八位字节匹配才能成功验证。"
    },
    {
      "indent": 3,
      "text": "The curve used is equivalent to Curve25519 [CURVE25519], under a change of coordinates, which means that the difficulty of the discrete logarithm problem is the same as for Curve25519.",
      "zh-CHS": "在坐标变化的情况下，所使用的曲线相当于曲线25519[曲线25519]，这意味着离散对数问题的难度与曲线25519相同。"
    },
    {
      "indent": 0,
      "text": "5.1.1. Modular Arithmetic",
      "section_title": true,
      "zh-CHS": "5.1.1. 模运算"
    },
    {
      "indent": 3,
      "text": "For advice on how to implement arithmetic modulo p = 2^255 - 19 efficiently and securely, see Curve25519 [CURVE25519]. For inversion modulo p, it is recommended to use the identity x^-1 = x^(p-2) (mod p). Inverting zero should never happen, as it would require invalid input, which would have been detected before, or would be a calculation error.",
      "zh-CHS": "有关如何高效、安全地实现算术模p=2^255-19的建议，请参见Curve25519[Curve25519]。对于模p的反演，建议使用恒等式x^-1=x^（p-2）（mod p）。倒零不应该发生，因为它需要无效的输入，以前可能会检测到，或者是一个计算错误。"
    },
    {
      "indent": 3,
      "text": "For point decoding or \"decompression\", square roots modulo p are needed. They can be computed using the Tonelli-Shanks algorithm or the special case for p = 5 (mod 8). To find a square root of a, first compute the candidate root x = a^((p+3)/8) (mod p). Then there are three cases:",
      "zh-CHS": "对于点解码或“解压缩”，需要平方根模p。可以使用Tonelli-Shanks算法或p=5（mod 8）的特例计算它们。要求a的平方根，首先计算候选根x=a^（（p+3）/8）（mod p）。然后有三种情况："
    },
    {
      "indent": 6,
      "text": "x^2 = a (mod p). Then x is a square root.",
      "zh-CHS": "x^2=a（模数p）。那么x是平方根。"
    },
    {
      "indent": 6,
      "text": "x^2 = -a (mod p). Then 2^((p-1)/4) * x is a square root.",
      "zh-CHS": "x^2=-a（mod p）。那么2^（（p-1）/4）*x是平方根。"
    },
    {
      "indent": 6,
      "text": "a is not a square modulo p.",
      "zh-CHS": "a不是p的平方模。"
    },
    {
      "indent": 0,
      "text": "5.1.2. Encoding",
      "section_title": true,
      "zh-CHS": "5.1.2. 编码"
    },
    {
      "indent": 3,
      "text": "All values are coded as octet strings, and integers are coded using little-endian convention, i.e., a 32-octet string h h[0],...h[31] represents the integer h[0] + 2^8 * h[1] + ... + 2^248 * h[31].",
      "zh-CHS": "所有值都编码为八位字符串，而整数则使用小尾端约定进行编码，即32位八位字符串h[0]，…h[31]表示整数h[0]+2^8*h[1]+…+2^248*h[31]。"
    },
    {
      "indent": 3,
      "text": "A curve point (x,y), with coordinates in the range 0 <= x,y < p, is coded as follows. First, encode the y-coordinate as a little-endian string of 32 octets. The most significant bit of the final octet is always zero. To form the encoding of the point, copy the least significant bit of the x-coordinate to the most significant bit of the final octet.",
      "zh-CHS": "坐标范围为0<=x，y<p的曲线点（x，y）编码如下。首先，将y坐标编码为32个八位字节的小端字符串。最后八位字节的最高有效位始终为零。要形成点的编码，请将x坐标的最低有效位复制到最后八位字节的最高有效位。"
    },
    {
      "indent": 0,
      "text": "5.1.3. Decoding",
      "section_title": true,
      "zh-CHS": "5.1.3. 解码"
    },
    {
      "indent": 3,
      "text": "Decoding a point, given as a 32-octet string, is a little more complicated.",
      "zh-CHS": "解码一个以32个八位组字符串形式给出的点稍微复杂一些。"
    },
    {
      "indent": 3,
      "text": "1. First, interpret the string as an integer in little-endian representation. Bit 255 of this number is the least significant bit of the x-coordinate and denote this value x_0. The y-coordinate is recovered simply by clearing this bit. If the resulting value is >= p, decoding fails.",
      "zh-CHS": "1. 首先，将字符串解释为小端点表示法中的整数。该数字的第255位是x坐标的最低有效位，表示该值x_0。只需清除该位即可恢复y坐标。如果结果值>=p，则解码失败。"
    },
    {
      "indent": 3,
      "text": "2. To recover the x-coordinate, the curve equation implies x^2 = (y^2 - 1) / (d y^2 + 1) (mod p). The denominator is always non-zero mod p. Let u = y^2 - 1 and v = d y^2 + 1. To compute the square root of (u/v), the first step is to compute the candidate root x = (u/v)^((p+3)/8). This can be done with the following trick, using a single modular powering for both the inversion of v and the square root:",
      "zh-CHS": "2. 为了恢复x坐标，曲线方程暗示x^2=（y^2-1）/（dy^2+1）（mod p）。分母总是非零mod p。设u=y^2-1，v=dy^2+1。要计算（u/v）的平方根，第一步是计算候选根x=（u/v）^（（p+3）/8）。这可以通过以下技巧来实现，使用单个模块供电来反转v和平方根："
    },
    {
      "indent": 17,
      "text": "         (p+3)/8      3        (p-5)/8\nx = (u/v)        = u v  (u v^7)         (mod p)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "3. Again, there are three cases:",
      "zh-CHS": "3. 同样，有三种情况："
    },
    {
      "indent": 7,
      "text": "1. If v x^2 = u (mod p), x is a square root.",
      "zh-CHS": "1. 如果vx^2=u（mod p），x是平方根。"
    },
    {
      "indent": 7,
      "text": "2. If v x^2 = -u (mod p), set x <-- x * 2^((p-1)/4), which is a square root.",
      "zh-CHS": "2. 如果vx^2=-u（mod p），则设置x<--x*2^（（p-1）/4），这是一个平方根。"
    },
    {
      "indent": 7,
      "text": "3. Otherwise, no square root exists for modulo p, and decoding fails.",
      "zh-CHS": "3. 否则，模p不存在平方根，解码失败。"
    },
    {
      "indent": 3,
      "text": "4. Finally, use the x_0 bit to select the right square root. If x = 0, and x_0 = 1, decoding fails. Otherwise, if x_0 != x mod 2, set x <-- p - x. Return the decoded point (x,y).",
      "zh-CHS": "4. 最后，使用x_0位选择右平方根。如果x=0，且x_0=1，则解码失败。否则，如果x_0！=x模块2，设置x<--p-x。返回解码点（x，y）。"
    },
    {
      "indent": 0,
      "text": "5.1.4. Point Addition",
      "section_title": true,
      "zh-CHS": "5.1.4. 点加法"
    },
    {
      "indent": 3,
      "text": "For point addition, the following method is recommended. A point (x,y) is represented in extended homogeneous coordinates (X, Y, Z, T), with x = X/Z, y = Y/Z, x * y = T/Z.",
      "zh-CHS": "对于点添加，建议采用以下方法。点（x，y）用扩展齐次坐标（x，y，Z，T）表示，x=x/Z，y=y/Z，x*y=T/Z。"
    },
    {
      "indent": 3,
      "text": "The neutral point is (0,1), or equivalently in extended homogeneous coordinates (0, Z, Z, 0) for any non-zero Z.",
      "zh-CHS": "中性点为（0,1），或者对于任何非零Z，中性点在扩展齐次坐标（0，Z，Z，0）中等效。"
    },
    {
      "indent": 3,
      "text": "The following formulas for adding two points, (x3,y3) = (x1,y1)+(x2,y2), on twisted Edwards curves with a=-1, square a, and non-square d are described in Section 3.1 of [Edwards-revisited] and in [EFD-TWISTED-ADD]. They are complete, i.e., they work for any pair of valid input points.",
      "zh-CHS": "[Edwards再访]第3.1节和[EFD-twisted-ADD]中描述了在a=-1、正方形a和非正方形d的扭曲Edwards曲线上添加两点（x3，y3）=（x1，y1）+（x2，y2）的以下公式。它们是完整的，也就是说，它们适用于任何一对有效的输入点。"
    },
    {
      "indent": 17,
      "text": "A = (Y1-X1)*(Y2-X2)\nB = (Y1+X1)*(Y2+X2)\nC = T1*2*d*T2\nD = Z1*2*Z2\nE = B-A\nF = D-C\nG = D+C\nH = B+A\nX3 = E*F\nY3 = G*H\nT3 = E*H\nZ3 = F*G",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "For point doubling, (x3,y3) = (x1,y1)+(x1,y1), one could just\nsubstitute equal points in the above (because of completeness, such\nsubstitution is valid) and observe that four multiplications turn\ninto squares.  However, using the formulas described in Section 3.2\nof [Edwards-revisited] and in [EFD-TWISTED-DBL] saves a few smaller\noperations.",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 17,
      "text": "A = X1^2\nB = Y1^2\nC = 2*Z1^2\nH = A+B\nE = H-(X1+Y1)^2\nG = A-B\nF = C+G\nX3 = E*F\nY3 = G*H\nT3 = E*H\nZ3 = F*G",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "5.1.5. Key Generation",
      "section_title": true,
      "zh-CHS": "5.1.5. 密钥生成"
    },
    {
      "indent": 3,
      "text": "The private key is 32 octets (256 bits, corresponding to b) of cryptographically secure random data. See [RFC4086] for a discussion about randomness.",
      "zh-CHS": "私钥是加密安全的随机数据的32个八位字节（256位，对应于b）。有关随机性的讨论，请参见[RFC4086]。"
    },
    {
      "indent": 3,
      "text": "The 32-byte public key is generated by the following steps.",
      "zh-CHS": "通过以下步骤生成32字节公钥。"
    },
    {
      "indent": 3,
      "text": "1. Hash the 32-byte private key using SHA-512, storing the digest in a 64-octet large buffer, denoted h. Only the lower 32 bytes are used for generating the public key.",
      "zh-CHS": "1. 使用SHA-512散列32字节私钥，将摘要存储在64个八位字节的大缓冲区中，表示为h。只有较低的32字节用于生成公钥。"
    },
    {
      "indent": 3,
      "text": "2. Prune the buffer: The lowest three bits of the first octet are cleared, the highest bit of the last octet is cleared, and the second highest bit of the last octet is set.",
      "zh-CHS": "2. 删除缓冲区：清除第一个八位字节的最低三位，清除最后一个八位字节的最高位，并设置最后一个八位字节的第二个最高位。"
    },
    {
      "indent": 3,
      "text": "3. Interpret the buffer as the little-endian integer, forming a secret scalar s. Perform a fixed-base scalar multiplication [s]B.",
      "zh-CHS": "3. 将缓冲区解释为小端整数，形成一个秘密标量s。执行固定基标量乘法[s]B。"
    },
    {
      "indent": 3,
      "text": "4. The public key A is the encoding of the point [s]B. First, encode the y-coordinate (in the range 0 <= y < p) as a little-endian string of 32 octets. The most significant bit of the final octet is always zero. To form the encoding of the point [s]B, copy the least significant bit of the x coordinate to the most significant bit of the final octet. The result is the public key.",
      "zh-CHS": "4. 公钥A是点[s]B的编码。首先，将y坐标（范围0<=y<p）编码为32个八位字节的小端字符串。最后八位字节的最高有效位始终为零。要形成点[s]B的编码，请将x坐标的最低有效位复制到最后八位字节的最高有效位。结果是公钥。"
    },
    {
      "indent": 0,
      "text": "5.1.6. Sign",
      "section_title": true,
      "zh-CHS": "5.1.6. 签名"
    },
    {
      "indent": 3,
      "text": "The inputs to the signing procedure is the private key, a 32-octet string, and a message M of arbitrary size. For Ed25519ctx and Ed25519ph, there is additionally a context C of at most 255 octets and a flag F, 0 for Ed25519ctx and 1 for Ed25519ph.",
      "zh-CHS": "签名过程的输入是私钥、32个八位字节字符串和任意大小的消息M。对于Ed25519ctx和Ed25519ph，另外还有最多255个八位字节的上下文C和标志F，0表示Ed25519ctx，1表示Ed25519ph。"
    },
    {
      "indent": 3,
      "text": "1. Hash the private key, 32 octets, using SHA-512. Let h denote the resulting digest. Construct the secret scalar s from the first half of the digest, and the corresponding public key A, as described in the previous section. Let prefix denote the second half of the hash digest, h[32],...,h[63].",
      "zh-CHS": "1. 使用SHA-512散列私钥，32个八位字节。让h表示结果摘要。如前一节所述，从摘要的前半部分构造秘密标量s和相应的公钥A。让前缀表示哈希摘要的后半部分，h[32]，…，h[63]。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHA-512(dom2(F, C) || prefix || PH(M)), where M is the message to be signed. Interpret the 64-octet digest as a little-endian integer r.",
      "zh-CHS": "2. 计算SHA-512（dom2（F，C）|前缀| | PH（M）），其中M是要签名的消息。将64个八位字节摘要解释为一个小的endian整数r。"
    },
    {
      "indent": 3,
      "text": "3. Compute the point [r]B. For efficiency, do this by first reducing r modulo L, the group order of B. Let the string R be the encoding of this point.",
      "zh-CHS": "3. 计算点[r]B。为了提高效率，首先减少r模L，即B的组顺序。让字符串r为该点的编码。"
    },
    {
      "indent": 3,
      "text": "4. Compute SHA512(dom2(F, C) || R || A || PH(M)), and interpret the 64-octet digest as a little-endian integer k.",
      "zh-CHS": "4. 计算SHA512（dom2（F，C）| | R | A | | PH（M）），并将64个八位组摘要解释为一个小的端整数k。"
    },
    {
      "indent": 3,
      "text": "5. Compute S = (r + k * s) mod L. For efficiency, again reduce k modulo L first.",
      "zh-CHS": "5. 计算S=（r+k*S）模L。为了提高效率，再次先降低k模L。"
    },
    {
      "indent": 3,
      "text": "6. Form the signature of the concatenation of R (32 octets) and the little-endian encoding of S (32 octets; the three most significant bits of the final octet are always zero).",
      "zh-CHS": "6. 形成R（32个八位字节）和S（32个八位字节；最后八位字节的三个最高有效位始终为零）的小端编码的串联签名。"
    },
    {
      "indent": 0,
      "text": "5.1.7. Verify",
      "section_title": true,
      "zh-CHS": "5.1.7. 验证"
    },
    {
      "indent": 3,
      "text": "1. To verify a signature on a message M using public key A, with F being 0 for Ed25519ctx, 1 for Ed25519ph, and if Ed25519ctx or Ed25519ph is being used, C being the context, first split the signature into two 32-octet halves. Decode the first half as a point R, and the second half as an integer S, in the range 0 <= s < L. Decode the public key A as point A'. If any of the decodings fail (including S being out of range), the signature is invalid.",
      "zh-CHS": "1. 要使用公钥a验证消息M上的签名，对于Ed25519ctx，F为0；对于Ed25519ph，F为1；如果正在使用Ed25519ctx或Ed25519ph，C为上下文，则首先将签名拆分为两个32八位字节的两半。将前半部分解码为点R，将后半部分解码为整数S，范围为0<=S<L。将公钥a解码为点a'。如果任何解码失败（包括S超出范围），则签名无效。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHA512(dom2(F, C) || R || A || PH(M)), and interpret the 64-octet digest as a little-endian integer k.",
      "zh-CHS": "2. 计算SHA512（dom2（F，C）| | R | A | | PH（M）），并将64个八位组摘要解释为一个小的端整数k。"
    },
    {
      "indent": 3,
      "text": "3. Check the group equation [8][S]B = [8]R + [8][k]A'. It's sufficient, but not required, to instead check [S]B = R + [k]A'.",
      "zh-CHS": "3. 检查组方程[8][S]B=[8]R+[8][k]A'。检查[s]B=R+[k]A'就足够了，但不是必需的。"
    },
    {
      "indent": 0,
      "text": "5.2. Ed448ph and Ed448",
      "section_title": true,
      "zh-CHS": "5.2. Ed448ph和Ed448"
    },
    {
      "indent": 3,
      "text": "Ed448 is EdDSA instantiated with:",
      "zh-CHS": "Ed448是EdDSA的一个实例："
    },
    {
      "indent": 3,
      "text": "+-----------+-------------------------------------------------------+\n| Parameter | Value                                                 |\n+-----------+-------------------------------------------------------+\n|     p     | p of edwards448 in [RFC7748] (i.e., 2^448 - 2^224 -   |\n|           | 1)                                                    |\n|     b     | 456                                                   |\n|  encoding | 455-bit little-endian encoding of {0, 1, ..., p-1}    |\n|  of GF(p) |                                                       |\n|    H(x)   | SHAKE256(dom4(phflag,context)||x, 114)                |\n|   phflag  | 0                                                     |\n|     c     | base 2 logarithm of cofactor of edwards448 in         |\n|           | [RFC7748] (i.e., 2)                                   |\n|     n     | 447                                                   |\n|     d     | d of edwards448 in [RFC7748] (i.e., -39081)           |\n|     a     | 1                                                     |\n|     B     | (X(P),Y(P)) of edwards448 in [RFC7748] (i.e., (224580 |\n|           | 04029592430018760433409989603624678964163256413424612 |\n|           | 54616869504154674060329090291928693579532825780320751 |\n|           | 46446173674602635247710, 2988192100784814926760179304 |\n|           | 43930673437544040154080242095928241372331506189835876 |\n|           | 00353687865541878473398230323350346250053154506283266 |\n|           | 0))                                                   |\n|     L     | order of edwards448 in [RFC7748] (i.e., 2^446 - 13818 |\n|           | 06680989511535200738674851542688033669247488217860989 |\n|           | 4547503885).                                          |\n|   PH(x)   | x (i.e., the identity function)                       |\n+-----------+-------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 23,
      "text": "Table 2: Parameters of Ed448",
      "zh-CHS": "表2:Ed448的参数"
    },
    {
      "indent": 3,
      "text": "Ed448ph is the same but with PH being SHAKE256(x, 64) and phflag being 1, i.e., the input is hashed before signing with Ed448 with a hash constant modified.",
      "zh-CHS": "Ed448ph与之相同，但PH为SHAKE256（x，64），phflag为1，即在使用修改了哈希常数的Ed448签名之前对输入进行哈希处理。"
    },
    {
      "indent": 3,
      "text": "Value of context is set by signer and verifier (maximum of 255 octets; the default is empty string) and has to match octet by octet for verification to be successful.",
      "zh-CHS": "上下文的值由签名者和验证者设置（最多255个八位字节；默认值为空字符串），并且必须逐个八位字节进行匹配才能成功验证。"
    },
    {
      "indent": 3,
      "text": "The curve is equivalent to Ed448-Goldilocks under change of the basepoint, which preserves difficulty of the discrete logarithm.",
      "zh-CHS": "在改变基点的情况下，该曲线相当于Ed448 Goldilock，这保留了离散对数的难度。"
    },
    {
      "indent": 0,
      "text": "5.2.1. Modular Arithmetic",
      "section_title": true,
      "zh-CHS": "5.2.1. 模运算"
    },
    {
      "indent": 3,
      "text": "For advice on how to implement arithmetic modulo p = 2^448 - 2^224 - 1 efficiently and securely, see [ED448]. For inversion modulo p, it is recommended to use the identity x^-1 = x^(p-2) (mod p). Inverting zero should never happen, as it would require invalid input, which would have been detected before, or would be a calculation error.",
      "zh-CHS": "有关如何高效、安全地实现算术模p=2^448-2^224-1的建议，请参阅[ED448]。对于模p的反演，建议使用恒等式x^-1=x^（p-2）（mod p）。倒零不应该发生，因为它需要无效的输入，以前可能会检测到，或者是一个计算错误。"
    },
    {
      "indent": 3,
      "text": "For point decoding or \"decompression\", square roots modulo p are needed. They can be computed by first computing candidate root x = a ^ (p+1)/4 (mod p) and then checking if x^2 = a. If it is, then x is the square root of a; if it isn't, then a does not have a square root.",
      "zh-CHS": "对于点解码或“解压缩”，需要平方根模p。可以通过首先计算候选根x=a^（p+1）/4（mod p），然后检查x^2=a来计算它们。如果是，那么x是a的平方根；如果不是，则a没有平方根。"
    },
    {
      "indent": 0,
      "text": "5.2.2. Encoding",
      "section_title": true,
      "zh-CHS": "5.2.2. 编码"
    },
    {
      "indent": 3,
      "text": "All values are coded as octet strings, and integers are coded using little-endian convention, i.e., a 57-octet string h h[0],...h[56] represents the integer h[0] + 2^8 * h[1] + ... + 2^448 * h[56].",
      "zh-CHS": "所有值都编码为八位字符串，而整数则使用小尾端约定进行编码，即57位八位字符串h[0]，…h[56]表示整数h[0]+2^8*h[1]+…+2^448*h[56]。"
    },
    {
      "indent": 3,
      "text": "A curve point (x,y), with coordinates in the range 0 <= x,y < p, is coded as follows. First, encode the y-coordinate as a little-endian string of 57 octets. The final octet is always zero. To form the encoding of the point, copy the least significant bit of the x-coordinate to the most significant bit of the final octet.",
      "zh-CHS": "坐标范围为0<=x，y<p的曲线点（x，y）编码如下。首先，将y坐标编码为57个八位字节的小端字符串。最后一个八位组总是零。要形成点的编码，请将x坐标的最低有效位复制到最后八位字节的最高有效位。"
    },
    {
      "indent": 0,
      "text": "5.2.3. Decoding",
      "section_title": true,
      "zh-CHS": "5.2.3. 解码"
    },
    {
      "indent": 3,
      "text": "Decoding a point, given as a 57-octet string, is a little more complicated.",
      "zh-CHS": "解码一个以57个八位字节字符串形式给出的点稍微复杂一些。"
    },
    {
      "indent": 3,
      "text": "1. First, interpret the string as an integer in little-endian representation. Bit 455 of this number is the least significant bit of the x-coordinate, and denote this value x_0. The y-coordinate is recovered simply by clearing this bit. If the resulting value is >= p, decoding fails.",
      "zh-CHS": "1. 首先，将字符串解释为小端点表示法中的整数。该数字的第455位是x坐标的最低有效位，表示该值x_0。只需清除该位即可恢复y坐标。如果结果值>=p，则解码失败。"
    },
    {
      "indent": 3,
      "text": "2. To recover the x-coordinate, the curve equation implies x^2 = (y^2 - 1) / (d y^2 - 1) (mod p). The denominator is always non-zero mod p. Let u = y^2 - 1 and v = d y^2 - 1. To compute the square root of (u/v), the first step is to compute the candidate root x = (u/v)^((p+1)/4). This can be done using the following trick, to use a single modular powering for both the inversion of v and the square root:",
      "zh-CHS": "2. 为了恢复x坐标，曲线方程暗示x^2=（y^2-1）/（dy^2-1）（mod p）。分母总是非零mod p。设u=y^2-1，v=dy^2-1。要计算（u/v）的平方根，第一步是计算候选根x=（u/v）^（（p+1）/4）。这可以使用以下技巧完成，即使用单个模块供电进行v和平方根的反转："
    },
    {
      "indent": 17,
      "text": "         (p+1)/4    3            (p-3)/4\nx = (u/v)        = u  v (u^5 v^3)         (mod p)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "3. If v * x^2 = u, the recovered x-coordinate is x. Otherwise, no square root exists, and the decoding fails.",
      "zh-CHS": "3. 如果v*x^2=u，则恢复的x坐标为x。否则，不存在平方根，解码失败。"
    },
    {
      "indent": 3,
      "text": "4. Finally, use the x_0 bit to select the right square root. If x = 0, and x_0 = 1, decoding fails. Otherwise, if x_0 != x mod 2, set x <-- p - x. Return the decoded point (x,y).",
      "zh-CHS": "4. 最后，使用x_0位选择右平方根。如果x=0，且x_0=1，则解码失败。否则，如果x_0！=x模块2，设置x<--p-x。返回解码点（x，y）。"
    },
    {
      "indent": 0,
      "text": "5.2.4. Point Addition",
      "section_title": true,
      "zh-CHS": "5.2.4. 点加法"
    },
    {
      "indent": 3,
      "text": "For point addition, the following method is recommended. A point (x,y) is represented in projective coordinates (X, Y, Z), with x = X/Z, y = Y/Z.",
      "zh-CHS": "对于点添加，建议采用以下方法。点（x，y）用射影坐标（x，y，Z）表示，x=x/Z，y=y/Z。"
    },
    {
      "indent": 3,
      "text": "The neutral point is (0,1), or equivalently in projective coordinates (0, Z, Z) for any non-zero Z.",
      "zh-CHS": "中性点为（0,1），或对于任何非零Z，在投影坐标（0，Z，Z）中等效。"
    },
    {
      "indent": 3,
      "text": "The following formulas for adding two points, (x3,y3) = (x1,y1)+(x2,y2) on untwisted Edwards curve (i.e., a=1) with non-square d, are described in Section 4 of [Faster-ECC] and in [EFD-ADD]. They are complete, i.e., they work for any pair of valid input points.",
      "zh-CHS": "[Faster ECC]第4节和[EFD-ADD]中描述了在非平方d的无扭曲爱德华兹曲线（即a=1）上添加两点（x3，y3）=（x1，y1）+（x2，y2）的以下公式。它们是完整的，也就是说，它们适用于任何一对有效的输入点。"
    },
    {
      "indent": 17,
      "text": "A = Z1*Z2\nB = A^2\nC = X1*X2\nD = Y1*Y2\nE = d*C*D\nF = B-E\nG = B+E\nH = (X1+Y1)*(X2+Y2)\nX3 = A*F*(H-C-D)\nY3 = A*G*(D-C)\nZ3 = F*G",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Again, similar to the other curve, doubling formulas can be obtained by substituting equal points, turning four multiplications into squares. However, this is not even nearly optimal; the following formulas described in Section 4 of [Faster-ECC] and in [EFD-DBL] save multiple multiplications.",
      "zh-CHS": "同样，与另一条曲线类似，通过替换相等的点，将四次乘法转换为正方形，可以得到倍增公式。然而，这甚至不是最理想的；[Faster ECC]第4节和[EFD-DBL]中描述的以下公式可保存多次乘法。"
    },
    {
      "indent": 17,
      "text": "B = (X1+Y1)^2\nC = X1^2\nD = Y1^2\nE = C+D\nH = Z1^2\nJ = E-2*H\nX3 = (B-E)*J\nY3 = E*(C-D)\nZ3 = E*J",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "5.2.5. Key Generation",
      "section_title": true,
      "zh-CHS": "5.2.5. 密钥生成"
    },
    {
      "indent": 3,
      "text": "The private key is 57 octets (456 bits, corresponding to b) of cryptographically secure random data. See [RFC4086] for a discussion about randomness.",
      "zh-CHS": "私钥是加密安全的随机数据的57个八位字节（456位，对应于b）。有关随机性的讨论，请参见[RFC4086]。"
    },
    {
      "indent": 3,
      "text": "The 57-byte public key is generated by the following steps:",
      "zh-CHS": "通过以下步骤生成57字节的公钥："
    },
    {
      "indent": 3,
      "text": "1. Hash the 57-byte private key using SHAKE256(x, 114), storing the digest in a 114-octet large buffer, denoted h. Only the lower 57 bytes are used for generating the public key.",
      "zh-CHS": "1. 使用SHAKE256（x，114）散列57字节的私钥，将摘要存储在114个八位字节的大缓冲区中，表示为h。只有较低的57字节用于生成公钥。"
    },
    {
      "indent": 3,
      "text": "2. Prune the buffer: The two least significant bits of the first octet are cleared, all eight bits the last octet are cleared, and the highest bit of the second to last octet is set.",
      "zh-CHS": "2. 删减缓冲区：清除第一个八位字节的两个最低有效位，清除最后一个八位字节的所有八位，并设置第二个到最后一个八位字节的最高位。"
    },
    {
      "indent": 3,
      "text": "3. Interpret the buffer as the little-endian integer, forming a secret scalar s. Perform a known-base-point scalar multiplication [s]B.",
      "zh-CHS": "3. 将缓冲区解释为小端整数，形成一个秘密标量s。执行已知的基点标量乘法[s]B。"
    },
    {
      "indent": 3,
      "text": "4. The public key A is the encoding of the point [s]B. First encode the y-coordinate (in the range 0 <= y < p) as a little-endian string of 57 octets. The most significant bit of the final octet is always zero. To form the encoding of the point [s]B, copy the least significant bit of the x coordinate to the most significant bit of the final octet. The result is the public key.",
      "zh-CHS": "4. 公钥A是点[s]B的编码。首先将y坐标（范围0<=y<p）编码为57个八位字节的小端字符串。最后八位字节的最高有效位始终为零。要形成点[s]B的编码，请将x坐标的最低有效位复制到最后八位字节的最高有效位。结果是公钥。"
    },
    {
      "indent": 0,
      "text": "5.2.6. Sign",
      "section_title": true,
      "zh-CHS": "5.2.6. 签名"
    },
    {
      "indent": 3,
      "text": "The inputs to the signing procedure is the private key, a 57-octet string, a flag F, which is 0 for Ed448, 1 for Ed448ph, context C of at most 255 octets, and a message M of arbitrary size.",
      "zh-CHS": "签名过程的输入为私钥、57个八位字节字符串、标志F（对于Ed448为0）、1（对于Ed448ph）、最多255个八位字节的上下文C以及任意大小的消息M。"
    },
    {
      "indent": 3,
      "text": "1. Hash the private key, 57 octets, using SHAKE256(x, 114). Let h denote the resulting digest. Construct the secret scalar s from the first half of the digest, and the corresponding public key A, as described in the previous section. Let prefix denote the second half of the hash digest, h[57],...,h[113].",
      "zh-CHS": "1. 使用SHAKE256（x，114）散列私钥57个八位字节。让h表示结果摘要。如前一节所述，从摘要的前半部分构造秘密标量s和相应的公钥A。让前缀表示哈希摘要的后半部分，h[57]，…，h[113]。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHAKE256(dom4(F, C) || prefix || PH(M), 114), where M is the message to be signed, F is 1 for Ed448ph, 0 for Ed448, and C is the context to use. Interpret the 114-octet digest as a little-endian integer r.",
      "zh-CHS": "2. 计算SHAKE256（dom4（F，C）|前缀| PH（M），114），其中M是要签名的消息，F是1表示Ed448ph，0表示Ed448，C是要使用的上下文。将114个八位字节摘要解释为一个小的endian整数r。"
    },
    {
      "indent": 3,
      "text": "3. Compute the point [r]B. For efficiency, do this by first reducing r modulo L, the group order of B. Let the string R be the encoding of this point.",
      "zh-CHS": "3. 计算点[r]B。为了提高效率，首先减少r模L，即B的组顺序。让字符串r为该点的编码。"
    },
    {
      "indent": 3,
      "text": "4. Compute SHAKE256(dom4(F, C) || R || A || PH(M), 114), and interpret the 114-octet digest as a little-endian integer k.",
      "zh-CHS": "4. 计算SHAKE256（dom4（F，C）| | R | | A | | PH（M），114），并将114个八位组摘要解释为一个小的endian整数k。"
    },
    {
      "indent": 3,
      "text": "5. Compute S = (r + k * s) mod L. For efficiency, again reduce k modulo L first.",
      "zh-CHS": "5. 计算S=（r+k*S）模L。为了提高效率，再次先降低k模L。"
    },
    {
      "indent": 3,
      "text": "6. Form the signature of the concatenation of R (57 octets) and the little-endian encoding of S (57 octets; the ten most significant bits of the final octets are always zero).",
      "zh-CHS": "6. 形成R（57个八位字节）和S（57个八位字节；最后八位字节的十个最高有效位始终为零）的级联签名。"
    },
    {
      "indent": 0,
      "text": "5.2.7. Verify",
      "section_title": true,
      "zh-CHS": "5.2.7. 验证"
    },
    {
      "indent": 3,
      "text": "1. To verify a signature on a message M using context C and public key A, with F being 0 for Ed448 and 1 for Ed448ph, first split the signature into two 57-octet halves. Decode the first half as a point R, and the second half as an integer S, in the range 0 <= s < L. Decode the public key A as point A'. If any of the decodings fail (including S being out of range), the signature is invalid.",
      "zh-CHS": "1. 要使用上下文C和公钥a验证消息M上的签名，对于Ed448，F为0，对于Ed448ph，F为1，首先将签名拆分为两个57个八位组的两半。将前半部分解码为点R，将后半部分解码为整数S，范围为0<=S<L。将公钥a解码为点a'。如果任何解码失败（包括S超出范围），则签名无效。"
    },
    {
      "indent": 3,
      "text": "2. Compute SHAKE256(dom4(F, C) || R || A || PH(M), 114), and interpret the 114-octet digest as a little-endian integer k.",
      "zh-CHS": "2. 计算SHAKE256（dom4（F，C）| | R | | A | | PH（M），114），并将114个八位组摘要解释为一个小的endian整数k。"
    },
    {
      "indent": 3,
      "text": "3. Check the group equation [4][S]B = [4]R + [4][k]A'. It's sufficient, but not required, to instead check [S]B = R + [k]A'.",
      "zh-CHS": "3. 检查组方程[4][S]B=[4]R+[4][k]A'。检查[s]B=R+[k]A'就足够了，但不是必需的。"
    },
    {
      "indent": 0,
      "text": "6. Ed25519 Python Illustration",
      "section_title": true,
      "zh-CHS": "6. Ed25519 Python插图"
    },
    {
      "indent": 3,
      "text": "The rest of this section describes how Ed25519 can be implemented in Python (version 3.2 or later) for illustration. See Appendix A for the complete implementation and Appendix B for a test-driver to run it through some test vectors.",
      "zh-CHS": "本节其余部分将介绍如何在Python（3.2版或更高版本）中实现Ed25519，以供说明。完整的实现见附录A，通过一些测试向量运行测试驱动程序见附录B。"
    },
    {
      "indent": 3,
      "text": "Note that this code is not intended for production as it is not proven to be correct for all inputs, nor does it protect against side-channel attacks. The purpose is to illustrate the algorithm to help implementers with their own implementation.",
      "zh-CHS": "请注意，此代码不适用于生产，因为它不能证明对所有输入都正确，也不能防止侧通道攻击。目的是说明该算法，以帮助实现者自己实现。"
    },
    {
      "indent": 0,
      "text": "## First, some preliminaries that will be needed.",
      "zh-CHS": "##首先，需要做一些准备工作。"
    },
    {
      "indent": 0,
      "text": "import hashlib",
      "zh-CHS": "导入hashlib"
    },
    {
      "indent": 0,
      "text": "def sha512(s):\n    return hashlib.sha512(s).digest()",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Base field Z_p\np = 2**255 - 19",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def modp_inv(x): return pow(x, p-2, p)",
      "zh-CHS": "def modp_inv（x）：返回功率（x，p-2，p）"
    },
    {
      "indent": 0,
      "text": "# Curve constant\nd = -121665 * modp_inv(121666) % p",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Group order\nq = 2**252 + 27742317777372353535851937790883648493",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def sha512_modq(s):\n    return int.from_bytes(sha512(s), \"little\") % q",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "## Then follows functions to perform point operations.",
      "zh-CHS": "##然后按照函数执行点操作。"
    },
    {
      "indent": 0,
      "text": "# Points are represented as tuples (X, Y, Z, T) of extended\n# coordinates, with x = X/Z, y = Y/Z, x*y = T/Z",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def point_add(P, Q):\n    A, B = (P[1]-P[0]) * (Q[1]-Q[0]) % p, (P[1]+P[0]) * (Q[1]+Q[0]) % p;\n    C, D = 2 * P[3] * Q[3] * d % p, 2 * P[2] * Q[2] % p;\n    E, F, G, H = B-A, D-C, D+C, B+A;\n    return (E*F, G*H, F*G, E*H);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Computes Q = s * Q\ndef point_mul(s, P):\n    Q = (0, 1, 1, 0)  # Neutral element\n    while s > 0:\n        if s & 1:\n            Q = point_add(Q, P)\n        P = point_add(P, P)\n        s >>= 1\n    return Q",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def point_equal(P, Q):\n    # x1 / z1 == x2 / z2  <==>  x1 * z2 == x2 * z1\n    if (P[0] * Q[2] - Q[0] * P[2]) % p != 0:\n        return False\n    if (P[1] * Q[2] - Q[1] * P[2]) % p != 0:\n        return False\n    return True",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "## Now follows functions for point compression.",
      "zh-CHS": "##下面介绍点压缩的函数。"
    },
    {
      "indent": 0,
      "text": "# Square root of -1\nmodp_sqrt_m1 = pow(2, (p-1) // 4, p)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Compute corresponding x-coordinate, with low bit corresponding to\n# sign, or return None on failure\ndef recover_x(y, sign):\n    if y >= p:\n        return None\n    x2 = (y*y-1) * modp_inv(d*y*y+1)\n    if x2 == 0:\n        if sign:\n            return None\n        else:\n            return 0",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "# Compute square root of x2\nx = pow(x2, (p+3) // 8, p)\nif (x*x - x2) % p != 0:\n    x = x * modp_sqrt_m1 % p\nif (x*x - x2) % p != 0:\n    return None",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "if (x & 1) != sign:\n    x = p - x\nreturn x",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Base point\ng_y = 4 * modp_inv(5) % p\ng_x = recover_x(g_y, 0)\nG = (g_x, g_y, 1, g_x * g_y % p)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def point_compress(P):\n    zinv = modp_inv(P[2])\n    x = P[0] * zinv % p\n    y = P[1] * zinv % p\n    return int.to_bytes(y | ((x & 1) << 255), 32, \"little\")",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def point_decompress(s):\n    if len(s) != 32:\n        raise Exception(\"Invalid input length for decompression\")\n    y = int.from_bytes(s, \"little\")\n    sign = y >> 255\n    y &= (1 << 255) - 1",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "x = recover_x(y, sign) if x is None: return None else: return (x, y, 1, x*y % p)",
      "zh-CHS": "x=如果x为无，则恢复x（y，符号）：返回其他：返回（x，y，1，x*y%p）"
    },
    {
      "indent": 0,
      "text": "## These are functions for manipulating the private key.",
      "zh-CHS": "##这些函数用于操作私钥。"
    },
    {
      "indent": 0,
      "text": "def secret_expand(secret):\n    if len(secret) != 32:\n        raise Exception(\"Bad size of private key\")\n    h = sha512(secret)\n    a = int.from_bytes(h[:32], \"little\")\n    a &= (1 << 254) - 8\n    a |= (1 << 254)\n    return (a, h[32:])",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def secret_to_public(secret):\n    (a, dummy) = secret_expand(secret)\n    return point_compress(point_mul(a, G))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "## The signature function works as below.",
      "zh-CHS": "##签名功能的工作原理如下。"
    },
    {
      "indent": 0,
      "text": "def sign(secret, msg):\n    a, prefix = secret_expand(secret)\n    A = point_compress(point_mul(a, G))\n    r = sha512_modq(prefix + msg)\n    R = point_mul(r, G)\n    Rs = point_compress(R)\n    h = sha512_modq(Rs + A + msg)\n    s = (r + h * a) % q\n    return Rs + int.to_bytes(s, 32, \"little\")",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "## And finally the verification function.",
      "zh-CHS": "##最后是验证功能。"
    },
    {
      "indent": 0,
      "text": "def verify(public, msg, signature):\n    if len(public) != 32:\n        raise Exception(\"Bad public key length\")\n    if len(signature) != 64:\n        Exception(\"Bad signature length\")\n    A = point_decompress(public)\n    if not A:\n        return False\n    Rs = signature[:32]\n    R = point_decompress(Rs)\n    if not R:\n        return False\n    s = int.from_bytes(signature[32:], \"little\")\n    if s >= q: return False\n    h = sha512_modq(Rs + public + msg)\n    sB = point_mul(s, G)\n    hA = point_mul(h, A)\n    return point_equal(sB, point_add(R, hA))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "7. Test Vectors",
      "section_title": true,
      "zh-CHS": "7. 测试向量"
    },
    {
      "indent": 3,
      "text": "This section contains test vectors for Ed25519ph, Ed25519ctx, Ed448ph, Ed25519, and Ed448.",
      "zh-CHS": "本节包含Ed25519ph、Ed25519ctx、Ed448ph、Ed25519和Ed448的测试向量。"
    },
    {
      "indent": 3,
      "text": "Each section contains a sequence of test vectors. The octets are hex encoded, and whitespace is inserted for readability. Ed25519, Ed25519ctx, and Ed25519ph private and public keys are 32 octets; signatures are 64 octets. Ed448 and Ed448ph private and public keys are 57 octets; signatures are 114 octets. Messages are of arbitrary length. If the context is non-empty, it is given as 1-255 octets.",
      "zh-CHS": "每个部分包含一系列测试向量。八位字节是十六进制编码的，为了可读性插入了空格。Ed25519、Ed25519ctx和Ed25519ph私钥和公钥为32个八位字节；签名是64个八位字节。Ed448和Ed448ph私钥和公钥为57个八位字节；签名是114个八位字节。消息的长度是任意的。如果上下文为非空，则表示为1-255个八位字节。"
    },
    {
      "indent": 0,
      "text": "7.1. Test Vectors for Ed25519",
      "section_title": true,
      "zh-CHS": "7.1. Ed25519的测试向量"
    },
    {
      "indent": 3,
      "text": "These test vectors are taken from [ED25519-TEST-VECTORS] (but we removed the public key as a suffix of the private key and removed the message from the signature) and [ED25519-LIBGCRYPT-TEST-VECTORS].",
      "zh-CHS": "这些测试向量取自[ED25519-test-vectors]（但我们删除了作为私钥后缀的公钥，并从签名中删除了消息）和[ED25519-LIBGCRYPT-test-vectors]。"
    },
    {
      "indent": 3,
      "text": "-----TEST 1",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "zh-CHS": "算法：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n9d61b19deffd5a60ba844af492ec2cc4\n4449c5697b326919703bac031cae7f60",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\nd75a980182b10ab7d54bfed3c964073a\n0ee172f3daa62325af021a68f707511a",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 0 bytes):",
      "zh-CHS": "消息（长度为0字节）："
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\ne5564300c360ac729086e2cc806e828a\n84877f1eb8e5d974d873e06522490155\n5fb8821590a33bacc61e39701cf9b46b\nd25bf5f0595bbe24655141438e7a100b",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----TEST 2",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "zh-CHS": "算法：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n4ccd089b28ff96da9db6c346ec114e0f\n5b8a319f35aba624da8cf6ed4fb8a6fb",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\n3d4017c3e843895a92b70aa74d1b7ebc\n9c982ccf2ec4968cc0cd55f12af4660c",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 72",
      "zh-CHS": "消息（长度1字节）：72"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n92a009a9f0d4cab8720e820b5f642540\na2b27b5416503f8fb3762223ebdb69da\n085ac1e43e15996e458f3613d0f11d8c\n387b2eaeb4302aeeb00d291612bb0c00",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----TEST 3",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "zh-CHS": "算法：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\nc5aa8df43f9f837bedb7442f31dcb7b1\n66d38535076f094b85ce3a2e0b4458f7",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\nfc51cd8e6218a1a38da47ed00230f058\n0816ed13ba3303ac5deb911548908025",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 2 bytes): af82",
      "zh-CHS": "消息（长度为2字节）：af82"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n6291d657deec24024827e69c3abe01a3\n0ce548a284743a445e3680d7db5ac3ac\n18ff9b538d16f290ae67f760984dc659\n4a7c15e9716ed28dc027beceea1ec40a",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----TEST 1024",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "zh-CHS": "算法：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\nf5e5767cf153319517630f226876b86c\n8160cc583bc013744c6bf255f5cc0ee5",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\n278117fc144c72340f67d0f2316e8386\nceffbf2b2428c9c51fef7c597f1d426e",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1023 bytes):\n08b8b2b733424243760fe426a4b54908\n632110a66c2f6591eabd3345e3e4eb98\nfa6e264bf09efe12ee50f8f54e9f77b1\ne355f6c50544e23fb1433ddf73be84d8\n79de7c0046dc4996d9e773f4bc9efe57\n38829adb26c81b37c93a1b270b20329d\n658675fc6ea534e0810a4432826bf58c\n941efb65d57a338bbd2e26640f89ffbc\n1a858efcb8550ee3a5e1998bd177e93a\n7363c344fe6b199ee5d02e82d522c4fe\nba15452f80288a821a579116ec6dad2b\n3b310da903401aa62100ab5d1a36553e",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "06203b33890cc9b832f79ef80560ccb9\na39ce767967ed628c6ad573cb116dbef\nefd75499da96bd68a8a97b928a8bbc10\n3b6621fcde2beca1231d206be6cd9ec7\naff6f6c94fcd7204ed3455c68c83f4a4\n1da4af2b74ef5c53f1d8ac70bdcb7ed1\n85ce81bd84359d44254d95629e9855a9\n4a7c1958d1f8ada5d0532ed8a5aa3fb2\nd17ba70eb6248e594e1a2297acbbb39d\n502f1a8c6eb6f1ce22b3de1a1f40cc24\n554119a831a9aad6079cad88425de6bd\ne1a9187ebb6092cf67bf2b13fd65f270\n88d78b7e883c8759d2c4f5c65adb7553\n878ad575f9fad878e80a0c9ba63bcbcc\n2732e69485bbc9c90bfbd62481d9089b\neccf80cfe2df16a2cf65bd92dd597b07\n07e0917af48bbb75fed413d238f5555a\n7a569d80c3414a8d0859dc65a46128ba\nb27af87a71314f318c782b23ebfe808b\n82b0ce26401d2e22f04d83d1255dc51a\nddd3b75a2b1ae0784504df543af8969b\ne3ea7082ff7fc9888c144da2af58429e\nc96031dbcad3dad9af0dcbaaaf268cb8\nfcffead94f3c7ca495e056a9b47acdb7\n51fb73e666c6c655ade8297297d07ad1\nba5e43f1bca32301651339e22904cc8c\n42f58c30c04aafdb038dda0847dd988d\ncda6f3bfd15c4b4c4525004aa06eeff8\nca61783aacec57fb3d1f92b0fe2fd1a8\n5f6724517b65e614ad6808d6f6ee34df\nf7310fdc82aebfd904b01e1dc54b2927\n094b2db68d6f903b68401adebf5a7e08\nd78ff4ef5d63653a65040cf9bfd4aca7\n984a74d37145986780fc0b16ac451649\nde6188a7dbdf191f64b5fc5e2ab47b57\nf7f7276cd419c17a3ca8e1b939ae49e4\n88acba6b965610b5480109c8b17b80e1\nb7b750dfc7598d5d5011fd2dcc5600a3\n2ef5b52a1ecc820e308aa342721aac09\n43bf6686b64b2579376504ccc493d97e\n6aed3fb0f9cd71a43dd497f01f17c0e2\ncb3797aa2a2f256656168e6c496afc5f\nb93246f6b1116398a346f1a641f3b041\ne989f7914f90cc2c7fff357876e506b5\n0d334ba77c225bc307ba537152f3f161\n0e4eafe595f6d9d90d11faa933a15ef1\n369546868a7f3a45a96768d40fd9d034\n12c091c6315cf4fde7cb68606937380d",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "b2eaaa707b4c4185c32eddcdd306705e 4dc1ffc872eeee475a64dfac86aba41c 0618983f8741c5ef68d3a101e8a3b8ca c60c905c15fc910840b94c00a0b9d0",
      "zh-CHS": "b2eaaa707b4c4185c32eddcdd306705e 4DC1FFC872EEE475A64DFAC86ABA41C 0618983f8741c5ef68d3a101e8a3b8ca c60c905c15fc910840b94c00a0b9d0"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n0aab4c900501b3e24d7cdf4663326a3a\n87df5e4843b2cbdb67cbf6e460fec350\naa5371b1508f9f4528ecea23c436d94b\n5e8fcd4f681e30a6ac00a9704a188a03",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----TEST SHA(abc)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519",
      "zh-CHS": "算法：Ed25519"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n833fe62409237b9d62ec77587520911e\n9a759cec1d19755b7da901b96dca3d42",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\nec172b93ad5e563bf4932c70e1245034\nc35467ef2efd4d64ebf819683467e2bf",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 64 bytes):\nddaf35a193617abacc417349ae204131\n12e6fa4e89a97ea20a9eeee64b55d39a\n2192992a274fc1a836ba3c23a3feebbd\n454d4423643ce80e2a9ac94fa54ca49f",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\ndc2a4459e7369633a52b1bf277839a00\n201009a3efbf3ecb69bea2186c26b589\n09351fc9ac90b3ecfdfbc7c66431e030\n3dca179c138ac17ad9bef1177331a704\n-----",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "7.2. Test Vectors for Ed25519ctx",
      "section_title": true,
      "zh-CHS": "7.2. Ed25519ctx的测试向量"
    },
    {
      "indent": 3,
      "text": "-----foo",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "zh-CHS": "算法：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n0305334e381af78f141cb666f6199f57\nbc3495335a256a95bd2a55bf546663f6",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\ndfc9425e4f968f7f0c29f0259cf5f9ae\nd6851c2bb4ad8bfb860cfee0ab248292",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes):\nf726936d19c800494e3fdaff20b276a8",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "zh-CHS": "上下文：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n55a4cc2f70a54e04288c5f4cd1e45a7b\nb520b36292911876cada7323198dd87a\n8b36950b95130022907a7fb7c4e9b2d5\nf6cca685a587b4b21f4b888e4e7edb0d",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----bar",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "zh-CHS": "算法：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n0305334e381af78f141cb666f6199f57\nbc3495335a256a95bd2a55bf546663f6",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\ndfc9425e4f968f7f0c29f0259cf5f9ae\nd6851c2bb4ad8bfb860cfee0ab248292",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes):\nf726936d19c800494e3fdaff20b276a8",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CONTEXT: 626172",
      "zh-CHS": "上下文：626172"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\nfc60d5872fc46b3aa69f8b5b4351d580\n8f92bcc044606db097abab6dbcb1aee3\n216c48e8b3b66431b5b186d1d28f8ee1\n5a5ca2df6668346291c2043d4eb3e90d",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----foo2",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "zh-CHS": "算法：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n0305334e381af78f141cb666f6199f57\nbc3495335a256a95bd2a55bf546663f6",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\ndfc9425e4f968f7f0c29f0259cf5f9ae\nd6851c2bb4ad8bfb860cfee0ab248292",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes):\n508e9e6882b979fea900f62adceaca35",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "zh-CHS": "上下文：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n8b70c1cc8310e1de20ac53ce28ae6e72\n07f33c3295e03bb5c0732a1d20dc6490\n8922a8b052cf99b7c4fe107a5abb5b2c\n4085ae75890d02df26269d8945f84b0b",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "-----foo3",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ctx",
      "zh-CHS": "算法：Ed25519ctx"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\nab9c2853ce297ddab85c993b3ae14bca\nd39b2c682beabc27d6d4eb20711d6560",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\n0f1d1274943b91415889152e893d80e9\n3275a1fc0b65fd71b4b0dda10ad7d772",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 16 bytes):\nf726936d19c800494e3fdaff20b276a8",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "zh-CHS": "上下文：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n21655b5f1aa965996b3f97b3c849eafb\na922a0a62992f73b3d1b73106a84ad85\ne9b86a7b6005ea868337ff2d20a7f5fb\nd4cd10b0be49a68da2b2e0dc0ad8960f\n-----",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "7.3. Test Vectors for Ed25519ph",
      "section_title": true,
      "zh-CHS": "7.3. Ed25519ph的测试载体"
    },
    {
      "indent": 3,
      "text": "-----TEST abc",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed25519ph",
      "zh-CHS": "算法：Ed25519ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY:\n833fe62409237b9d62ec77587520911e\n9a759cec1d19755b7da901b96dca3d42",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY:\nec172b93ad5e563bf4932c70e1245034\nc35467ef2efd4d64ebf819683467e2bf",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "zh-CHS": "消息（长度3字节）：616263"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\n98a70222f0b8121aa9d30f813d683f80\n9e462b469c7ff87639499bb94e6dae41\n31f85042463c2a355a2003d062adf5aa\na10b8c61e636062aaad11c2a26083406\n-----",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "7.4. Test Vectors for Ed448",
      "section_title": true,
      "zh-CHS": "7.4. Ed448的测试向量"
    },
    {
      "indent": 3,
      "text": "-----Blank",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 6c82a562cb808d10d632be89c8513ebf 6c929f34ddfa8c9f63c9960ef6e348a3 528c8a3fcc2f044e39a3fc5b94492f8f 032e7549a20098f95b",
      "zh-CHS": "密钥：6c82a562cb808d10d632be89c8513ebf 6c929f34ddfa8c9f63c9960ef6e348a3 528c8a3fcc2f044e39a3fc5b94492f8f 032e7549a20098f95b"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 5fd7449b59b461fd2ce787ec616ad46a 1da1342485a70e1f8a0ea75d80e96778 edf124769b46c7061bd6783df1e50f6c d1fa1abeafe8256180",
      "zh-CHS": "公钥：5fd7449b59b461fd2ce787ec616ad46a 1da1342485a70e1f8a0ea75d80e96778 edf124769b46c7061bd6783df1e50f6c d1fa1abeafe8256180"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 0 bytes):",
      "zh-CHS": "消息（长度为0字节）："
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 533a37f6bbe457251f023c0d88f976ae 2dfb504a843e34d2074fd823d41a591f 2b233f034f628281f2fd7a22ddd47d78 28c59bd0a21bfd3980ff0d2028d4b18a 9df63e006c5d1c2d345b925d8dc00b41 04852db99ac5c7cdda8530a113a0f4db b61149f05a7363268c71d95808ff2e65 2600",
      "zh-CHS": "签字：533a37f6bbe457251f023c0d88f976ae 2dfb504a843e34d2074fd823d41a591f 2B233F034F628281F2FD7A22DD47D78 28C59BD0A21BFD380FF0D2028D4B18A 9df63e006c5d1c2d345b925d8dc00b41 04852db99ac5c7cdda8530a113a0f4db B61149F05A73268C71D9580FF2E2600"
    },
    {
      "indent": 3,
      "text": "-----1 octet",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e",
      "zh-CHS": "密钥：c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480",
      "zh-CHS": "公钥：43BA28F430CDFF456AE53154F7ECD0A C834A55D9358C0372BFA0C6798C086 6aea01eb00742802b8438ea4cb82169c 235160627B4C3A 9480"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 03",
      "zh-CHS": "消息（长度1字节）：03"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 26b8f91727bd62897af15e41eb43c377 efb9c610d48f2335cb0bd0087810f435 2541b143c4b981b7e18f62de8ccdf633 fc1bf037ab7cd779805e0dbcc0aae1cb cee1afb2e027df36bc04dcecbf154336 c19f0af7e0a6472905e799f1953d2a0f f3348ab21aa4adafd1d234441cf807c0 3a00",
      "zh-CHS": "签字：26b8f91727bd62897af15e41eb43c377 efb9c610d48f2335cb0bd0087810f435 2541B1B3C4B981B7E18F62DE8CCDF633 fc1bf037ab7cd779805e0dbcc0aae1cb cee1afb2e027df36bc04dcecbf154336 C19F0AF7E0A6472905E799F1952A0F F3348AB21AA4ADAFD123441CF807C03A000"
    },
    {
      "indent": 3,
      "text": "-----1 octet (with context)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e",
      "zh-CHS": "密钥：c4eab05d357007c632f3dbb48489924d 552b08fe0c353a0d4a1f00acda2c463a fbea67c5e8d2877c5e3bc397a659949e f8021e954e0a12274e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 43ba28f430cdff456ae531545f7ecd0a c834a55d9358c0372bfa0c6c6798c086 6aea01eb00742802b8438ea4cb82169c 235160627b4c3a9480",
      "zh-CHS": "公钥：43BA28F430CDFF456AE53154F7ECD0A C834A55D9358C0372BFA0C6798C086 6aea01eb00742802b8438ea4cb82169c 235160627B4C3A 9480"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1 byte): 03",
      "zh-CHS": "消息（长度1字节）：03"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "zh-CHS": "上下文：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: d4f8f6131770dd46f40867d6fd5d5055 de43541f8c5e35abbcd001b32a89f7d2 151f7647f11d8ca2ae279fb842d60721 7fce6e042f6815ea000c85741de5c8da 1144a6a1aba7f96de42505d7a7298524 fda538fccbbb754f578c1cad10d54d0d 5428407e85dcbc98a49155c13764e66c 3c00",
      "zh-CHS": "签名：d4f8f6131770dd46f40867d6fd5d5055 DE43541F8C5E35ABBCD001B32A89F7D2151F7647F11D8CA2AE279FB842D60721 7fce6e042f6815ea000c85741de5c8da 1144A6A1ABA7F96DE42505D7A729824 FDA538FCCB754F578C1CAD10D5428407E85BC98A49C13764E66C 3c00"
    },
    {
      "indent": 3,
      "text": "-----11 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: cd23d24f714274e744343237b93290f5 11f6425f98e64459ff203e8985083ffd f60500553abc0e05cd02184bdb89c4cc d67e187951267eb328",
      "zh-CHS": "密钥：CD23D24F714274E7443237B93290F5 11f6425f98e64459ff203e8985083ffd f60500553abc0e05cd02184bdb89c4cc d67e187951267eb328"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: dcea9e78f35a1bf3499a831b10b86c90 aac01cd84b67a0109b55a36e9328b1e3 65fce161d71ce7131a543ea4cb5f7e9f 1d8b00696447001400",
      "zh-CHS": "公钥：dcea9e78f35a1bf3499a831b10b86c90 aac01cd84b67a0109b55a36e9328b1e3 65fce161d71ce7131a543ea4cb5f7e9f 1d8b00696447001400"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 11 bytes): 0c3e544074ec63b0265e0c",
      "zh-CHS": "消息（长度11字节）：0c3e544074ec63b0265e0c"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 1f0a8888ce25e8d458a21130879b840a 9089d999aaba039eaf3e3afa090a09d3 89dba82c4ff2ae8ac5cdfb7c55e94d5d 961a29fe0109941e00b8dbdeea6d3b05 1068df7254c0cdc129cbe62db2dc957d bb47b51fd3f213fb8698f064774250a5 028961c9bf8ffd973fe5d5c206492b14 0e00",
      "zh-CHS": "签名：1f0a8888ce25e8d458a21130879b840a 9089d999aaba039eaf3e3afa090a09d3 89dba82c4ff2ae8ac5cdfb7c55e94d5d 961a29fe0109941e00b8dbdeea6d3b05 1068DF7254C0CDC129CBE62DB2957D BB47B51FD31FB8698F064774250A5028961C9BF8FFD973FE5CD2064B14 0e00"
    },
    {
      "indent": 3,
      "text": "-----12 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 258cdd4ada32ed9c9ff54e63756ae582 fb8fab2ac721f2c8e676a72768513d93 9f63dddb55609133f29adf86ec9929dc cb52c1c5fd2ff7e21b",
      "zh-CHS": "密钥：258cdd4ada32ed9c9ff54e63756ae582 FB8FAB2AC721F2C8E676A7268513D93 9f63dddb55609133f29adf86ec9929dc CB52C1C5FD2F7E21B"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 3ba16da0c6f2cc1f30187740756f5e79 8d6bc5fc015d7c63cc9510ee3fd44adc 24d8e968b6e46e6f94d19b945361726b d75e149ef09817f580",
      "zh-CHS": "公钥：3ba16da0c6f2cc1f30187740756f5e79 8d6bc5fc015d7c63cc9510ee3fd44adc 24d8e968b6e46e6f94d19b945361726b d75e149ef09817f580"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 12 bytes): 64a65f3cdedcdd66811e2915",
      "zh-CHS": "消息（长度12字节）：64A65F3CDEDCDD6681E2915"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 7eeeab7c4e50fb799b418ee5e3197ff6 bf15d43a14c34389b59dd1a7b1b85b4a e90438aca634bea45e3a2695f1270f07 fdcdf7c62b8efeaf00b45c2c96ba457e b1a8bf075a3db28e5c24f6b923ed4ad7 47c3c9e03c7079efb87cb110d3a99861 e72003cbae6d6b8b827e4e6c143064ff 3c00",
      "zh-CHS": "签名：7eeeab7c4e50fb799b418ee5e3197ff6 bf15d43a14c34389b59dd1a7b1b85b4a E90438ACA6344BEA45E3A2695F1270F07 fdcdf7c62b8efeaf00b45c2c96ba457e B1A8BF075A328E5C24F6B923ED4AD7 C3C9E03C7079EFB87CB110D3A99861 E72003CBAE6B6827E6B43064FF 3c00"
    },
    {
      "indent": 3,
      "text": "-----13 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 7ef4e84544236752fbb56b8f31a23a10 e42814f5f55ca037cdcc11c64c9a3b29 49c1bb60700314611732a6c2fea98eeb c0266a11a93970100e",
      "zh-CHS": "密钥：7ef4e84544236752fbb56b8f31a23a10 E42814F5C5CA037CDCC11C64C9A3B29 49c1bb60700314611732a6c2fea98eeb c0266a11a93970100e"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: b3da079b0aa493a5772029f0467baebe e5a8112d9d3a22532361da294f7bb381 5c5dc59e176b4d9f381ca0938e13c6c0 7b174be65dfa578e80",
      "zh-CHS": "公钥：B3DA079B0AA493A577029F0467BAEBE E5A8112D9D3A2253361DA294B381 5c5dc59e176b4d9f381ca0938e13c6c0 7B174 BE65DFA578E80"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 13 bytes): 64a65f3cdedcdd66811e2915e7",
      "zh-CHS": "消息（长度13字节）：64A65F3CDEDCDD6681E2915E7"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 6a12066f55331b6c22acd5d5bfc5d712 28fbda80ae8dec26bdd306743c5027cb 4890810c162c027468675ecf645a8317 6c0d7323a2ccde2d80efe5a1268e8aca 1d6fbc194d3f77c44986eb4ab4177919 ad8bec33eb47bbb5fc6e28196fd1caf5 6b4e7e0ba5519234d047155ac727a105 3100",
      "zh-CHS": "签名：6a12066f55331b6c22acd5d5bfc5d712 28fbda80ae8dec26bdd306743c5027cb 4890810c162c027468675ecf645a8317 6c0d7323a2ccde2d80efe5a1268e8aca 1d6fbc194d3f77c44986eb4ab4177919 AD8BE33EB47BBB5FC6E28196FD1CAF5 6b4e7e0ba5519234d047155ac727a105 3100"
    },
    {
      "indent": 3,
      "text": "-----64 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: d65df341ad13e008567688baedda8e9d cdc17dc024974ea5b4227b6530e339bf f21f99e68ca6968f3cca6dfe0fb9f4fa b4fa135d5542ea3f01",
      "zh-CHS": "密钥：d65df341ad13e008567688baedda8e9d cdc17dc024974ea5b4227b6530e339bf f21f99e68ca6968f3cca6dfe0fb9f4fa b4fa135d5542ea3f01"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: df9705f58edbab802c7f8363cfe5560a b1c6132c20a9f1dd163483a26f8ac53a 39d6808bf4a1dfbd261b099bb03b3fb5 0906cb28bd8a081f00",
      "zh-CHS": "公钥：df9705f58edbab802c7f8363cfe5560a B1C6132C20A9F1DD16348A26F8AC53A 39d6808bf4a1dfbd261b099bb03b3fb5 0906cb28bd8a081f00"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 64 bytes):\nbd0f6a3747cd561bdddf4640a332461a\n4a30a12a434cd0bf40d766d9c6d458e5\n512204a30c17d1f50b5079631f64eb31\n12182da3005835461113718d1a5ef944",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 554bc2480860b49eab8532d2a533b7d5 78ef473eeb58c98bb2d0e1ce488a98b1 8dfde9b9b90775e67f47d4a1c3482058 efc9f40d2ca033a0801b63d45b3b722e f552bad3b4ccb667da350192b61c508c f7b6b5adadc2c8d9a446ef003fb05cba 5f30e88e36ec2703b349ca229c267083 3900",
      "zh-CHS": "签名：554BC248060B49EAB8532D2A533B7D5 78ef473eeb58c98bb2d0e1ce488a98b1 8DFDE9B90775E67F47D4A1C3482058 EFC9F40D2CA033A081B63D45B3B722E F552BAD3B46B667DA350192B61C508C F7B5ADDC8D9A446EF003FB05CBA 5f30e88e36ec2703b349ca229c267083 3900"
    },
    {
      "indent": 3,
      "text": "-----256 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 2ec5fe3c17045abdb136a5e6a913e32a b75ae68b53d2fc149b77e504132d3756 9b7e766ba74a19bd6162343a21c8590a a9cebca9014c636df5",
      "zh-CHS": "密钥：2ec5fe3c17045abdb136a5e6a913e32a b75ae68b53d2fc149b77e504132d3756 9b7e766ba74a19bd6162343a21c8590a a9cebca9014c636df5"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 79756f014dcfe2079f5dd9e718be4171 e2ef2486a08f25186f6bff43a9936b9b fe12402b08ae65798a3d81e22e9ec80e 7690862ef3d4ed3a00",
      "zh-CHS": "公钥：79756f014dcfe2079f5dd9e718be4171 E2EF2486A08F25186F6BF43A9936B9B fe12402b08ae65798a3d81e22e9ec80e 7690862ef3d4ed3a00"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 256 bytes):\n15777532b0bdd0d1389f636c5f6b9ba7\n34c90af572877e2d272dd078aa1e567c\nfa80e12928bb542330e8409f31745041\n07ecd5efac61ae7504dabe2a602ede89\ne5cca6257a7c77e27a702b3ae39fc769\nfc54f2395ae6a1178cab4738e543072f\nc1c177fe71e92e25bf03e4ecb72f47b6\n4d0465aaea4c7fad372536c8ba516a60\n39c3c2a39f0e4d832be432dfa9a706a6\ne5c7e19f397964ca4258002f7c0541b5\n90316dbc5622b6b2a6fe7a4abffd9610\n5eca76ea7b98816af0748c10df048ce0\n12d901015a51f189f3888145c03650aa\n23ce894c3bd889e030d565071c59f409\na9981b51878fd6fc110624dcbcde0bf7\na69ccce38fabdf86f3bef6044819de11",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "SIGNATURE: c650ddbb0601c19ca11439e1640dd931 f43c518ea5bea70d3dcde5f4191fe53f 00cf966546b72bcc7d58be2b9badef28 743954e3a44a23f880e8d4f1cfce2d7a 61452d26da05896f0a50da66a239a8a1 88b6d825b3305ad77b73fbac0836ecc6 0987fd08527c1a8e80d5823e65cafe2a 3d00",
      "zh-CHS": "签名：c650ddbb0601c19ca11439e1640dd931 f43c518ea5bea70d3dcde5f4191fe53f 00cf966546b72bcc7d58be2b9badef28 743954e3a44a23f880e8d4f1cfce2d7a 61452d26da05896f0a50da66a239a8a1 88B6D825B3305AD77B73FBAC0836ECC60987FD08527C1A8E80D5823E65CAFE2A 3d00"
    },
    {
      "indent": 3,
      "text": "-----1023 octets",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448",
      "zh-CHS": "算法：Ed448"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 872d093780f5d3730df7c212664b37b8 a0f24f56810daa8382cd4fa3f77634ec 44dc54f1c2ed9bea86fafb7632d8be19 9ea165f5ad55dd9ce8",
      "zh-CHS": "密钥：872d093780f5d3730df7c212664b37b8 A0F24F56810DAA8382CD4FA3F776344EC 44dc54f1c2ed9bea86fafb7632d8be19 9ea165f5ad55dd9ce8"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: a81b2e8a70a5ac94ffdbcc9badfc3feb 0801f258578bb114ad44ece1ec0e799d a08effb81c5d685c0c56f64eecaef8cd f11cc38737838cf400",
      "zh-CHS": "公开密钥：a81b2e8a70a5ac94ffdbcc9badfc3feb 0801F258578BB114 AD44ECE0E799D a08effb81c5d685c0c56f64eecaef8cd f11cc38737838cf400"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 1023 bytes):\n6ddf802e1aae4986935f7f981ba3f035\n1d6273c0a0c22c9c0e8339168e675412\na3debfaf435ed651558007db4384b650\nfcc07e3b586a27a4f7a00ac8a6fec2cd\n86ae4bf1570c41e6a40c931db27b2faa\n15a8cedd52cff7362c4e6e23daec0fbc\n3a79b6806e316efcc7b68119bf46bc76\na26067a53f296dafdbdc11c77f7777e9\n72660cf4b6a9b369a6665f02e0cc9b6e\ndfad136b4fabe723d2813db3136cfde9\nb6d044322fee2947952e031b73ab5c60\n3349b307bdc27bc6cb8b8bbd7bd32321\n9b8033a581b59eadebb09b3c4f3d2277\nd4f0343624acc817804728b25ab79717\n2b4c5c21a22f9c7839d64300232eb66e\n53f31c723fa37fe387c7d3e50bdf9813\na30e5bb12cf4cd930c40cfb4e1fc6225\n92a49588794494d56d24ea4b40c89fc0\n596cc9ebb961c8cb10adde976a5d602b\n1c3f85b9b9a001ed3c6a4d3b1437f520",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "96cd1956d042a597d561a596ecd3d173 5a8d570ea0ec27225a2c4aaff26306d1 526c1af3ca6d9cf5a2c98f47e1c46db9 a33234cfd4d81f2c98538a09ebe76998 d0d8fd25997c7d255c6d66ece6fa56f1 1144950f027795e653008f4bd7ca2dee 85d8e90f3dc315130ce2a00375a318c7 c3d97be2c8ce5b6db41a6254ff264fa6 155baee3b0773c0f497c573f19bb4f42 40281f0b1f4f7be857a4e59d416c06b4 c50fa09e1810ddc6b1467baeac5a3668 d11b6ecaa901440016f389f80acc4db9 77025e7f5924388c7e340a732e554440 e76570f8dd71b7d640b3450d1fd5f041 0a18f9a3494f707c717b79b4bf75c984 00b096b21653b5d217cf3565c9597456 f70703497a078763829bc01bb1cbc8fa 04eadc9a6e3f6699587a9e75c94e5bab 0036e0b2e711392cff0047d0d6b05bd2 a588bc109718954259f1d86678a579a3 120f19cfb2963f177aeb70f2d4844826 262e51b80271272068ef5b3856fa8535 aa2a88b2d41f2a0e2fda7624c2850272 ac4a2f561f8f2f7a318bfd5caf969614 9e4ac824ad3460538fdc25421beec2cc 6818162d06bbed0c40a387192349db67 a118bada6cd5ab0140ee273204f628aa d1c135f770279a651e24d8c14d75a605 9d76b96a6fd857def5e0b354b27ab937 a5815d16b5fae407ff18222c6d1ed263 be68c95f32d908bd895cd76207ae7264 87567f9a67dad79abec316f683b17f2d 02bf07e0ac8b5bc6162cf94697b3c27c d1fea49b27f23ba2901871962506520c 392da8b6ad0d99f7013fbc06c2c17a56 9500c8a7696481c1cd33e9b14e40b82e 79a5f5db82571ba97bae3ad3e0479515 bb0e2b0f3bfcd1fd33034efc6245eddd 7ee2086ddae2600d8ca73e214e8c2b0b db2b047c6a464a562ed77b73d2d841c4 b34973551257713b753632efba348169 abc90a68f42611a40126d7cb21b58695 568186f7e569d2ff0f9e745d0487dd2e b997cafc5abf9dd102e62ff66cba87",
      "zh-CHS": "96cd1956d042a597d561a596ecd3d173 5A8D570EC27225A2C4AAFF26306D1 526c1af3ca6d9cf5a2c98f47e1c46db9 a33234cfd4d81f2c98538a09ebe76998 D0D8FD25997C7D255C66ECE56F1 1144950F027795E65308F4BD7CA2DEE 85D8E90F3DC315130CE2A00375A318C7C3D98538A09EBE5B6F467B4F497B9F497B7B7B9F40B7B9F47F4B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7B7c50fa09e1810ddc6b1467baeac5a3668 d11b6ecaa901440016f389f80acc4db9 77025E7F5924388C7E340A732E55440 e76570f8dd71b7d640b3450d1fd5f041 0A18F9A3494F707C717B47B75C984 00B096B21653B5D217CF3565C9597456F703497349778787638BC01BB1CB8FA 04EADC6E3F66997A75B7E75B7B75B75B75B7B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75B75120F19CFB22963F177AEB70F2D4844826 262e51b80271272068ef5b3856fa8535 AA2A88B2D41F20E2FDA762C2850272 AC4A2F561F8F2F7A318BFD5CAF9614 9E4AC824AD3460538FDC25421 BeeC6818162D06B0C4087192349DB67 A118 BAD6CD5AB0140EE273204F628AA D1C135F770A651E24D8C14D75A605 9D76B857FDD857DFC2827AD625DFB1625B1627B1627B1826B1827CFB1626B1827CFB1627be68c95f32d908bd895cd76207ae7264 87567f9a67dad79abec316f683b17f2d 02bf07e0ac8b5bc6162cf94697b3c27c D1FEA49B27F23BA2901871966520C 392DA8B6AD099F7013FBC06C2C17A56 9500C8A766481C1CD33E9B14E40B82E 79A5F5AC82577BA97BAE3AD3E04715 BB0E2B0BFCD1FD3034EFC62457EDD EE20ED20E86D600D8C2C2C67B8C2737B17B7B7B7B7B7B7B7B7B7B7B7B7D7B7D7B7D7D7B7D8D7D7D7D7D7D7B7B7D7D7D7D7b34973551257713b753632efba348169 ABC90A68F4261A40126D7CB21B58695 568186f7e569d2ff0f9e745d0487dd2e b997cafc5abf9dd102e62ff66cba87"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\ne301345a41a39a4d72fff8df69c98075\na0cc082b802fc9b2b6bc503f926b65bd\ndf7f4c8f1cb49f6396afc8a70abe6d8a\nef0db478d4c6b2970076c6a0484fe76d\n76b3a97625d79f1ce240e7c576750d29\n5528286f719b413de9ada3e8eb78ed57\n3603ce30d8bb761785dc30dbc320869e\n1a00\n-----",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "7.5. Test Vectors for Ed448ph",
      "section_title": true,
      "zh-CHS": "7.5. Ed448ph的测试载体"
    },
    {
      "indent": 3,
      "text": "-----TEST abc",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448ph",
      "zh-CHS": "算法：Ed448ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49",
      "zh-CHS": "密钥：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880",
      "zh-CHS": "公钥：259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 C09428A131D6B1B5703D90D8132C276 d5ed3d5d01c0f53880"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "zh-CHS": "消息（长度3字节）：616263"
    },
    {
      "indent": 3,
      "text": "SIGNATURE: 822f6901f7480f3d5f562c592994d969 3602875614483256505600bbc281ae38 1f54d6bce2ea911574932f52a4e6cadd 78769375ec3ffd1b801a0d9b3f4030cd 433964b6457ea39476511214f97469b5 7dd32dbc560a9a94d00bff07620464a3 ad203df7dc7ce360c3cd3696d9d9fab9 0f00",
      "zh-CHS": "签字：822F6901F7480F3D5F562C5929994D969 360287561448325650560BBC281AE38 1F54D6BCE291157432F52A4 E6CADD 78769375ec3ffd1b801a0d9b3f4030cd 433964b6457ea39476511214f97469b5 7DD32DBC560A9A94D00BFF076204A3 AD203DF7DC7CE360C3CD3696D9FAB9 0f00"
    },
    {
      "indent": 3,
      "text": "-----TEST abc (with context)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "ALGORITHM: Ed448ph",
      "zh-CHS": "算法：Ed448ph"
    },
    {
      "indent": 3,
      "text": "SECRET KEY: 833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49",
      "zh-CHS": "密钥：833fe62409237b9d62ec77587520911e 9a759cec1d19755b7da901b96dca3d42 ef7822e0d5104127dc05d6dbefde69e3 ab2cec7c867c6e2c49"
    },
    {
      "indent": 3,
      "text": "PUBLIC KEY: 259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 c09428a131d6b1b57303d90d8132c276 d5ed3d5d01c0f53880",
      "zh-CHS": "公钥：259b71c19f83ef77a7abd26524cbdb31 61b590a48f7d17de3ee0ba9c52beb743 C09428A131D6B1B5703D90D8132C276 d5ed3d5d01c0f53880"
    },
    {
      "indent": 3,
      "text": "MESSAGE (length 3 bytes): 616263",
      "zh-CHS": "消息（长度3字节）：616263"
    },
    {
      "indent": 3,
      "text": "CONTEXT: 666f6f",
      "zh-CHS": "上下文：666f6f"
    },
    {
      "indent": 3,
      "text": "SIGNATURE:\nc32299d46ec8ff02b54540982814dce9\na05812f81962b649d528095916a2aa48\n1065b1580423ef927ecf0af5888f90da\n0f6a9a85ad5dc3f280d91224ba9911a3\n653d00e484e2ce232521481c8658df30\n4bb7745a73514cdb9bf3e15784ab7128\n4f8d0704a608c54a6b62d97beb511d13\n2100\n-----",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "8. Security Considerations",
      "section_title": true,
      "zh-CHS": "8. 安全考虑"
    },
    {
      "indent": 0,
      "text": "8.1. Side-Channel Leaks",
      "section_title": true,
      "zh-CHS": "8.1. 侧通道泄漏"
    },
    {
      "indent": 3,
      "text": "For implementations performing signatures, secrecy of the private key is fundamental. It is possible to protect against some side-channel attacks by ensuring that the implementation executes exactly the same sequence of instructions and performs exactly the same memory accesses, for any value of the private key.",
      "zh-CHS": "对于执行签名的实现，私钥的保密性是最基本的。通过确保实现对私钥的任何值执行完全相同的指令序列并执行完全相同的内存访问，可以防止某些旁道攻击。"
    },
    {
      "indent": 3,
      "text": "To make an implementation side-channel silent in this way, the modulo p arithmetic must not use any data-dependent branches, e.g., related to carry propagation. Side-channel silent point addition is straightforward, thanks to the unified formulas.",
      "zh-CHS": "为了以这种方式使实现侧信道静音，模p算法不得使用任何依赖于数据的分支，例如，与进位传播相关的分支。由于统一的公式，侧通道静默点的添加非常简单。"
    },
    {
      "indent": 3,
      "text": "Scalar multiplication, multiplying a point by an integer, needs some additional effort to implement in a side-channel silent manner. One simple approach is to implement a side-channel silent conditional assignment, and use it together with the binary algorithm to examine one bit of the integer at a time.",
      "zh-CHS": "将一个点乘以一个整数的标量乘法需要额外的努力才能以旁道静默方式实现。一种简单的方法是实现侧通道静默条件分配，并将其与二进制算法一起使用，一次检查整数的一位。"
    },
    {
      "indent": 3,
      "text": "Compared to other signature schemes, avoiding data-dependent branches is easier due to side-channel silent modulo p arithmetic being easier (with recommended curves) and having complete addition formulas instead of having a number of special cases.",
      "zh-CHS": "与其他签名方案相比，避免数据相关分支更容易，因为侧通道静默模p算法更容易（使用推荐的曲线），并且具有完整的加法公式，而不是有许多特殊情况。"
    },
    {
      "indent": 3,
      "text": "Note that the example implementations in this document do not attempt to be side-channel silent.",
      "zh-CHS": "请注意，本文档中的示例实现并不试图保持侧通道静默。"
    },
    {
      "indent": 0,
      "text": "8.2. Randomness Considerations",
      "section_title": true,
      "zh-CHS": "8.2. 随机性考虑"
    },
    {
      "indent": 3,
      "text": "EdDSA signatures are deterministic. This protects against attacks arising from signing with bad randomness; the effects of which can, depending on the algorithm, range up to full private key compromise. It can be surprisingly hard to ensure good-quality random numbers, and there have been numerous security failures relating to this.",
      "zh-CHS": "EdDSA签名是确定性的。这可以防止由于随机性差的签名而引起的攻击；根据算法的不同，其影响范围可以达到完全私钥泄露。要确保高质量的随机数可能会出人意料地困难，与此相关的安全性故障也很多。"
    },
    {
      "indent": 3,
      "text": "Obviously, private key generation requires randomness, but due to the fact that the private key is hashed before use, a few missing bits of entropy doesn't constitute a disaster.",
      "zh-CHS": "显然，私钥生成需要随机性，但由于私钥在使用前会被散列，因此丢失的一些熵不会构成灾难。"
    },
    {
      "indent": 3,
      "text": "The basic signature verification is also deterministic. However, some speedups by verifying multiple signatures at once do require random numbers.",
      "zh-CHS": "基本的签名验证也是确定性的。但是，通过一次验证多个签名而实现的某些加速确实需要随机数。"
    },
    {
      "indent": 0,
      "text": "8.3. Use of Contexts",
      "section_title": true,
      "zh-CHS": "8.3. 语境的使用"
    },
    {
      "indent": 3,
      "text": "Contexts can be used to separate uses of the protocol between different protocols (which is very hard to reliably do otherwise) and between different uses within the same protocol. However, the following SHOULD be kept in mind when using this facility:",
      "zh-CHS": "上下文可用于区分不同协议之间的协议使用（否则很难可靠地做到），以及同一协议内不同使用之间的协议使用。但是，在使用本设施时，应牢记以下几点："
    },
    {
      "indent": 6,
      "text": "The context SHOULD be a constant string specified by the protocol using it. It SHOULD NOT incorporate variable elements from the message itself.",
      "zh-CHS": "上下文应该是使用它的协议指定的常量字符串。它不应该包含来自消息本身的变量元素。"
    },
    {
      "indent": 6,
      "text": "Contexts SHOULD NOT be used opportunistically, as that kind of use is very error prone. If contexts are used, one SHOULD require all signature schemes available for use in that purpose support contexts.",
      "zh-CHS": "不应该机会主义地使用上下文，因为这种使用非常容易出错。如果使用上下文，则应要求所有可用于该目的的签名方案支持上下文。"
    },
    {
      "indent": 6,
      "text": "Contexts are an extra input, which percolate out of APIs; as such, even if the signature scheme supports contexts, those may not be available for use. This problem is compounded by the fact that many times the application is not invoking the signing and verification functions directly but via some other protocol.",
      "zh-CHS": "上下文是一个额外的输入，从API中渗透出来；因此，即使签名方案支持上下文，也可能无法使用这些上下文。很多时候，应用程序不是直接调用签名和验证函数，而是通过其他协议来调用，这使得这个问题更加复杂。"
    },
    {
      "indent": 0,
      "text": "8.4. Signature Malleability",
      "section_title": true,
      "zh-CHS": "8.4. 特征延展性"
    },
    {
      "indent": 3,
      "text": "Some systems assume signatures are not malleable: that is, given a valid signature for some message under some key, the attacker can't produce another valid signature for the same message and key.",
      "zh-CHS": "有些系统假定签名是不可延展的：即，给定某个密钥下某个消息的有效签名，攻击者无法为同一个消息和密钥生成另一个有效签名。"
    },
    {
      "indent": 3,
      "text": "Ed25519 and Ed448 signatures are not malleable due to the verification check that decoded S is smaller than l. Without this check, one can add a multiple of l into a scalar part and still pass signature verification, resulting in malleable signatures.",
      "zh-CHS": "Ed25519和Ed448签名不可延展，因为验证检查表明解码的S小于l。如果不进行此检查，可以将l的倍数添加到标量部分中，并且仍然通过签名验证，从而产生可延展的签名。"
    },
    {
      "indent": 0,
      "text": "8.5. Choice of Signature Primitive",
      "section_title": true,
      "zh-CHS": "8.5. 签名原语的选择"
    },
    {
      "indent": 3,
      "text": "Ed25519 and Ed25519ph have a nominal strength of 128 bits, whereas Ed448 and Ed448ph have the strength of 224. While the lower strength is sufficient for the foreseeable future, the higher level brings some defense against possible future cryptographic advances. Both are demolished by quantum computers just about the same.",
      "zh-CHS": "Ed25519和Ed25519ph的标称强度为128位，而Ed448和Ed448ph的标称强度为224位。虽然较低的强度在可预见的未来是足够的，但较高的强度会对未来可能的加密进展带来一些防御。两者都被量子计算机摧毁了。"
    },
    {
      "indent": 3,
      "text": "The Ed25519ph and Ed448ph variants are prehashed. This is mainly useful for interoperation with legacy APIs, since in most of the cases, either the amount of data signed is not large or the protocol is in the position to do digesting in ways better than just prehashing (e.g., tree hashing or splitting the data). The",
      "zh-CHS": "Ed25519ph和Ed448ph变体已预灰化。这主要用于与遗留API的互操作，因为在大多数情况下，签名的数据量不是很大，或者协议能够以比预灰化更好的方式进行消化（例如，树哈希或分割数据）。这个"
    },
    {
      "indent": 3,
      "text": "prehashing also makes the functions greatly more vulnerable to weaknesses in hash functions used. These variants SHOULD NOT be used.",
      "zh-CHS": "预灰化还使函数更容易受到所用哈希函数弱点的影响。不应使用这些变体。"
    },
    {
      "indent": 3,
      "text": "Ed25519ctx and Ed448 have contexts. However, this is balanced by the problems noted in Section 8.3 about contexts.",
      "zh-CHS": "Ed25519ctx和Ed448具有上下文。然而，第8.3节关于上下文的问题平衡了这一点。"
    },
    {
      "indent": 3,
      "text": "On the implementation front, Ed25519 is widely implemented and has many high-quality implementations. The others have much worse support.",
      "zh-CHS": "在实现方面，Ed25519得到了广泛的实现，并且有许多高质量的实现。其他人的支持率要差得多。"
    },
    {
      "indent": 3,
      "text": "In summary, if a high 128-bit security level is enough, use of Ed25519 is RECOMMENDED; otherwise, Ed448 is RECOMMENDED.",
      "zh-CHS": "总之，如果高128位安全级别足够，建议使用Ed25519；否则，建议使用Ed448。"
    },
    {
      "indent": 0,
      "text": "8.6. Mixing Different Prehashes",
      "section_title": true,
      "zh-CHS": "8.6. 混合不同的灰烬"
    },
    {
      "indent": 3,
      "text": "The schemes described in this document are designed to be resistant to mixing prehashes. That is, it is infeasible to find a message that verifies using the same signature under another scheme, even if the original signed message was chosen. Thus, one can use the same key pair for Ed25519, Ed25519ctx, and Ed25519ph and correspondingly with Ed448 and Ed448ph.",
      "zh-CHS": "本文件中描述的方案旨在防止混合预灰烬。也就是说，即使选择了原始签名的消息，也无法找到在另一个方案下使用相同签名进行验证的消息。因此，可以对Ed25519、Ed25519ctx和Ed25519ph以及相应的Ed448和Ed448ph使用相同的密钥对。"
    },
    {
      "indent": 3,
      "text": "The \"SigEd25519 no Ed25519 collisions\" constant is chosen to be a textual string such that it does not decode as a point. Because the inner hash input in the Ed25519 signature always starts with a valid point, there is no way trivial collision can be constructed. In the case of seed hash, trivial collisions are so unlikely, even with an attacker choosing all inputs, that it is much more probable that something else goes catastrophically wrong.",
      "zh-CHS": "“SigEd25519无Ed25519冲突”常量被选择为文本字符串，这样它就不会作为点进行解码。由于Ed25519签名中的内部哈希输入始终以有效点开始，因此无法构造普通冲突。在种子散列的情况下，即使攻击者选择了所有输入，琐碎的冲突也不太可能发生，因此更有可能发生其他灾难性错误。"
    },
    {
      "indent": 0,
      "text": "8.7. Signing Large Amounts of Data at Once",
      "section_title": true,
      "zh-CHS": "8.7. 一次对大量数据进行签名"
    },
    {
      "indent": 3,
      "text": "Avoid signing large amounts of data at once (where \"large\" depends on the expected verifier). In particular, unless the underlying protocol does not require it, the receiver MUST buffer the entire message (or enough information to reconstruct it, e.g., compressed or encrypted version) to be verified.",
      "zh-CHS": "避免一次对大量数据进行签名（其中“大”取决于预期的验证器）。特别是，除非底层协议不需要它，否则接收方必须缓冲整个消息（或足够的信息来重建它，例如，压缩或加密版本）以进行验证。"
    },
    {
      "indent": 3,
      "text": "This is needed because most of the time, it is unsafe to process unverified data, and verifying the signature makes a pass through the whole message, causing ultimately at least two passes through.",
      "zh-CHS": "这是必要的，因为在大多数情况下，处理未经验证的数据是不安全的，验证签名会使整个消息传递一次，最终导致至少两次传递。"
    },
    {
      "indent": 3,
      "text": "As an API consideration, this means that any Initialize Update Finalize (IFU) verification interface is prone to misuse.",
      "zh-CHS": "作为API考虑因素，这意味着任何初始化更新最终确定（IFU）验证接口都容易被误用。"
    },
    {
      "indent": 3,
      "text": "It is a bad idea to modify Ed25519 or Ed448 signing to be able to create valid Ed25519/Ed448 signatures using an IUF interface with only constant buffering. Pretty much any error in such would cause catastrophic security failure.",
      "zh-CHS": "修改Ed25519或Ed448签名以使用仅具有常量缓冲的IUF接口创建有效的Ed25519/Ed448签名是一个坏主意。在这种情况下，几乎任何错误都会导致灾难性的安全故障。"
    },
    {
      "indent": 0,
      "text": "8.8. Multiplication by Cofactor in Verification",
      "section_title": true,
      "zh-CHS": "8.8. 验证中的余因子乘法"
    },
    {
      "indent": 3,
      "text": "The given verification formulas for both Ed25519 and Ed448 multiply points by the cofactor. While this is not strictly necessary for security (in fact, any signature that meets the non-multiplied equation will satisfy the multiplied one), in some applications it is undesirable for implementations to disagree about the exact set of valid signatures. Such disagreements could open up, e.g., fingerprinting attacks.",
      "zh-CHS": "Ed25519和Ed448的给定验证公式将点乘以余因子。虽然这对于安全性不是严格必需的（事实上，满足非乘法等式的任何签名都将满足乘法等式），但在某些应用程序中，实现不希望对有效签名的确切集合存在分歧。这类分歧可能会爆发，例如指纹攻击。"
    },
    {
      "indent": 0,
      "text": "8.9. Use of SHAKE256 as a Hash Function",
      "section_title": true,
      "zh-CHS": "8.9. 使用SHAKE256作为散列函数"
    },
    {
      "indent": 3,
      "text": "Ed448 uses SHAKE256 as a hash function, even if SHAKE256 is specifically defined not to be a hash function.",
      "zh-CHS": "Ed448使用SHAKE256作为散列函数，即使SHAKE256被明确定义为非散列函数。"
    },
    {
      "indent": 3,
      "text": "The first potentially troublesome property is that shorter outputs are prefixes of longer ones. This is acceptable because output lengths are fixed.",
      "zh-CHS": "第一个潜在的麻烦特性是，较短的输出是较长输出的前缀。这是可以接受的，因为输出长度是固定的。"
    },
    {
      "indent": 3,
      "text": "The second potentially troublesome property is failing to meet standard hash security notions (especially with preimages). However, the estimated 256-bit security level against collisions and preimages is sufficient to pair with a 224-bit level elliptic curve.",
      "zh-CHS": "第二个潜在的麻烦属性是无法满足标准哈希安全概念（尤其是前映像）。然而，针对冲突和预映像的估计256位安全级别足以与224位级别的椭圆曲线配对。"
    },
    {
      "indent": 0,
      "text": "9. References",
      "section_title": true,
      "zh-CHS": "9. 工具书类"
    },
    {
      "indent": 0,
      "text": "9.1. Normative References",
      "section_title": true,
      "zh-CHS": "9.1. 规范性引用文件"
    },
    {
      "indent": 3,
      "text": "[FIPS202] National Institute of Standards and Technology, \"SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions\", FIPS PUB 202, August 2015, <http://dx.doi.org/10.6028/NIST.FIPS.202>.",
      "zh-CHS": "[FIPS202]国家标准与技术研究所，“SHA-3标准：基于排列的散列和可扩展输出函数”，FIPS PUB 202，2015年8月<http://dx.doi.org/10.6028/NIST.FIPS.202>."
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "zh-CHS": "[RFC2119]Bradner，S.，“RFC中用于表示需求水平的关键词”，BCP 14，RFC 2119，DOI 10.17487/RFC2119，1997年3月<http://www.rfc-editor.org/info/rfc2119>."
    },
    {
      "indent": 3,
      "text": "[RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <http://www.rfc-editor.org/info/rfc6234>.",
      "zh-CHS": "[RFC6234]Eastlake 3rd，D.和T.Hansen，“美国安全哈希算法（基于SHA和SHA的HMAC和HKDF）”，RFC 6234，DOI 10.17487/RFC6234，2011年5月<http://www.rfc-editor.org/info/rfc6234>."
    },
    {
      "indent": 3,
      "text": "[RFC7748] Langley, A., Hamburg, M., and S. Turner, \"Elliptic Curves for Security\", RFC 7748, DOI 10.17487/RFC7748, January 2016, <http://www.rfc-editor.org/info/rfc7748>.",
      "zh-CHS": "[RFC7748]兰利，A.，汉堡，M.和S.特纳，“安全的椭圆曲线”，RFC 7748，DOI 10.17487/RFC7748，2016年1月<http://www.rfc-editor.org/info/rfc7748>."
    },
    {
      "indent": 0,
      "text": "9.2. Informative References",
      "section_title": true,
      "zh-CHS": "9.2. 资料性引用"
    },
    {
      "indent": 3,
      "text": "[CURVE25519] Bernstein, D., \"Curve25519: new Diffie-Hellman speed records\", DOI 10.1007/11745853_14, February 2006, <http://cr.yp.to/ecdh.html>.",
      "zh-CHS": "[CURVE25519]Bernstein，D.，“CURVE25519:新的Diffie-Hellman速度记录”，DOI 10.1007/11745853_14，2006年2月<http://cr.yp.to/ecdh.html>."
    },
    {
      "indent": 3,
      "text": "[ED25519-LIBGCRYPT-TEST-VECTORS] Koch, W., \"Ed25519 Libgcrypt test vectors\", July 2014, <http://git.gnupg.org/cgi-bin/ gitweb.cgi?p=libgcrypt.git;a=blob;f=tests/t-ed25519.inp; h=e13566f826321eece65e02c593bc7d885b3dbe23;hb=refs/ heads/master>.",
      "zh-CHS": "[ED25519-LIBGCRYPT-TEST-VECTORS]科赫，W.，“ED25519-LIBGCRYPT测试向量”，2014年7月<http://git.gnupg.org/cgi-bin/ gitweb.cgi？p=libgcrypt.git；a=水滴；f=试验/t-ed25519.inp；h=e13566f826321eece65e02c593bc7d885b3dbe23；hb=refs/heads/master>。"
    },
    {
      "indent": 3,
      "text": "[ED25519-TEST-VECTORS] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"Ed25519 test vectors\", July 2011, <http://ed25519.cr.yp.to/python/sign.input>.",
      "zh-CHS": "[ED25519-测试向量]Bernstein，D.，Duif，N.，Lange，T.，Schwabe，P.，和B.Yang，“ED25519测试向量”，2011年7月<http://ed25519.cr.yp.to/python/sign.input>."
    },
    {
      "indent": 3,
      "text": "[ED448] Hamburg, M., \"Ed448-Goldilocks, a new elliptic curve\", June 2015, <http://eprint.iacr.org/2015/625>.",
      "zh-CHS": "[ED448]汉堡，M.，“ED448金发姑娘，一条新的椭圆曲线”，2015年6月<http://eprint.iacr.org/2015/625>."
    },
    {
      "indent": 3,
      "text": "[EDDSA] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"High-speed high-security signatures\", DOI 10.1007/978-3-642-23951-9_9, September 2011, <http://ed25519.cr.yp.to/ed25519-20110926.pdf>.",
      "zh-CHS": "[EDDSA]Bernstein，D.，Duif，N.，Lange，T.，Schwabe，P.，和B.Yang，“高速高安全签名”，DOI 10.1007/978-3-642-23951-9，2011年9月<http://ed25519.cr.yp.to/ed25519-20110926.pdf>."
    },
    {
      "indent": 3,
      "text": "[EDDSA2] Bernstein, D., Josefsson, S., Lange, T., Schwabe, P., and B. Yang, \"EdDSA for more curves\", July 2015, <http://ed25519.cr.yp.to/eddsa-20150704.pdf>.",
      "zh-CHS": "[EDDSA2]Bernstein，D.，Josefsson，S.，Lange，T.，Schwabe，P.，和B.Yang，“更多曲线的EdDSA”，2015年7月<http://ed25519.cr.yp.to/eddsa-20150704.pdf>."
    },
    {
      "indent": 3,
      "text": "[Edwards-revisited] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Twisted Edwards Curves Revisited\", DOI 10.1007/978-3-540-89255-7_20, December 2008, <http://eprint.iacr.org/2008/522>.",
      "zh-CHS": "[爱德华兹重访]Hisil，H.，Wong，K.，Carter，G.，和E.Dawson，“重访扭曲的爱德华兹曲线”，内政部10.1007/978-3-540-89255-7僈，2008年12月<http://eprint.iacr.org/2008/522>."
    },
    {
      "indent": 3,
      "text": "[EFD-ADD] Bernstein, D. and T. Lange, \"Projective coordinates for Edwards curves\", The 'add-2007-bl' addition formulas, 2007, <http://www.hyperelliptic.org/EFD/g1p/ auto-edwards-projective.html#addition-add-2007-bl>.",
      "zh-CHS": "[EFD-ADD]Bernstein，D.和T.Lange，“Edwards曲线的投影坐标”，'ADD-2007-bl'加法公式，2007<http://www.hyperelliptic.org/EFD/g1p/ auto-edwards projective.html#addition-add-2007-bl>。"
    },
    {
      "indent": 3,
      "text": "[EFD-DBL] Bernstein, D. and T. Lange, \"Projective coordinates for Edwards curves\", The 'dbl-2007-bl' doubling formulas, 2007, <http://www.hyperelliptic.org/EFD/g1p/ auto-edwards-projective.html#doubling-dbl-2007-bl>.",
      "zh-CHS": "[EFD-DBL]Bernstein，D.和T.Lange，“爱德华兹曲线的投影坐标”，'DBL-2007-bl'倍增公式，2007<http://www.hyperelliptic.org/EFD/g1p/ auto-edwards projective.html#double-dbl-2007-bl>。"
    },
    {
      "indent": 3,
      "text": "[EFD-TWISTED-ADD] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Extended coordinates with a=-1 for twisted Edwards curves\", The 'add-2008-hwcd-3' addition formulas, December 2008, <http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#addition-add-2008-hwcd-3>.",
      "zh-CHS": "[EFD-TWISTED-ADD]Hisil，H.，Wong，K.，Carter，G.，和E.Dawson，“扭曲爱德华兹曲线a=-1的扩展坐标”，'ADD-2008-hwcd-3'加法公式，2008年12月<http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#addition-add-2008-hwcd-3>。"
    },
    {
      "indent": 3,
      "text": "[EFD-TWISTED-DBL] Hisil, H., Wong, K., Carter, G., and E. Dawson, \"Extended coordinates with a=-1 for twisted Edwards curves\", The 'dbl-2008-hwcd' doubling formulas, December 2008, <http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#doubling-dbl-2008-hwcd>.",
      "zh-CHS": "[EFD-TWISTED-DBL]Hisil，H.，Wong，K.，Carter，G.，和E.Dawson，“扭曲爱德华兹曲线a=-1的扩展坐标”，DBL-2008-hwcd倍增公式，2008年12月<http://www.hyperelliptic.org/EFD/g1p/ auto-twisted-extended-1.html#double-dbl-2008-hwcd>。"
    },
    {
      "indent": 3,
      "text": "[Faster-ECC] Bernstein, D. and T. Lange, \"Faster addition and doubling on elliptic curves\", DOI 10.1007/978-3-540-76900-2_3, July 2007, <http://eprint.iacr.org/2007/286>.",
      "zh-CHS": "[Faster ECC]Bernstein，D.和T.Lange，“椭圆曲线上的快速加法和倍增”，DOI 10.1007/978-3-540-76900-2!3，2007年7月<http://eprint.iacr.org/2007/286>."
    },
    {
      "indent": 3,
      "text": "[RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, \"Randomness Requirements for Security\", BCP 106, RFC 4086, DOI 10.17487/RFC4086, June 2005, <http://www.rfc-editor.org/info/rfc4086>.",
      "zh-CHS": "[RFC4086]Eastlake 3rd，D.，Schiller，J.，和S.Crocker，“安全的随机性要求”，BCP 106，RFC 4086，DOI 10.17487/RFC4086，2005年6月<http://www.rfc-editor.org/info/rfc4086>."
    },
    {
      "indent": 0,
      "text": "Appendix A. Ed25519/Ed448 Python Library",
      "zh-CHS": "附录A.Ed25519/Ed448 Python库"
    },
    {
      "indent": 3,
      "text": "Below is an example implementation of Ed25519/Ed448 written in Python; version 3.2 or higher is required.",
      "zh-CHS": "下面是用Python编写的Ed25519/Ed448的示例实现；需要3.2版或更高版本。"
    },
    {
      "indent": 3,
      "text": "Note: This code is not intended for production. Although it should produce correct results for every input, it is slow and makes no attempt to avoid side-channel attacks.",
      "zh-CHS": "注：此代码不适用于生产。虽然它应该为每个输入生成正确的结果，但速度很慢，并且不会试图避免侧通道攻击。"
    },
    {
      "indent": 0,
      "text": "import hashlib;\nimport os;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Compute candidate square root of x modulo p, with p = 3 (mod 4).\ndef sqrt4k3(x,p): return pow(x,(p + 1)//4,p)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Compute candidate square root of x modulo p, with p = 5 (mod 8).\ndef sqrt8k5(x,p):\n    y = pow(x,(p+3)//8,p)\n    #If the square root exists, it is either y or y*2^(p-1)/4.\n    if (y * y) % p == x % p: return y\n    else:\n        z = pow(2,(p - 1)//4,p)\n        return (y * z) % p",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Decode a hexadecimal string representation of the integer.\ndef hexi(s): return int.from_bytes(bytes.fromhex(s),byteorder=\"big\")",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Rotate a word x by b places to the left.\ndef rol(x,b): return ((x << b) | (x >> (64 - b))) & (2**64-1)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#From little endian.\ndef from_le(s): return int.from_bytes(s, byteorder=\"little\")",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Do the SHA-3 state transform on state s.\ndef sha3_transform(s):\n    ROTATIONS = [0,1,62,28,27,36,44,6,55,20,3,10,43,25,39,41,45,15,\\\n                 21,8,18,2,61,56,14]\n    PERMUTATION = [1,6,9,22,14,20,2,12,13,19,23,15,4,24,21,8,16,5,3,\\\n                   18,17,11,7,10]\n    RC = [0x0000000000000001,0x0000000000008082,0x800000000000808a,\\\n          0x8000000080008000,0x000000000000808b,0x0000000080000001,\\\n          0x8000000080008081,0x8000000000008009,0x000000000000008a,\\\n          0x0000000000000088,0x0000000080008009,0x000000008000000a,\\\n          0x000000008000808b,0x800000000000008b,0x8000000000008089,\\\n          0x8000000000008003,0x8000000000008002,0x8000000000000080,\\\n          0x000000000000800a,0x800000008000000a,0x8000000080008081,\\\n          0x8000000000008080,0x0000000080000001,0x8000000080008008]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "for rnd in range(0,24):\n    #AddColumnParity (Theta)\n    c = [0]*5;\n    d = [0]*5;\n    for i in range(0,25): c[i%5]^=s[i]\n    for i in range(0,5): d[i]=c[(i+4)%5]^rol(c[(i+1)%5],1)\n    for i in range(0,25): s[i]^=d[i%5]\n    #RotateWords (Rho)\n    for i in range(0,25): s[i]=rol(s[i],ROTATIONS[i])\n    #PermuteWords (Pi)\n    t = s[PERMUTATION[0]]\n    for i in range(0,len(PERMUTATION)-1):\n        s[PERMUTATION[i]]=s[PERMUTATION[i+1]]\n    s[PERMUTATION[-1]]=t;\n    #NonlinearMixRows (Chi)\n    for i in range(0,25,5):\n        t=[s[i],s[i+1],s[i+2],s[i+3],s[i+4],s[i],s[i+1]]\n        for j in range(0,5): s[i+j]=t[j]^((~t[j+1])&(t[j+2]))\n    #AddRoundConstant (Iota)\n    s[0]^=RC[rnd]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Reinterpret octet array b to word array and XOR it to state s.\ndef reinterpret_to_words_and_xor(s,b):\n    for j in range(0,len(b)//8):\n        s[j]^=from_le(b[8*j:][:8])",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Reinterpret word array w to octet array and return it.\ndef reinterpret_to_octets(w):\n    mp=bytearray()\n    for j in range(0,len(w)):\n        mp+=w[j].to_bytes(8,byteorder=\"little\")\n    return mp",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#(semi-)generic SHA-3 implementation\ndef sha3_raw(msg,r_w,o_p,e_b):\n    r_b=8*r_w\n    s=[0]*25\n    #Handle whole blocks.\n    idx=0\n    blocks=len(msg)//r_b\n    for i in range(0,blocks):\n        reinterpret_to_words_and_xor(s,msg[idx:][:r_b])\n        idx+=r_b\n        sha3_transform(s)\n    #Handle last block padding.\n    m=bytearray(msg[idx:])\n    m.append(o_p)\n    while len(m) < r_b: m.append(0)\n    m[len(m)-1]|=128\n    #Handle padded last block.\n    reinterpret_to_words_and_xor(s,m)\n    sha3_transform(s)\n    #Output.\n    out = bytearray()\n    while len(out)<e_b:\n        out+=reinterpret_to_octets(s[:r_w])\n        sha3_transform(s)\n    return out[:e_b]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Implementation of SHAKE256 functions.\ndef shake256(msg,olen): return sha3_raw(msg,17,31,olen)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#A (prime) field element.\nclass Field:\n    #Construct number x (mod p).\n    def __init__(self,x,p):\n        self.__x=x%p\n        self.__p=p\n    #Check that fields of self and y are the same.\n    def __check_fields(self,y):\n        if type(y) is not Field or self.__p!=y.__p:\n            raise ValueError(\"Fields don't match\")\n    #Field addition.  The fields must match.\n    def __add__(self,y):\n        self.__check_fields(y)\n        return Field(self.__x+y.__x,self.__p)\n    #Field subtraction.  The fields must match.\n    def __sub__(self,y):\n        self.__check_fields(y)\n        return Field(self.__p+self.__x-y.__x,self.__p)\n    #Field negation.\n    def __neg__(self):\n        return Field(self.__p-self.__x,self.__p)\n    #Field multiplication.  The fields must match.\n    def __mul__(self,y):\n        self.__check_fields(y)\n        return Field(self.__x*y.__x,self.__p)\n    #Field division.  The fields must match.\n    def __truediv__(self,y):\n        return self*y.inv()\n    #Field inverse (inverse of 0 is 0).\n    def inv(self):\n        return Field(pow(self.__x,self.__p-2,self.__p),self.__p)\n    #Field square root.  Returns none if square root does not exist.\n    #Note: not presently implemented for p mod 8 = 1 case.\n    def sqrt(self):\n        #Compute candidate square root.\n        if self.__p%4==3: y=sqrt4k3(self.__x,self.__p)\n        elif self.__p%8==5: y=sqrt8k5(self.__x,self.__p)\n        else: raise NotImplementedError(\"sqrt(_,8k+1)\")\n        _y=Field(y,self.__p);\n        #Check square root candidate valid.\n        return _y if _y*_y==self else None\n    #Make the field element with the same field as this, but\n    #with a different value.\n    def make(self,ival): return Field(ival,self.__p)\n    #Is the field element the additive identity?\n    def iszero(self): return self.__x==0\n    #Are field elements equal?\n    def __eq__(self,y): return self.__x==y.__x and self.__p==y.__p",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "#Are field elements not equal?\ndef __ne__(self,y): return not (self==y)\n#Serialize number to b-1 bits.\ndef tobytes(self,b):\n    return self.__x.to_bytes(b//8,byteorder=\"little\")\n#Unserialize number from bits.\ndef frombytes(self,x,b):\n    rv=from_le(x)%(2**(b-1))\n    return Field(rv,self.__p) if rv<self.__p else None\n#Compute sign of number, 0 or 1.  The sign function\n#has the following property:\n#sign(x) = 1 - sign(-x) if x != 0.\ndef sign(self): return self.__x%2",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#A point on (twisted) Edwards curve.\nclass EdwardsPoint:\n    #base_field = None\n    #x = None\n    #y = None\n    #z = None\n    def initpoint(self, x, y):\n        self.x=x\n        self.y=y\n        self.z=self.base_field.make(1)\n    def decode_base(self,s,b):\n        #Check that point encoding is the correct length.\n        if len(s)!=b//8: return (None,None)\n        #Extract signbit.\n        xs=s[(b-1)//8]>>((b-1)&7)\n        #Decode y.  If this fails, fail.\n        y = self.base_field.frombytes(s,b)\n        if y is None: return (None,None)\n        #Try to recover x.  If it does not exist, or if zero and xs\n        #are wrong, fail.\n        x=self.solve_x2(y).sqrt()\n        if x is None or (x.iszero() and xs!=x.sign()):\n            return (None,None)\n        #If sign of x isn't correct, flip it.\n        if x.sign()!=xs: x=-x\n        # Return the constructed point.\n        return (x,y)\n    def encode_base(self,b):\n        xp,yp=self.x/self.z,self.y/self.z\n        #Encode y.\n        s=bytearray(yp.tobytes(b))\n        #Add sign bit of x to encoding.\n        if xp.sign()!=0: s[(b-1)//8]|=1<<(b-1)%8\n        return s",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "def __mul__(self,x):\n    r=self.zero_elem()\n    s=self\n    while x > 0:\n        if (x%2)>0:\n            r=r+s\n        s=s.double()\n        x=x//2\n    return r\n#Check that two points are equal.\ndef __eq__(self,y):\n    #Need to check x1/z1 == x2/z2 and similarly for y, so cross\n    #multiply to eliminate divisions.\n    xn1=self.x*y.z\n    xn2=y.x*self.z\n    yn1=self.y*y.z\n    yn2=y.y*self.z\n    return xn1==xn2 and yn1==yn2\n#Check if two points are not equal.\ndef __ne__(self,y): return not (self==y)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#A point on Edwards25519.\nclass Edwards25519Point(EdwardsPoint):\n    #Create a new point on the curve.\n    base_field=Field(1,2**255-19)\n    d=-base_field.make(121665)/base_field.make(121666)\n    f0=base_field.make(0)\n    f1=base_field.make(1)\n    xb=base_field.make(hexi(\"216936D3CD6E53FEC0A4E231FDD6DC5C692CC76\"+\\\n        \"09525A7B2C9562D608F25D51A\"))\n    yb=base_field.make(hexi(\"666666666666666666666666666666666666666\"+\\\n        \"6666666666666666666666658\"))\n    #The standard base point.\n    @staticmethod\n    def stdbase():\n        return Edwards25519Point(Edwards25519Point.xb,\\\n            Edwards25519Point.yb)\n    def __init__(self,x,y):\n        #Check the point is actually on the curve.\n        if y*y-x*x!=self.f1+self.d*x*x*y*y:\n            raise ValueError(\"Invalid point\")\n        self.initpoint(x, y)\n        self.t=x*y\n    #Decode a point representation.\n    def decode(self,s):\n        x,y=self.decode_base(s,256);\n        return Edwards25519Point(x, y) if x is not None else None",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "#Encode a point representation.\ndef encode(self):\n    return self.encode_base(256)\n#Construct a neutral point on this curve.\ndef zero_elem(self):\n    return Edwards25519Point(self.f0,self.f1)\n#Solve for x^2.\ndef solve_x2(self,y):\n    return ((y*y-self.f1)/(self.d*y*y+self.f1))\n#Point addition.\ndef __add__(self,y):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    zcp=self.z*y.z\n    A=(self.y-self.x)*(y.y-y.x)\n    B=(self.y+self.x)*(y.y+y.x)\n    C=(self.d+self.d)*self.t*y.t\n    D=zcp+zcp\n    E,H=B-A,B+A\n    F,G=D-C,D+C\n    tmp.x,tmp.y,tmp.z,tmp.t=E*F,G*H,F*G,E*H\n    return tmp\n#Point doubling.\ndef double(self):\n    #The formulas are from EFD (with assumption a=-1 propagated).\n    tmp=self.zero_elem()\n    A=self.x*self.x\n    B=self.y*self.y\n    Ch=self.z*self.z\n    C=Ch+Ch\n    H=A+B\n    xys=self.x+self.y\n    E=H-xys*xys\n    G=A-B\n    F=C+G\n    tmp.x,tmp.y,tmp.z,tmp.t=E*F,G*H,F*G,E*H\n    return tmp\n#Order of basepoint.\ndef l(self):\n    return hexi(\"1000000000000000000000000000000014def9dea2f79cd\"+\\\n        \"65812631a5cf5d3ed\")\n#The logarithm of cofactor.\ndef c(self): return 3\n#The highest set bit\ndef n(self): return 254\n#The coding length\ndef b(self): return 256",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "#Validity check (for debugging)\ndef is_valid_point(self):\n    x,y,z,t=self.x,self.y,self.z,self.t\n    x2=x*x\n    y2=y*y\n    z2=z*z\n    lhs=(y2-x2)*z2\n    rhs=z2*z2+self.d*x2*y2\n    assert(lhs == rhs)\n    assert(t*z == x*y)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#A point on Edwards448.\nclass Edwards448Point(EdwardsPoint):\n    #Create a new point on the curve.\n    base_field=Field(1,2**448-2**224-1)\n    d=base_field.make(-39081)\n    f0=base_field.make(0)\n    f1=base_field.make(1)\n    xb=base_field.make(hexi(\"4F1970C66BED0DED221D15A622BF36DA9E14657\"+\\\n        \"0470F1767EA6DE324A3D3A46412AE1AF72AB66511433B80E18B00938E26\"+\\\n        \"26A82BC70CC05E\"))\n    yb=base_field.make(hexi(\"693F46716EB6BC248876203756C9C7624BEA737\"+\\\n        \"36CA3984087789C1E05A0C2D73AD3FF1CE67C39C4FDBD132C4ED7C8AD98\"+\\\n        \"08795BF230FA14\"))\n    #The standard base point.\n    @staticmethod\n    def stdbase():\n        return Edwards448Point(Edwards448Point.xb,Edwards448Point.yb)\n    def __init__(self,x,y):\n        #Check that the point is actually on the curve.\n        if y*y+x*x!=self.f1+self.d*x*x*y*y:\n            raise ValueError(\"Invalid point\")\n        self.initpoint(x, y)\n    #Decode a point representation.\n    def decode(self,s):\n        x,y=self.decode_base(s,456);\n        return Edwards448Point(x, y) if x is not None else None\n    #Encode a point representation.\n    def encode(self):\n        return self.encode_base(456)\n    #Construct a neutral point on this curve.\n    def zero_elem(self):\n        return Edwards448Point(self.f0,self.f1)\n    #Solve for x^2.\n    def solve_x2(self,y):\n        return ((y*y-self.f1)/(self.d*y*y-self.f1))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "#Point addition.\ndef __add__(self,y):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    xcp,ycp,zcp=self.x*y.x,self.y*y.y,self.z*y.z\n    B=zcp*zcp\n    E=self.d*xcp*ycp\n    F,G=B-E,B+E\n    tmp.x=zcp*F*((self.x+self.y)*(y.x+y.y)-xcp-ycp)\n    tmp.y,tmp.z=zcp*G*(ycp-xcp),F*G\n    return tmp\n#Point doubling.\ndef double(self):\n    #The formulas are from EFD.\n    tmp=self.zero_elem()\n    x1s,y1s,z1s=self.x*self.x,self.y*self.y,self.z*self.z\n    xys=self.x+self.y\n    F=x1s+y1s\n    J=F-(z1s+z1s)\n    tmp.x,tmp.y,tmp.z=(xys*xys-x1s-y1s)*J,F*(x1s-y1s),F*J\n    return tmp\n#Order of basepoint.\ndef l(self):\n    return hexi(\"3ffffffffffffffffffffffffffffffffffffffffffffff\"+\\\n        \"fffffffff7cca23e9c44edb49aed63690216cc2728dc58f552378c2\"+\\\n        \"92ab5844f3\")\n#The logarithm of cofactor.\ndef c(self): return 2\n#The highest set bit.\ndef n(self): return 447\n#The coding length.\ndef b(self): return 456\n#Validity check (for debugging).\ndef is_valid_point(self):\n    x,y,z=self.x,self.y,self.z\n    x2=x*x\n    y2=y*y\n    z2=z*z\n    lhs=(x2+y2)*z2\n    rhs=z2*z2+self.d*x2*y2\n    assert(lhs == rhs)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Simple self-check.\ndef curve_self_check(point):\n    p=point\n    q=point.zero_elem()\n    z=q\n    l=p.l()+1\n    p.is_valid_point()\n    q.is_valid_point()\n    for i in range(0,point.b()):\n        if (l>>i)&1 != 0:\n            q=q+p\n            q.is_valid_point()\n        p=p.double()\n        p.is_valid_point()\n    assert q.encode() == point.encode()\n    assert q.encode() != p.encode()\n    assert q.encode() != z.encode()",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#Simple self-check.\ndef self_check_curves():\n    curve_self_check(Edwards25519Point.stdbase())\n    curve_self_check(Edwards448Point.stdbase())",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#PureEdDSA scheme.\n#Limitation: only b mod 8 = 0 is handled.\nclass PureEdDSA:\n    #Create a new object.\n    def __init__(self,properties):\n        self.B=properties[\"B\"]\n        self.H=properties[\"H\"]\n        self.l=self.B.l()\n        self.n=self.B.n()\n        self.b=self.B.b()\n        self.c=self.B.c()\n    #Clamp a private scalar.\n    def __clamp(self,a):\n        _a = bytearray(a)\n        for i in range(0,self.c): _a[i//8]&=~(1<<(i%8))\n        _a[self.n//8]|=1<<(self.n%8)\n        for i in range(self.n+1,self.b): _a[i//8]&=~(1<<(i%8))\n        return _a\n    #Generate a key.  If privkey is None, a random one is generated.\n    #In any case, the (privkey, pubkey) pair is returned.\n    def keygen(self,privkey):\n        #If no private key data is given, generate random.\n        if privkey is None: privkey=os.urandom(self.b//8)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "    #Expand key.\n    khash=self.H(privkey,None,None)\n    a=from_le(self.__clamp(khash[:self.b//8]))\n    #Return the key pair (public key is A=Enc(aB).\n    return privkey,(self.B*a).encode()\n#Sign with key pair.\ndef sign(self,privkey,pubkey,msg,ctx,hflag):\n    #Expand key.\n    khash=self.H(privkey,None,None)\n    a=from_le(self.__clamp(khash[:self.b//8]))\n    seed=khash[self.b//8:]\n    #Calculate r and R (R only used in encoded form).\n    r=from_le(self.H(seed+msg,ctx,hflag))%self.l\n    R=(self.B*r).encode()\n    #Calculate h.\n    h=from_le(self.H(R+pubkey+msg,ctx,hflag))%self.l\n    #Calculate s.\n    S=((r+h*a)%self.l).to_bytes(self.b//8,byteorder=\"little\")\n    #The final signature is a concatenation of R and S.\n    return R+S\n#Verify signature with public key.\ndef verify(self,pubkey,msg,sig,ctx,hflag):\n    #Sanity-check sizes.\n    if len(sig)!=self.b//4: return False\n    if len(pubkey)!=self.b//8: return False\n    #Split signature into R and S, and parse.\n    Rraw,Sraw=sig[:self.b//8],sig[self.b//8:]\n    R,S=self.B.decode(Rraw),from_le(Sraw)\n    #Parse public key.\n    A=self.B.decode(pubkey)\n    #Check parse results.\n    if (R is None) or (A is None) or S>=self.l: return False\n    #Calculate h.\n    h=from_le(self.H(Rraw+pubkey+msg,ctx,hflag))%self.l\n    #Calculate left and right sides of check eq.\n    rhs=R+(A*h)\n    lhs=self.B*S\n    for i in range(0, self.c):\n        lhs = lhs.double()\n        rhs = rhs.double()\n    #Check eq. holds?\n    return lhs==rhs",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def Ed25519_inthash(data,ctx,hflag):\n    if (ctx is not None and len(ctx) > 0) or hflag:\n        raise ValueError(\"Contexts/hashes not supported\")\n    return hashlib.sha512(data).digest()",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#The base PureEdDSA schemes.\npEd25519=PureEdDSA({\\\n    \"B\":Edwards25519Point.stdbase(),\\\n    \"H\":Ed25519_inthash\\\n})",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def Ed25519ctx_inthash(data,ctx,hflag):\n    dompfx = b\"\"\n    PREFIX=b\"SigEd25519 no Ed25519 collisions\"\n    if ctx is not None:\n        if len(ctx) > 255: raise ValueError(\"Context too big\")\n        dompfx=PREFIX+bytes([1 if hflag else 0,len(ctx)])+ctx\n    return hashlib.sha512(dompfx+data).digest()",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pEd25519ctx=PureEdDSA({\\\n    \"B\":Edwards25519Point.stdbase(),\\\n    \"H\":Ed25519ctx_inthash\\\n})",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def Ed448_inthash(data,ctx,hflag):\n    dompfx = b\"\"\n    if ctx is not None:\n        if len(ctx) > 255: raise ValueError(\"Context too big\")\n        dompfx=b\"SigEd448\"+bytes([1 if hflag else 0,len(ctx)])+ctx\n    return shake256(dompfx+data,114)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pEd448 = PureEdDSA({\\\n    \"B\":Edwards448Point.stdbase(),\\\n    \"H\":Ed448_inthash\\\n})",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "#EdDSA scheme.\nclass EdDSA:\n    #Create a new scheme object, with the specified PureEdDSA base\n    #scheme and specified prehash.\n    def __init__(self,pure_scheme,prehash):\n        self.__pflag = True\n        self.__pure=pure_scheme\n        self.__prehash=prehash\n        if self.__prehash is None:\n            self.__prehash = lambda x,y:x\n            self.__pflag = False\n    # Generate a key.  If privkey is none, it generates a random\n    # privkey key, otherwise it uses a specified private key.\n    # Returns pair (privkey, pubkey).\n    def keygen(self,privkey): return self.__pure.keygen(privkey)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "# Sign message msg using specified key pair.\ndef sign(self,privkey,pubkey,msg,ctx=None):\n    if ctx is None: ctx=b\"\";\n    return self.__pure.sign(privkey,pubkey,self.__prehash(msg,ctx),\\\n        ctx,self.__pflag)\n# Verify signature sig on message msg using public key pubkey.\ndef verify(self,pubkey,msg,sig,ctx=None):\n    if ctx is None: ctx=b\"\";\n    return self.__pure.verify(pubkey,self.__prehash(msg,ctx),sig,\\\n        ctx,self.__pflag)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def Ed448ph_prehash(data,ctx): return shake256(data,64)",
      "zh-CHS": "def Ed448ph_预灰分（数据，ctx）：返回数据256（数据，64）"
    },
    {
      "indent": 0,
      "text": "#Our signature schemes.\nEd25519 = EdDSA(pEd25519,None)\nEd25519ctx = EdDSA(pEd25519ctx,None)\nEd25519ph = EdDSA(pEd25519ctx,lambda x,y:hashlib.sha512(x).digest())\nEd448 = EdDSA(pEd448,None)\nEd448ph = EdDSA(pEd448,Ed448ph_prehash)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "def eddsa_obj(name):\n    if name == \"Ed25519\": return Ed25519\n    if name == \"Ed25519ctx\": return Ed25519ctx\n    if name == \"Ed25519ph\": return Ed25519ph\n    if name == \"Ed448\": return Ed448\n    if name == \"Ed448ph\": return Ed448ph\n    raise NotImplementedError(\"Algorithm not implemented\")",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Appendix B. Library Driver",
      "section_title": true,
      "zh-CHS": "附录B.库驱动程序"
    },
    {
      "indent": 3,
      "text": "Below is a command-line tool that uses the library above to perform computations for interactive use or for self-checking.",
      "zh-CHS": "下面是一个命令行工具，它使用上面的库来执行交互使用或自检的计算。"
    },
    {
      "indent": 0,
      "text": "import sys import binascii",
      "zh-CHS": "导入系统导入binascii"
    },
    {
      "indent": 0,
      "text": "from eddsa2 import Ed25519",
      "zh-CHS": "从eddsa2导入Ed25519"
    },
    {
      "indent": 0,
      "text": "def munge_string(s, pos, change):\n    return (s[:pos] +\n            int.to_bytes(s[pos] ^ change, 1, \"little\") +\n            s[pos+1:])",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "# Read a file in the format of\n# http://ed25519.cr.yp.to/python/sign.input\nlineno = 0\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    lineno = lineno + 1\n    print(lineno)\n    fields = line.split(\":\")\n    secret = (binascii.unhexlify(fields[0]))[:32]\n    public = binascii.unhexlify(fields[1])\n    msg = binascii.unhexlify(fields[2])\n    signature = binascii.unhexlify(fields[3])[:64]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "privkey,pubkey = Ed25519.keygen(secret)\nassert public == pubkey\nassert signature == Ed25519.sign(privkey, pubkey, msg)\nassert Ed25519.verify(public, msg, signature)\nif len(msg) == 0:\n    bad_msg = b\"x\"\nelse:\n    bad_msg = munge_string(msg, len(msg) // 3, 4)\nassert not Ed25519.verify(public,bad_msg,signature)\nassert not Ed25519.verify(public, msg, munge_string(signature,20,8))\nassert not Ed25519.verify(public,msg,munge_string(signature,40,16))",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "zh-CHS": "致谢"
    },
    {
      "indent": 3,
      "text": "EdDSA and Ed25519 were initially described in a paper due to Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. The Ed448 curve is due to Mike Hamburg.",
      "zh-CHS": "EdDSA和Ed25519最初是由Daniel J.Bernstein、Niels Duif、Tanja Lange、Peter Schwabe和Bo Yin Yang撰写的一篇论文中描述的。Ed448曲线是由Mike Hamburg造成的。"
    },
    {
      "indent": 3,
      "text": "An earlier draft version of this document was coauthored by Niels Moeller.",
      "zh-CHS": "本文件的早期草稿由Niels Moeller共同撰写。"
    },
    {
      "indent": 3,
      "text": "Feedback on this document was received from Werner Koch, Damien Miller, Bob Bradley, Franck Rondepierre, Alexey Melnikov, Kenny Paterson, and Robert Edmonds.",
      "zh-CHS": "沃纳·科赫、达米恩·米勒、鲍勃·布拉德利、弗朗克·隆德皮尔、亚历克赛·梅尔尼科夫、肯尼·帕特森和罗伯特·埃德蒙兹对本文件提出了反馈意见。"
    },
    {
      "indent": 3,
      "text": "The Ed25519 test vectors were double checked by Bob Bradley using three separate implementations (one based on TweetNaCl and two different implementations based on code from SUPERCOP).",
      "zh-CHS": "Bob Bradley使用三种不同的实现（一种基于TweetNaCl，两种基于SUPERCOP代码的不同实现）对Ed25519测试向量进行了双重检查。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "zh-CHS": "作者地址"
    },
    {
      "indent": 3,
      "text": "Simon Josefsson SJD AB",
      "zh-CHS": "西蒙·约瑟夫森SJD AB"
    },
    {
      "indent": 3,
      "text": "Email: simon@josefsson.org\nURI:   http://josefsson.org/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "Ilari Liusvaara Independent",
      "zh-CHS": "Ilari Liusvaara独立报"
    },
    {
      "indent": 3,
      "text": "Email: ilariliusvaara@welho.com",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}