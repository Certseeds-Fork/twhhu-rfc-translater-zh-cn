{
  "title": {
    "text": "RFC 9000: QUIC: A UDP-Based Multiplexed and Secure Transport",
    "zh-CHS": "RFC 9000"
  },
  "number": 9000,
  "created_at": "2021-10-28 02:49:38.382542+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Example Structure {\n  One-bit Field (1),\n  7-bit Field with Fixed Value (7) = 61,\n  Field with Variable-Length Integer (i),\n  Arbitrary-Length Field (..),\n  Variable-Length Field (8..24),\n  Field With Minimum Length (16..),\n  Field With Maximum Length (..128),\n  [Optional Field (64)],\n  Repeated Field (8) ...,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    o\n    | Create Stream (Sending)\n    | Peer Creates Bidirectional Stream\n    v\n+-------+\n| Ready | Send RESET_STREAM\n|       |-----------------------.\n+-------+                       |\n    |                           |\n    | Send STREAM /             |\n    |      STREAM_DATA_BLOCKED  |\n    v                           |\n+-------+                       |\n| Send  | Send RESET_STREAM     |\n|       |---------------------->|\n+-------+                       |\n    |                           |\n    | Send STREAM + FIN         |\n    v                           v\n+-------+                   +-------+\n| Data  | Send RESET_STREAM | Reset |\n| Sent  |------------------>| Sent  |\n+-------+                   +-------+\n    |                           |\n    | Recv All ACKs             | Recv ACK\n    v                           v\n+-------+                   +-------+\n| Data  |                   | Reset |\n| Recvd |                   | Recvd |\n+-------+                   +-------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "    o\n    | Recv STREAM / STREAM_DATA_BLOCKED / RESET_STREAM\n    | Create Bidirectional Stream (Sending)\n    | Recv MAX_STREAM_DATA / STOP_SENDING (Bidirectional)\n    | Create Higher-Numbered Stream\n    v\n+-------+\n| Recv  | Recv RESET_STREAM\n|       |-----------------------.\n+-------+                       |\n    |                           |\n    | Recv STREAM + FIN         |\n    v                           |\n+-------+                       |\n| Size  | Recv RESET_STREAM     |\n| Known |---------------------->|\n+-------+                       |\n    |                           |\n    | Recv All Data             |\n    v                           v\n+-------+ Recv RESET_STREAM +-------+\n| Data  |--- (optional) --->| Reset |\n| Recvd |  Recv All Data    | Recvd |\n+-------+<-- (optional) ----+-------+\n    |                           |\n    | App Read All Data         | App Read Reset\n    v                           v\n+-------+                   +-------+\n| Data  |                   | Reset |\n| Read  |                   | Read  |\n+-------+                   +-------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial (CRYPTO)\n0-RTT (*)              ---------->\n                                           Initial (CRYPTO)\n                                         Handshake (CRYPTO)\n                       <----------                1-RTT (*)\nHandshake (CRYPTO)\n1-RTT (*)              ---------->\n                       <----------   1-RTT (HANDSHAKE_DONE)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1-RTT                  <=========>                    1-RTT",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial[0]: CRYPTO[CH] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 23,
      "text": "          Initial[0]: CRYPTO[SH] ACK[0]\nHandshake[0]: CRYPTO[EE, CERT, CV, FIN]\n          <- 1-RTT[0]: STREAM[1, \"...\"]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Initial[1]: ACK[0]\nHandshake[0]: CRYPTO[FIN], ACK[0]\n1-RTT[0]: STREAM[0, \"...\"], ACK[0] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": " Handshake[1]: ACK[0] <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, \"...\"], ACK[0]",
      "zh-CHS": "握手[1]：确认[0]<-1-RTT[1]：握手完成，流[3，“…”]，确认[0]"
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial[0]: CRYPTO[CH]\n0-RTT[0]: STREAM[0, \"...\"] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 26,
      "text": "       Initial[0]: CRYPTO[SH] ACK[0]\n        Handshake[0] CRYPTO[EE, FIN]\n<- 1-RTT[0]: STREAM[1, \"...\"] ACK[0]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Initial[1]: ACK[0]\nHandshake[0]: CRYPTO[FIN], ACK[0]\n1-RTT[1]: STREAM[0, \"...\"] ACK[0] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 9,
      "text": " Handshake[1]: ACK[0] <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, \"...\"], ACK[1]",
      "zh-CHS": "握手[1]：确认[0]<-1-RTT[1]：握手完成，流[3，“…”]，确认[1]"
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial: DCID=S1, SCID=C1 ->\n                                  <- Initial: DCID=C1, SCID=S3\n                             ...\n1-RTT: DCID=S3 ->\n                                             <- 1-RTT: DCID=C1",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial: DCID=S1, SCID=C1 ->\n                                    <- Retry: DCID=C1, SCID=S2\nInitial: DCID=S2, SCID=C1 ->\n                                  <- Initial: DCID=C1, SCID=S3\n                             ...\n1-RTT: DCID=S3 ->\n                                             <- 1-RTT: DCID=C1",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Client Server",
      "zh-CHS": "客户端服务器"
    },
    {
      "indent": 0,
      "text": "Initial[0]: CRYPTO[CH] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 48,
      "text": "<- Retry+Token",
      "zh-CHS": "<-重试+令牌"
    },
    {
      "indent": 0,
      "text": "Initial+Token[1]: CRYPTO[CH] ->",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 23,
      "text": "          Initial[0]: CRYPTO[SH] ACK[1]\nHandshake[0]: CRYPTO[EE, CERT, CV, FIN]\n          <- 1-RTT[0]: STREAM[1, \"...\"]",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Stateless Reset {\n  Fixed Bits (2) = 1,\n  Unpredictable Bits (38..),\n  Stateless Reset Token (128),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Packet Payload {\n  Frame (8..) ...,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Frame {\n  Frame Type (i),\n  Type-Dependent Fields (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Long Header Packet {\n  Header Form (1) = 1,\n  Fixed Bit (1) = 1,\n  Long Packet Type (2),\n  Type-Specific Bits (4),\n  Version (32),\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..160),\n  Source Connection ID Length (8),\n  Source Connection ID (0..160),\n  Type-Specific Payload (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Version Negotiation Packet {\n  Header Form (1) = 1,\n  Unused (7),\n  Version (32) = 0,\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..2040),\n  Source Connection ID Length (8),\n  Source Connection ID (0..2040),\n  Supported Version (32) ...,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Initial Packet {\n  Header Form (1) = 1,\n  Fixed Bit (1) = 1,\n  Long Packet Type (2) = 0,\n  Reserved Bits (2),\n  Packet Number Length (2),\n  Version (32),\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..160),\n  Source Connection ID Length (8),\n  Source Connection ID (0..160),\n  Token Length (i),\n  Token (..),\n  Length (i),\n  Packet Number (8..32),\n  Packet Payload (8..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "0-RTT Packet {\n  Header Form (1) = 1,\n  Fixed Bit (1) = 1,\n  Long Packet Type (2) = 1,\n  Reserved Bits (2),\n  Packet Number Length (2),\n  Version (32),\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..160),\n  Source Connection ID Length (8),\n  Source Connection ID (0..160),\n  Length (i),\n  Packet Number (8..32),\n  Packet Payload (8..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Handshake Packet {\n  Header Form (1) = 1,\n  Fixed Bit (1) = 1,\n  Long Packet Type (2) = 2,\n  Reserved Bits (2),\n  Packet Number Length (2),\n  Version (32),\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..160),\n  Source Connection ID Length (8),\n  Source Connection ID (0..160),\n  Length (i),\n  Packet Number (8..32),\n  Packet Payload (8..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Retry Packet {\n  Header Form (1) = 1,\n  Fixed Bit (1) = 1,\n  Long Packet Type (2) = 3,\n  Unused (4),\n  Version (32),\n  Destination Connection ID Length (8),\n  Destination Connection ID (0..160),\n  Source Connection ID Length (8),\n  Source Connection ID (0..160),\n  Retry Token (..),\n  Retry Integrity Tag (128),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1-RTT Packet {\n  Header Form (1) = 0,\n  Fixed Bit (1) = 1,\n  Spin Bit (1),\n  Reserved Bits (2),\n  Key Phase (1),\n  Packet Number Length (2),\n  Destination Connection ID (0..160),\n  Packet Number (8..32),\n  Packet Payload (8..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Transport Parameters {\n  Transport Parameter (..) ...,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Transport Parameter {\n  Transport Parameter ID (i),\n  Transport Parameter Length (i),\n  Transport Parameter Value (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "Preferred Address {\n  IPv4 Address (32),\n  IPv4 Port (16),\n  IPv6 Address (128),\n  IPv6 Port (16),\n  Connection ID Length (8),\n  Connection ID (..),\n  Stateless Reset Token (128),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "PADDING Frame {\n  Type (i) = 0x00,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "PING Frame {\n  Type (i) = 0x01,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "ACK Frame {\n  Type (i) = 0x02..0x03,\n  Largest Acknowledged (i),\n  ACK Delay (i),\n  ACK Range Count (i),\n  First ACK Range (i),\n  ACK Range (..) ...,\n  [ECN Counts (..)],\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "ACK Range {\n  Gap (i),\n  ACK Range Length (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "smallest = largest - ack_range",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "largest = previous_smallest - gap - 2",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "ECN Counts {\n  ECT0 Count (i),\n  ECT1 Count (i),\n  ECN-CE Count (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "RESET_STREAM Frame {\n  Type (i) = 0x04,\n  Stream ID (i),\n  Application Protocol Error Code (i),\n  Final Size (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "STOP_SENDING Frame {\n  Type (i) = 0x05,\n  Stream ID (i),\n  Application Protocol Error Code (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "CRYPTO Frame {\n  Type (i) = 0x06,\n  Offset (i),\n  Length (i),\n  Crypto Data (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "NEW_TOKEN Frame {\n  Type (i) = 0x07,\n  Token Length (i),\n  Token (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "STREAM Frame {\n  Type (i) = 0x08..0x0f,\n  Stream ID (i),\n  [Offset (i)],\n  [Length (i)],\n  Stream Data (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "MAX_DATA Frame {\n  Type (i) = 0x10,\n  Maximum Data (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "MAX_STREAM_DATA Frame {\n  Type (i) = 0x11,\n  Stream ID (i),\n  Maximum Stream Data (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "MAX_STREAMS Frame {\n  Type (i) = 0x12..0x13,\n  Maximum Streams (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "DATA_BLOCKED Frame {\n  Type (i) = 0x14,\n  Maximum Data (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "STREAM_DATA_BLOCKED Frame {\n  Type (i) = 0x15,\n  Stream ID (i),\n  Maximum Stream Data (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "STREAMS_BLOCKED Frame {\n  Type (i) = 0x16..0x17,\n  Maximum Streams (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "NEW_CONNECTION_ID Frame {\n  Type (i) = 0x18,\n  Sequence Number (i),\n  Retire Prior To (i),\n  Length (8),\n  Connection ID (8..160),\n  Stateless Reset Token (128),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "RETIRE_CONNECTION_ID Frame {\n  Type (i) = 0x19,\n  Sequence Number (i),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "PATH_CHALLENGE Frame {\n  Type (i) = 0x1a,\n  Data (64),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "PATH_RESPONSE Frame {\n  Type (i) = 0x1b,\n  Data (64),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "CONNECTION_CLOSE Frame {\n  Type (i) = 0x1c..0x1d,\n  Error Code (i),\n  [Frame Type (i)],\n  Reason Phrase Length (i),\n  Reason Phrase (..),\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "HANDSHAKE_DONE Frame {\n  Type (i) = 0x1e,\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "ReadVarint(data):\n  // The length of variable-length integers is encoded in the\n  // first two bits of the first byte.\n  v = data.next_byte()\n  prefix = v >> 6\n  length = 1 << prefix",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "// Once the length is known, remove these bits and read any\n// remaining bytes.\nv = v & 0x3f\nrepeat length-1 times:\n  v = (v << 8) + data.next_byte()\nreturn v",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "EncodePacketNumber(full_pn, largest_acked):",
      "zh-CHS": "编码包装编号（完整零件号，最大已确认）："
    },
    {
      "indent": 2,
      "text": "// The number of bits must be at least one more\n// than the base-2 logarithm of the number of contiguous\n// unacknowledged packet numbers, including the new packet.\nif largest_acked is None:\n  num_unacked = full_pn + 1\nelse:\n  num_unacked = full_pn - largest_acked",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "min_bits = log(num_unacked, 2) + 1\nnum_bytes = ceil(min_bits / 8)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "// Encode the integer value and truncate to\n// the num_bytes least significant bytes.\nreturn encode(full_pn, num_bytes)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "DecodePacketNumber(largest_pn, truncated_pn, pn_nbits):\n   expected_pn  = largest_pn + 1\n   pn_win       = 1 << pn_nbits\n   pn_hwin      = pn_win / 2\n   pn_mask      = pn_win - 1\n   // The incoming packet number should be greater than\n   // expected_pn - pn_hwin and less than or equal to\n   // expected_pn + pn_hwin\n   //\n   // This means we cannot just strip the trailing bits from\n   // expected_pn and add the truncated_pn because that might\n   // yield a value outside the window.\n   //\n   // The following code calculates a candidate value and\n   // makes sure it's within the packet number window.\n   // Note the extra checks to prevent overflow and underflow.\n   candidate_pn = (expected_pn & ~pn_mask) | truncated_pn\n   if candidate_pn <= expected_pn - pn_hwin and\n      candidate_pn < (1 << 62) - pn_win:\n      return candidate_pn + pn_win\n   if candidate_pn > expected_pn + pn_hwin and\n      candidate_pn >= pn_win:\n      return candidate_pn - pn_win\n   return candidate_pn",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}