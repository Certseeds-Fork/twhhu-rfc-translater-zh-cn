{
  "title": {
    "text": "RFC 9043: FFV1 Video Coding Format Versions 0, 1, and 3",
    "zh-CHS": "RFC 9043"
  },
  "number": 9043,
  "created_at": "2021-10-28 02:53:50.445946+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nExamplePseudoCode( ) {                                        |\n    value                                                     | ur\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "a++, a--\n!a, -a\na ^ b\na * b, a / b\na + b, a - b\na << b, a >> b\na < b, a <= b, a > b, a >= b\na == b, a != b\na & b\na | b\na && b\na || b\na ? b : c\na = b, a += b, a -= b, a *= b",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "+---+---+---+---+---+---+---+---+\n| 0 | 0 |   | 0 | 0 | 0 |   | 0 |\n+---+---+---+---+---+---+---+---+\n| 0 | 0 |   | 0 | 0 | 0 |   | 0 |\n+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+\n| 0 | 0 |   | a | b | c |   | c |\n+---+---+---+---+---+---+---+---+\n| 0 | a |   | d | e | f |   | f |\n+---+---+---+---+---+---+---+---+\n| 0 | d |   | g | h | i |   | i |\n+---+---+---+---+---+---+---+---+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "+---+---+---+---+\n|   |   | T |   |\n+---+---+---+---+\n|   |tl | t |tr |\n+---+---+---+---+\n| L | l | X |   |\n+---+---+---+---+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "median(l, t, l + t - tl)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "median(left16s, top16s, left16s + top16s - diag16s)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "left16s = l  >= 32768 ? ( l  - 65536 ) : l\ntop16s  = t  >= 32768 ? ( t  - 65536 ) : t\ndiag16s = tl >= 32768 ? ( tl - 65536 ) : tl",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "+------------------------+------------------------+\n| Pixel(1,1)             | Pixel(2,1)             |\n| Y(1,1) Cb(1,1) Cr(1,1) | Y(2,1) Cb(2,1) Cr(2,1) |\n+------------------------+------------------------+\n| Pixel(1,2)             | Pixel(2,2)             |\n| Y(1,2) Cb(1,2) Cr(1,2) | Y(2,2) Cb(2,2) Cr(2,2) |\n+------------------------+------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "range = 0xFF00;\nend   = 0;\nlow   = get_bits(16);\nif (low >= range) {\n    low = range;\n    end = 1;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "refill() {\n    if (range < 256) {\n        range = range * 256;\n        low   = low * 256;\n        if (!end) {\n            c.low += get_bits(8);\n            if (remaining_bits_in_bitstream( NumBytes ) == 0) {\n                end = 1;\n            }\n        }\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "get_rac(state) {\n    rangeoff  = (range * state) / 256;\n    range    -= rangeoff;\n    if (low < range) {\n        state = zero_state[state];\n        refill();\n        return 0;\n    } else {\n        low   -= range;\n        state  = one_state[state];\n        range  = rangeoff;\n        refill();\n        return 1;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "int get_symbol(RangeCoder *c, uint8_t *state, int is_signed) {\n    if (get_rac(c, state + 0) {\n        return 0;\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "int e = 0;\nwhile (get_rac(c, state + 1 + min(e, 9)) { //1..10\n    e++;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "int a = 1;\nfor (int i = e - 1; i >= 0; i--) {\n    a = a * 2 + get_rac(c, state + 22 + min(i, 9));  // 22..31\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "if (!is_signed) {\n    return a;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "    if (get_rac(c, state + 11 + min(e, 10))) { //11..21\n        return -a;\n    } else {\n        return a;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 23, 24, 25, 26, 27,",
      "zh-CHS": "0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 22, 23, 24, 25, 26, 27,"
    },
    {
      "indent": 1,
      "text": "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42,",
      "zh-CHS": "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42,"
    },
    {
      "indent": 1,
      "text": "43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57,",
      "zh-CHS": "43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57,"
    },
    {
      "indent": 1,
      "text": "58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,",
      "zh-CHS": "58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,"
    },
    {
      "indent": 1,
      "text": "74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,",
      "zh-CHS": "74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,"
    },
    {
      "indent": 1,
      "text": "89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99,100,101,102,103,",
      "zh-CHS": "89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99,100,101,102,103,"
    },
    {
      "indent": 0,
      "text": "104,105,106,107,108,109,110,111,112,113,114,114,115,116,117,118,",
      "zh-CHS": "104,105,106,107,108,109,110,111,112,113,114,114,115,116,117,118,"
    },
    {
      "indent": 0,
      "text": "119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,133,",
      "zh-CHS": "119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,133,"
    },
    {
      "indent": 0,
      "text": "134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,",
      "zh-CHS": "134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,"
    },
    {
      "indent": 0,
      "text": "150,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,",
      "zh-CHS": "150,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,"
    },
    {
      "indent": 0,
      "text": "165,166,167,168,169,170,171,171,172,173,174,175,176,177,178,179,",
      "zh-CHS": "165,166,167,168,169,170,171,171,172,173,174,175,176,177,178,179,"
    },
    {
      "indent": 0,
      "text": "180,181,182,183,184,185,186,187,188,189,190,190,191,192,194,194,",
      "zh-CHS": "180,181,182,183,184,185,186,187,188,189,190,190,191,192,194,194,"
    },
    {
      "indent": 0,
      "text": "195,196,197,198,199,200,201,202,202,204,205,206,207,208,209,209,",
      "zh-CHS": "195,196,197,198,199,200,201,202,202,204,205,206,207,208,209,209,"
    },
    {
      "indent": 0,
      "text": "210,211,212,213,215,215,216,217,218,219,220,220,222,223,224,225,",
      "zh-CHS": "210,211,212,213,215,215,216,217,218,219,220,220,222,223,224,225,"
    },
    {
      "indent": 0,
      "text": "226,227,227,229,229,230,231,232,234,234,235,236,237,238,239,240,",
      "zh-CHS": "226,227,227,229,229,230,231,232,234,234,235,236,237,238,239,240,"
    },
    {
      "indent": 0,
      "text": "241,242,243,244,245,246,247,248,248, 0, 0, 0, 0, 0, 0, 0,",
      "zh-CHS": "241,242,243,244,245,246,247,248,248, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
      "indent": 2,
      "text": "0, 10, 10, 10, 10, 16, 16, 16, 28, 16, 16, 29, 42, 49, 20, 49,",
      "zh-CHS": "0, 10, 10, 10, 10, 16, 16, 16, 28, 16, 16, 29, 42, 49, 20, 49,"
    },
    {
      "indent": 1,
      "text": "59, 25, 26, 26, 27, 31, 33, 33, 33, 34, 34, 37, 67, 38, 39, 39,",
      "zh-CHS": "59, 25, 26, 26, 27, 31, 33, 33, 33, 34, 34, 37, 67, 38, 39, 39,"
    },
    {
      "indent": 1,
      "text": "40, 40, 41, 79, 43, 44, 45, 45, 48, 48, 64, 50, 51, 52, 88, 52,",
      "zh-CHS": "40, 40, 41, 79, 43, 44, 45, 45, 48, 48, 64, 50, 51, 52, 88, 52,"
    },
    {
      "indent": 1,
      "text": "53, 74, 55, 57, 58, 58, 74, 60,101, 61, 62, 84, 66, 66, 68, 69,",
      "zh-CHS": "53, 74, 55, 57, 58, 58, 74, 60,101, 61, 62, 84, 66, 66, 68, 69,"
    },
    {
      "indent": 1,
      "text": "87, 82, 71, 97, 73, 73, 82, 75,111, 77, 94, 78, 87, 81, 83, 97,",
      "zh-CHS": "87, 82, 71, 97, 73, 73, 82, 75,111, 77, 94, 78, 87, 81, 83, 97,"
    },
    {
      "indent": 1,
      "text": "85, 83, 94, 86, 99, 89, 90, 99,111, 92, 93,134, 95, 98,105, 98,",
      "zh-CHS": "85, 83, 94, 86, 99, 89, 90, 99,111, 92, 93,134, 95, 98,105, 98,"
    },
    {
      "indent": 0,
      "text": "105,110,102,108,102,118,103,106,106,113,109,112,114,112,116,125,",
      "zh-CHS": "105,110,102,108,102,118,103,106,106,113,109,112,114,112,116,125,"
    },
    {
      "indent": 0,
      "text": "115,116,117,117,126,119,125,121,121,123,145,124,126,131,127,129,",
      "zh-CHS": "115,116,117,117,126,119,125,121,121,123,145,124,126,131,127,129,"
    },
    {
      "indent": 0,
      "text": "165,130,132,138,133,135,145,136,137,139,146,141,143,142,144,148,",
      "zh-CHS": "165,130,132,138,133,135,145,136,137,139,146,141,143,142,144,148,"
    },
    {
      "indent": 0,
      "text": "147,155,151,149,151,150,152,157,153,154,156,168,158,162,161,160,",
      "zh-CHS": "147,155,151,149,151,150,152,157,153,154,156,168,158,162,161,160,"
    },
    {
      "indent": 0,
      "text": "172,163,169,164,166,184,167,170,177,174,171,173,182,176,180,178,",
      "zh-CHS": "172,163,169,164,166,184,167,170,177,174,171,173,182,176,180,178,"
    },
    {
      "indent": 0,
      "text": "175,189,179,181,186,183,192,185,200,187,191,188,190,197,193,196,",
      "zh-CHS": "175,189,179,181,186,183,192,185,200,187,191,188,190,197,193,196,"
    },
    {
      "indent": 0,
      "text": "197,194,195,196,198,202,199,201,210,203,207,204,205,206,208,214,",
      "zh-CHS": "197,194,195,196,198,202,199,201,210,203,207,204,205,206,208,214,"
    },
    {
      "indent": 0,
      "text": "209,211,221,212,213,215,224,216,217,218,219,220,222,228,223,225,",
      "zh-CHS": "209,211,221,212,213,215,224,216,217,218,219,220,222,228,223,225,"
    },
    {
      "indent": 0,
      "text": "226,224,227,229,240,230,231,232,233,234,235,236,238,239,237,242,",
      "zh-CHS": "226,224,227,229,240,230,231,232,233,234,235,236,238,239,237,242,"
    },
    {
      "indent": 0,
      "text": "241,243,242,244,245,246,247,248,249,250,251,252,252,253,254,255,",
      "zh-CHS": "241,243,242,244,245,246,247,248,249,250,251,252,252,253,254,255,"
    },
    {
      "indent": 0,
      "text": "int get_ur_golomb(k) {\n    for (prefix = 0; prefix < 12; prefix++) {\n        if (get_bits(1)) {\n            return get_bits(k) + (prefix << k);\n        }\n    }\n    return get_bits(bits) + 11;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "int get_sr_golomb(k) {\n    v = get_ur_golomb(k);\n    if (v & 1) return - (v >> 1) - 1;\n    else       return   (v >> 1);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "log2_run[41] = {\n 0, 0, 0, 0, 1, 1, 1, 1,\n 2, 2, 2, 2, 3, 3, 3, 3,\n 4, 4, 5, 5, 6, 6, 7, 7,\n 8, 9,10,11,12,13,14,15,\n16,17,18,19,20,21,22,23,\n24,\n};",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "if (run_count == 0 && run_mode == 1) {\n    if (get_bits(1)) {\n        run_count = 1 << log2_run[run_index];\n        if (x + run_count <= w) {\n            run_index++;\n        }\n    } else {\n        if (log2_run[run_index]) {\n            run_count = get_bits(log2_run[run_index]);\n        } else {\n            run_count = 0;\n        }\n        if (run_index) {\n            run_index--;\n        }\n        run_mode = 2;\n    }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "sign_extend(input_number, input_bits) {\n    negative_bias = 1 << (input_bits - 1);\n    bits_mask = negative_bias - 1;\n    output_number = input_number & bits_mask; // Remove negative bit\n    is_negative = input_number & negative_bias; // Test negative bit\n    if (is_negative)\n        output_number -= negative_bias;\n    return output_number\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "get_vlc_symbol(state) {\n    i = state->count;\n    k = 0;\n    while (i < state->error_sum) {\n        k++;\n        i += i;\n    }",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "v = get_sr_golomb(k);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "if (2 * state->drift < -state->count) {\n    v = -1 - v;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "ret = sign_extend(v + state->bias, bits);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "state->error_sum += abs(v);\nstate->drift     += v;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "if (state->count == 128) {\n    state->count     >>= 1;\n    state->drift     >>= 1;\n    state->error_sum >>= 1;\n}\nstate->count++;\nif (state->drift <= -state->count) {\n    state->bias = max(state->bias - 1, -128);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "    state->drift = max(state->drift + state->count,\n                       -state->count + 1);\n} else if (state->drift > 0) {\n    state->bias = min(state->bias + 1, 127);",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "    state->drift = min(state->drift - state->count, 0);\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "    return ret;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "diff = get_vlc_symbol(context_state);\nif (diff >= 0) {\n    diff++;\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 4,
      "text": "drift     = 0;\nerror_sum = 4;\nbias      = 0;\ncount     = 1;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nQuantizationTableSet( i ) {                                   |\n    scale = 1                                                 |\n    for (j = 0; j < MAX_CONTEXT_INPUTS; j++) {                |\n        QuantizationTable( i, j, scale )                      |\n        scale *= 2 * len_count[ i ][ j ] - 1                  |\n    }                                                         |\n    context_count[ i ] = ceil( scale / 2 )                    |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nQuantizationTable(i, j, scale) {                              |\n    v = 0                                                     |\n    for (k = 0; k < 128;) {                                   |\n        len - 1                                               | ur\n        for (n = 0; n < len; n++) {                           |\n            quant_tables[ i ][ j ][ k ] = scale * v           |\n            k++                                               |\n        }                                                     |\n        v++                                                   |\n    }                                                         |\n    for (k = 1; k < 128; k++) {                               |\n        quant_tables[ i ][ j ][ 256 - k ] = \\                 |\n        -quant_tables[ i ][ j ][ k ]                          |\n    }                                                         |\n    quant_tables[ i ][ j ][ 128 ] = \\                         |\n    -quant_tables[ i ][ j ][ 127 ]                            |\n    len_count[ i ][ j ] = v                                   |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nParameters( ) {                                               |\n    version                                                   | ur\n    if (version >= 3) {                                       |\n        micro_version                                         | ur\n    }                                                         |\n    coder_type                                                | ur\n    if (coder_type > 1) {                                     |\n        for (i = 1; i < 256; i++) {                           |\n            state_transition_delta[ i ]                       | sr\n        }                                                     |\n    }                                                         |\n    colorspace_type                                           | ur\n    if (version >= 1) {                                       |\n        bits_per_raw_sample                                   | ur\n    }                                                         |\n    chroma_planes                                             | br\n    log2_h_chroma_subsample                                   | ur\n    log2_v_chroma_subsample                                   | ur\n    extra_plane                                               | br\n    if (version >= 3) {                                       |\n        num_h_slices - 1                                      | ur\n        num_v_slices - 1                                      | ur\n        quant_table_set_count                                 | ur\n    }                                                         |\n    for (i = 0; i < quant_table_set_count; i++) {             |\n        QuantizationTableSet( i )                             |\n    }                                                         |\n    if (version >= 3) {                                       |\n        for (i = 0; i < quant_table_set_count; i++) {         |\n            states_coded                                      | br\n            if (states_coded) {                               |\n                for (j = 0; j < context_count[ i ]; j++) {    |\n                    for (k = 0; k < CONTEXT_SIZE; k++) {      |\n                        initial_state_delta[ i ][ j ][ k ]    | sr\n                    }                                         |\n                }                                             |\n            }                                                 |\n        }                                                     |\n        ec                                                    | ur\n        intra                                                 | ur\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                 | type\n-----------------------------------------------------------|-----\nConfigurationRecord( NumBytes ) {                          |\n    ConfigurationRecordIsPresent = 1                       |\n    Parameters( )                                          |\n    while (remaining_symbols_in_syntax(NumBytes - 4)) {    |\n        reserved_for_future_use                            | br/ur/sr\n    }                                                      |\n    configuration_record_crc_parity                        | u(32)\n}                                                          |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nFrame( NumBytes ) {                                           |\n    keyframe                                                  | br\n    if (keyframe && !ConfigurationRecordIsPresent {           |\n        Parameters( )                                         |\n    }                                                         |\n    while (remaining_bits_in_bitstream( NumBytes )) {         |\n        Slice( )                                              |\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "+-----------------------------------------------------------------+\n| first Slice header                                              |\n+-----------------------------------------------------------------+\n| first Slice content                                             |\n+-----------------------------------------------------------------+\n| first Slice footer                                              |\n+-----------------------------------------------------------------+\n| --------------------------------------------------------------- |\n+-----------------------------------------------------------------+\n| second Slice header                                             |\n+-----------------------------------------------------------------+\n| second Slice content                                            |\n+-----------------------------------------------------------------+\n| second Slice footer                                             |\n+-----------------------------------------------------------------+\n| --------------------------------------------------------------- |\n+-----------------------------------------------------------------+\n| ...                                                             |\n+-----------------------------------------------------------------+\n| --------------------------------------------------------------- |\n+-----------------------------------------------------------------+\n| last Slice header                                               |\n+-----------------------------------------------------------------+\n| last Slice content                                              |\n+-----------------------------------------------------------------+\n| last Slice footer                                               |\n+-----------------------------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nSlice( ) {                                                    |\n    if (version >= 3) {                                       |\n        SliceHeader( )                                        |\n    }                                                         |\n    SliceContent( )                                           |\n    if (coder_type == 0) {                                    |\n        while (!byte_aligned()) {                             |\n            padding                                           | u(1)\n        }                                                     |\n    }                                                         |\n    if (version <= 1) {                                       |\n        while (remaining_bits_in_bitstream( NumBytes ) != 0) {|\n            reserved                                          | u(1)\n        }                                                     |\n    }                                                         |\n    if (version >= 3) {                                       |\n        SliceFooter( )                                        |\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nSliceHeader( ) {                                              |\n    slice_x                                                   | ur\n    slice_y                                                   | ur\n    slice_width - 1                                           | ur\n    slice_height - 1                                          | ur\n    for (i = 0; i < quant_table_set_index_count; i++) {       |\n        quant_table_set_index[ i ]                            | ur\n    }                                                         |\n    picture_structure                                         | ur\n    sar_num                                                   | ur\n    sar_den                                                   | ur\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1 + ( ( chroma_planes || version <= 3 ) ? 1 : 0 )\n    + ( extra_plane ? 1 : 0 )",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nSliceContent( ) {                                             |\n    if (colorspace_type == 0) {                               |\n        for (p = 0; p < primary_color_count; p++) {           |\n            for (y = 0; y < plane_pixel_height[ p ]; y++) {   |\n                Line( p, y )                                  |\n            }                                                 |\n        }                                                     |\n    } else if (colorspace_type == 1) {                        |\n        for (y = 0; y < slice_pixel_height; y++) {            |\n            for (p = 0; p < primary_color_count; p++) {       |\n                Line( p, y )                                  |\n            }                                                 |\n        }                                                     |\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "1 + ( chroma_planes ? 2 : 0 ) + ( extra_plane ? 1 : 0 )",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "chroma_planes == 1 && (p == 1 || p == 2)\n    ? ceil(slice_pixel_height / (1 << log2_v_chroma_subsample))\n    : slice_pixel_height",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "floor( ( slice_y + slice_height ) * slice_pixel_height / num_v_slices ) - slice_pixel_y.",
      "zh-CHS": "地板（（切片y+切片高度）*切片像素高度/数量v切片）-切片像素y。"
    },
    {
      "indent": 0,
      "text": "floor( slice_y * frame_pixel_height / num_v_slices )",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nLine( p, y ) {                                                |\n    if (colorspace_type == 0) {                               |\n        for (x = 0; x < plane_pixel_width[ p ]; x++) {        |\n            sample_difference[ p ][ y ][ x ]                  | sd\n        }                                                     |\n    } else if (colorspace_type == 1) {                        |\n        for (x = 0; x < slice_pixel_width; x++) {             |\n            sample_difference[ p ][ y ][ x ]                  | sd\n        }                                                     |\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "chroma_planes == 1 && (p == 1 || p == 2) ? ceil( slice_pixel_width / (1 << log2_h_chroma_subsample) ) : slice_pixel_width.",
      "zh-CHS": "色度平面==1&&（p==1 | | p==2）？ceil（切片像素宽度/（1<<log2色度子样本））：切片像素宽度。"
    },
    {
      "indent": 0,
      "text": "floor( ( slice_x + slice_width ) * slice_pixel_width / num_h_slices ) - slice_pixel_x",
      "zh-CHS": "地板（（切片x+切片宽度）*切片像素宽度/数量切片）-切片像素x"
    },
    {
      "indent": 0,
      "text": "floor( slice_x * frame_pixel_width / num_h_slices )",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "pseudocode                                                    | type\n--------------------------------------------------------------|-----\nSliceFooter( ) {                                              |\n    slice_size                                                | u(24)\n    if (ec) {                                                 |\n        error_status                                          | u(8)\n        slice_crc_parity                                      | u(32)\n    }                                                         |\n}                                                             |",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}