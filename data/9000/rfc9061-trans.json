{
  "title": {
    "text": "RFC 9061: A YANG Data Model for IPsec Flow Protection Based on Software‑Defined Networking (SDN)",
    "zh-CHS": "RFC 9061"
  },
  "number": 9061,
  "created_at": "2021-10-28 02:59:15.168557+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "+-------------------------------------------+\n            |          IPsec Management System          | I2NSF User\n            +-------------------------------------------+\n                                    |\n                                    |  I2NSF Consumer-Facing\n                                    |  Interface\n            +-------------------------------------------+\n            | IKEv2 Configuration, PAD and SPD Entries  | I2NSF\n            |               Distribution                | Controller\n            +-------------------------------------------+\n                                    |\n                                    |  I2NSF NSF-Facing\n                                    |  Interface\n            +-------------------------------------------+\n            |   IKEv2  |      IPsec(PAD, SPD)           | Network\n            |-------------------------------------------| Security\n            |    IPsec Data Protection and Forwarding   | Function\n            +-------------------------------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "         +-----------------------------------------+\n         |         IPsec Management System         | I2NSF User\n         +-----------------------------------------+\n                             |\n                             |  I2NSF Consumer-Facing Interface\n                             |\n         +-----------------------------------------+\n         |           SPD and SAD Entries           | I2NSF\n         |              Distribution               | Controller\n         +-----------------------------------------+\n                             |\n                             |  I2NSF NSF-Facing Interface\n                             |\n         +-----------------------------------------+\n         |             IPsec (SPD, SAD)            | Network\n         |-----------------------------------------| Security\n         |   IPsec Data Protection and Forwarding  | Function\n         +-----------------------------------------+\n<CODE BEGINS> file \"ietf-i2nsf-ikec@2021-07-14.yang\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "module ietf-i2nsf-ikec {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikec\";\n  prefix nsfikec;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "import ietf-inet-types {\n  prefix inet;\n  reference\n    \"RFC 6991: Common YANG Data Types.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "organization\n  \"IETF I2NSF Working Group\";\ncontact\n  \"WG Web:  <https://datatracker.ietf.org/wg/i2nsf/>\n   WG List: <mailto:i2nsf@ietf.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Rafael Marin-Lopez\n          <mailto:rafa@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Gabriel Lopez-Millan\n          <mailto:gabilm@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": " Author: Fernando Pereniguez-Garcia <mailto:fernando.pereniguez@cud.upct.es> \"; description \"Common data model for the IKE and IKE-less cases defined by the SDN-based IPsec flow protection service.",
      "zh-CHS": "作者：费尔南多·佩雷尼格斯·加西亚<mailto:费尔南多。pereniguez@cud.upct.es>由基于SDN的IPsec流保护服务定义的IKE和无IKE情况的“描述”公共数据模型。"
    },
    {
      "indent": 5,
      "text": "The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here.",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“必需”、“应”、“不应”、“建议”、“不建议”、“可能”和“可选”在所有大写字母出现时（如图所示）应按照BCP 14（RFC 2119）（RFC 8174）所述进行解释。"
    },
    {
      "indent": 5,
      "text": "Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved.",
      "zh-CHS": "版权所有（c）2021 IETF信托基金和被确定为代码作者的人员。版权所有。"
    },
    {
      "indent": 5,
      "text": "Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info).",
      "zh-CHS": "根据IETF信托有关IETF文件的法律规定第4.c节规定的简化BSD许可证中包含的许可条款，允许以源代码和二进制格式重新分发和使用，无论是否修改(https://trustee.ietf.org/license-info)."
    },
    {
      "indent": 5,
      "text": "This version of this YANG module is part of RFC 9061; see the RFC itself for full legal notices.\";",
      "zh-CHS": "此模块的此版本是RFC 9061的一部分；有关完整的法律通知，请参见RFC本身。“；"
    },
    {
      "indent": 2,
      "text": "revision 2021-07-14 {\n  description\n    \"Initial version.\";\n  reference\n    \"RFC 9061: A YANG Data Model for IPsec Flow Protection\n               Based on Software-Defined Networking (SDN).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef encr-alg-t {\n  type uint16;\n  description\n    \"The encryption algorithm is specified with a 16-bit\n     number extracted from the IANA registry.  The acceptable\n     values MUST follow the requirement levels for\n     encryption algorithms for ESP and IKEv2.\";\n  reference\n    \"IANA: Internet Key Exchange Version 2 (IKEv2) Parameters,\n           IKEv2 Transform Attribute Types, Transform Type 1 -\n           Encryption Algorithm Transform IDs\n     RFC 8221: Cryptographic Algorithm Implementation\n               Requirements and Usage Guidance for Encapsulating\n               Security Payload (ESP) and Authentication Header\n               (AH)\n     RFC 8247: Algorithm Implementation Requirements and Usage\n               Guidance for the Internet Key Exchange Protocol\n               Version 2 (IKEv2).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef intr-alg-t {\n  type uint16;\n  description\n    \"The integrity algorithm is specified with a 16-bit\n     number extracted from the IANA registry.\n     The acceptable values MUST follow the requirement\n     levels for integrity algorithms for ESP and IKEv2.\";\n  reference\n    \"IANA: Internet Key Exchange Version 2 (IKEv2) Parameters,\n           IKEv2 Transform Attribute Types, Transform Type 3 -\n           Integrity Algorithm Transform IDs\n     RFC 8221: Cryptographic Algorithm Implementation\n               Requirements and Usage Guidance for Encapsulating\n               Security Payload (ESP) and Authentication Header\n               (AH)\n     RFC 8247: Algorithm Implementation Requirements and Usage\n               Guidance for the Internet Key Exchange Protocol\n               Version 2 (IKEv2).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ipsec-mode {\n  type enumeration {\n    enum transport {\n      description\n        \"IPsec transport mode.  No Network Address\n         Translation (NAT) support.\";\n    }\n    enum tunnel {\n      description\n        \"IPsec tunnel mode.\";\n    }\n  }\n  description\n    \"Type definition of IPsec mode: transport or\n     tunnel.\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 3.2.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef esp-encap {\n  type enumeration {\n    enum espintcp {\n      description\n        \"ESP in TCP encapsulation.\";\n      reference\n        \"RFC 8229: TCP Encapsulation of IKE and\n                   IPsec Packets.\";\n    }\n    enum espinudp {\n      description\n        \"ESP in UDP encapsulation.\";\n      reference\n        \"RFC 3948: UDP Encapsulation of IPsec ESP\n                   Packets.\";\n    }\n    enum none {\n      description\n        \"No ESP encapsulation.\";\n    }\n  }\n  description\n    \"Types of ESP encapsulation when Network Address\n     Translation (NAT) may be present between two NSFs.\";\n  reference\n    \"RFC 8229: TCP Encapsulation of IKE and IPsec Packets\n     RFC 3948: UDP Encapsulation of IPsec ESP Packets.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ipsec-protocol-params {\n  type enumeration {\n    enum esp {\n      description\n        \"IPsec ESP protocol.\";\n    }\n  }\n  description\n    \"Only the Encapsulation Security Protocol (ESP) is\n     supported, but it could be extended in the future.\";\n  reference\n    \"RFC 4303: IP Encapsulating Security Payload (ESP).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef lifetime-action {\n  type enumeration {\n    enum terminate-clear {\n      description\n        \"Terminates the IPsec SA and allows the\n         packets through.\";\n    }\n    enum terminate-hold {\n      description\n        \"Terminates the IPsec SA and drops the\n         packets.\";\n    }\n    enum replace {\n      description\n        \"Replaces the IPsec SA with a new one:\n         rekey.\";\n    }\n  }\n  description\n    \"When the lifetime of an IPsec SA expires, an action\n     needs to be performed for the IPsec SA that\n     reached the lifetime.  There are three possible\n     options: terminate-clear, terminate-hold, and\n     replace.\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.5.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ipsec-traffic-direction {\n  type enumeration {\n    enum inbound {\n      description\n        \"Inbound traffic.\";\n    }\n    enum outbound {\n      description\n        \"Outbound traffic.\";\n    }\n  }\n  description\n    \"IPsec traffic direction is defined in\n     two directions: inbound and outbound.\n     From an NSF perspective, inbound and\n     outbound are defined as mentioned\n     in Section 3.1 in RFC 4301.\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 3.1.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ipsec-spd-action {\n  type enumeration {\n    enum protect {\n      description\n        \"PROTECT the traffic with IPsec.\";\n    }\n    enum bypass {\n      description\n        \"BYPASS the traffic.  The packet is forwarded\n         without IPsec protection.\";\n    }\n    enum discard {\n      description\n        \"DISCARD the traffic.  The IP packet is\n         discarded.\";\n    }\n  }\n  description\n    \"The action when traffic matches an IPsec security\n     policy.  According to RFC 4301, there are three\n     possible values: BYPASS, PROTECT, and DISCARD.\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.4.1.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ipsec-inner-protocol {\n  type union {\n    type uint8;\n    type enumeration {\n      enum any {\n        value 256;\n        description\n          \"Any IP protocol number value.\";\n      }\n    }\n  }\n  default \"any\";\n  description\n    \"IPsec protection can be applied to specific IP\n     traffic and Layer 4 traffic (TCP, UDP, SCTP, etc.)\n     or ANY protocol in the IP packet payload.\n     The IP protocol number is specified with a uint8\n     or ANY defining an enumerate with value 256 to\n     indicate the protocol number.  Note that in case\n     of IPv6, the protocol in the IP packet payload\n     is indicated in the Next Header field of the IPv6\n     packet.\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.4.1.1\n     IANA: Protocol Numbers.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "grouping encap {\n  description\n    \"This group of nodes allows defining of the type of\n     encapsulation in case NAT traversal is\n     required and includes port information.\";\n  leaf espencap {\n    type esp-encap;\n    default \"none\";\n    description\n      \"ESP in TCP, ESP in UDP, or ESP in TLS.\";\n  }\n  leaf sport {\n    type inet:port-number;\n    default \"4500\";\n    description\n      \"Encapsulation source port.\";\n  }\n  leaf dport {\n    type inet:port-number;\n    default \"4500\";\n    description\n      \"Encapsulation destination port.\";\n  }\n  leaf-list oaddr {\n    type inet:ip-address;\n    description\n      \"If required, this is the original address that\n       was used before NAT was applied over the packet.\";\n  }\n  reference\n    \"RFC 3947: Negotiation of NAT-Traversal in the IKE\n     RFC 8229: TCP Encapsulation of IKE and IPsec Packets.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "grouping lifetime {\n  description\n    \"Different lifetime values limited to an IPsec SA.\";\n  leaf time {\n    type uint32;\n    units \"seconds\";\n    default \"0\";\n    description\n      \"Time in seconds since the IPsec SA was added.\n       For example, if this value is 180 seconds, it\n       means the IPsec SA expires in 180 seconds since\n       it was added.  The value 0 implies infinite.\";\n  }\n  leaf bytes {\n    type uint64;\n    default \"0\";\n    description\n      \"If the IPsec SA processes the number of bytes\n       expressed in this leaf, the IPsec SA expires and\n       SHOULD be rekeyed.  The value 0 implies\n       infinite.\";\n  }\n  leaf packets {\n    type uint32;\n    default \"0\";\n    description\n      \"If the IPsec SA processes the number of packets\n       expressed in this leaf, the IPsec SA expires and\n       SHOULD be rekeyed.  The value 0 implies\n       infinite.\";\n  }\n  leaf idle {\n    type uint32;\n    units \"seconds\";\n    default \"0\";\n    description\n      \"When an NSF stores an IPsec SA, it\n       consumes system resources.  For an idle IPsec SA, this\n       is a waste of resources.  If the IPsec SA is idle\n       during this number of seconds, the IPsec SA\n       SHOULD be removed.  The value 0 implies\n       infinite.\";\n  }\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.4.2.1.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "grouping port-range {\n  description\n    \"This grouping defines a port range, such as that\n     expressed in RFC 4301, for example, 1500 (Start\n     Port Number)-1600 (End Port Number).\n     A port range is used in the Traffic Selector.\";\n  leaf start {\n    type inet:port-number;\n    description\n      \"Start port number.\";\n  }\n  leaf end {\n    type inet:port-number;\n    must '. >= ../start' {\n      error-message\n        \"The end port number MUST be equal or greater\n         than the start port number.\";\n    }\n    description\n      \"End port number.  To express a single port, set\n       the same value as start and end.\";\n  }\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.4.1.2.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "grouping tunnel-grouping {\n  description\n    \"The parameters required to define the IP tunnel\n     endpoints when IPsec SA requires tunnel mode.  The\n     tunnel is defined by two endpoints: the local IP\n     address and the remote IP address.\";\n  leaf local {\n    type inet:ip-address;\n    mandatory true;\n    description\n      \"Local IP address' tunnel endpoint.\";\n  }\n  leaf remote {\n    type inet:ip-address;\n    mandatory true;\n    description\n      \"Remote IP address' tunnel endpoint.\";\n  }\n  leaf df-bit {\n    type enumeration {\n      enum clear {\n        description\n          \"Disable the Don't Fragment (DF) bit\n           in the outer header.  This is the\n           default value.\";\n      }\n      enum set {\n        description\n          \"Enable the DF bit in the outer header.\";\n      }\n      enum copy {\n        description\n          \"Copy the DF bit to the outer header.\";\n      }\n    }\n    default \"clear\";\n    description\n      \"Allow configuring the DF bit when encapsulating\n       tunnel mode IPsec traffic.  RFC 4301 describes\n       three options to handle the DF bit during\n       tunnel encapsulation: clear, set, and copy from\n       the inner IP header.  This MUST be ignored or\n       has no meaning when the local/remote\n       IP addresses are IPv6 addresses.\";\n    reference\n      \"RFC 4301: Security Architecture for the Internet Protocol,\n                 Section 8.1.\";\n  }\n  leaf bypass-dscp {\n    type boolean;\n    default \"true\";\n    description\n      \"If true, to copy the Differentiated Services Code\n       Point (DSCP) value from inner header to outer header.\n       If false, to map DSCP values\n       from an inner header to values in an outer header\n       following ../dscp-mapping.\";\n    reference\n      \"RFC 4301: Security Architecture for the Internet Protocol,\n                 Section 4.4.1.2.\";\n  }\n  list dscp-mapping {\n    must '../bypass-dscp = \"false\"';\n    key \"id\";\n    ordered-by user;\n    leaf id {\n      type uint8;\n      description\n        \"The index of list with the\n         different mappings.\";\n    }\n    leaf inner-dscp {\n      type inet:dscp;\n      description\n        \"The DSCP value of the inner IP packet.  If this\n         leaf is not defined, it means ANY inner DSCP value.\";\n    }\n    leaf outer-dscp {\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The DSCP value of the outer IP packet.\";\n    }\n    description\n      \"A list that represents an array with the mapping from the\n       inner DSCP value to outer DSCP value when bypass-dscp is\n       false.  To express a default mapping in the list where any\n       other inner dscp value is not matching a node in the list,\n       a new node has to be included at the end of the list where\n       the leaf inner-dscp is not defined (ANY) and the leaf\n       outer-dscp includes the value of the mapping.  If there is\n       no value set in the leaf outer-dscp, the default value for\n       this leaf is 0.\";\n    reference\n      \"RFC 4301: Security Architecture for the Internet Protocol,\n                 Section 4.4.1.2 and Appendix C.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "grouping selector-grouping {\n  description\n    \"This grouping contains the definition of a Traffic\n     Selector, which is used in the IPsec policies and\n     IPsec SAs.\";\n  leaf local-prefix {\n    type inet:ip-prefix;\n    mandatory true;\n    description\n      \"Local IP address prefix.\";\n  }\n  leaf remote-prefix {\n    type inet:ip-prefix;\n    mandatory true;\n    description\n      \"Remote IP address prefix.\";\n  }\n  leaf inner-protocol {\n    type ipsec-inner-protocol;\n    default \"any\";\n    description\n      \"Inner protocol that is going to be\n       protected with IPsec.\";\n  }\n  list local-ports {\n    key \"start end\";\n    uses port-range;\n    description\n      \"List of local ports. When the inner\n       protocol is ICMP, this 16-bit value\n       represents code and type.\n       If this list is not defined,\n       it is assumed that start and\n       end are 0 by default (any port).\";\n  }\n  list remote-ports {\n    key \"start end\";\n    uses port-range;\n    description\n      \"List of remote ports. When the upper layer\n       protocol is ICMP, this 16-bit value represents\n       code and type.  If this list is not defined,\n       it is assumed that start and end are 0 by\n       default (any port).\";\n  }\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol,\n               Section 4.4.1.2.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "  grouping ipsec-policy-grouping {\n    description\n      \"Holds configuration information for an IPsec SPD\n       entry.\";\n    leaf anti-replay-window-size {\n      type uint32;\n      default \"64\";\n      description\n        \"To set the anti-replay window size.\n         The default value is set\n         to 64, following the recommendation in RFC 4303.\";\n      reference\n        \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                   Section 3.4.3.\";\n    }\n    container traffic-selector {\n      description\n        \"Packets are selected for\n         processing actions based on Traffic Selector\n         values, which refer to IP and inner protocol\n         header information.\";\n      uses selector-grouping;\n      reference\n        \"RFC 4301: Security Architecture for the Internet Protocol,\n                   Section 4.4.4.1.\";\n    }\n    container processing-info {\n      description\n        \"SPD processing.  If the required processing\n         action is protect, it contains the required\n         information to process the packet.\";\n      leaf action {\n        type ipsec-spd-action;\n        default \"discard\";\n        description\n          \"If bypass or discard, container\n           ipsec-sa-cfg is empty.\";\n      }\n      container ipsec-sa-cfg {\n        when \"../action = 'protect'\";\n        description\n          \"IPsec SA configuration included in the SPD\n           entry.\";\n        leaf pfp-flag {\n          type boolean;\n          default \"false\";\n          description\n            \"Each selector has a Populate From\n             Packet (PFP) flag.  If asserted for a\n             given selector X, the flag indicates\n             that the IPsec SA to be created should\n             take its value (local IP address,\n             remote IP address, Next Layer\n             Protocol, etc.) for X from the value\n             in the packet.  Otherwise, the IPsec SA\n             should take its value(s) for X from\n             the value(s) in the SPD entry.\";\n        }\n        leaf ext-seq-num {\n          type boolean;\n          default \"false\";\n          description\n            \"True if this IPsec SA is using extended\n             sequence numbers.  If true, the 64-bit\n             extended sequence number counter is used;\n             if false, the normal 32-bit sequence\n             number counter is used.\";\n        }\n        leaf seq-overflow {\n          type boolean;\n          default \"false\";\n          description\n            \"The flag indicating whether\n             overflow of the sequence number\n             counter should prevent transmission\n             of additional packets on the IPsec\n             SA (false) and, therefore, needs to\n             be rekeyed or whether rollover is\n             permitted (true).  If Authenticated\n             Encryption with Associated Data\n             (AEAD) is used (leaf\n             esp-algorithms/encryption/algorithm-type),\n             this flag MUST be false.  Setting this\n             flag to true is strongly discouraged.\";\n        }\n        leaf stateful-frag-check {\n          type boolean;\n          default \"false\";\n          description\n            \"Indicates whether (true) or not (false)\n             stateful fragment checking applies to\n             the IPsec SA to be created.\";\n        }\n        leaf mode {\n          type ipsec-mode;\n          default \"transport\";\n          description\n            \"IPsec SA has to be processed in\n             transport or tunnel mode.\";\n        }\n        leaf protocol-parameters {\n          type ipsec-protocol-params;\n          default \"esp\";\n          description\n            \"Security protocol of the IPsec SA.\n             Only ESP is supported, but it could be\n             extended in the future.\";\n        }\n        container esp-algorithms {\n          when \"../protocol-parameters = 'esp'\";\n          description\n            \"Configuration of Encapsulating\n             Security Payload (ESP) parameters and\n             algorithms.\";\n          leaf-list integrity {\n            type intr-alg-t;\n            default \"0\";\n            ordered-by user;\n            description\n              \"Configuration of ESP authentication\n               based on the specified integrity\n               algorithm.  With AEAD encryption\n               algorithms, the integrity node is\n               not used.\";\n            reference\n              \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                         Section 3.2.\";\n          }\n          list encryption {\n            key \"id\";\n            ordered-by user;\n            leaf id {\n              type uint16;\n              description\n                \"An identifier that unequivocally identifies each\n                 entry of the list, i.e., an encryption algorithm\n                 and its key length (if required).\";\n            }\n            leaf algorithm-type {\n              type encr-alg-t;\n              default \"20\";\n              description\n                \"Default value 20 (ENCR_AES_GCM_16).\";\n            }\n            leaf key-length {\n              type uint16;\n              default \"128\";\n              description\n                \"By default, key length is 128\n                 bits.\";\n            }\n            description\n              \"Encryption or AEAD algorithm for the\n               IPsec SAs.  This list is ordered\n               following from the higher priority to\n               lower priority.  First node of the\n               list will be the algorithm with\n               higher priority.  In case the list\n               is empty, then no encryption algorithm\n               is applied (NULL).\";\n            reference\n              \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                         Section 3.2.\";\n          }\n          leaf tfc-pad {\n            type boolean;\n            default \"false\";\n            description\n              \"If Traffic Flow Confidentiality\n               (TFC) padding for ESP encryption\n               can be used (true) or not (false).\";\n            reference\n              \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                         Section 2.7.\";\n          }\n          reference\n            \"RFC 4303: IP Encapsulating Security Payload (ESP).\";\n        }\n        container tunnel {\n          when \"../mode = 'tunnel'\";\n          uses tunnel-grouping;\n          description\n            \"IPsec tunnel endpoints definition.\";\n        }\n      }\n      reference\n        \"RFC 4301: Security Architecture for the Internet Protocol,\n                   Section 4.4.1.2.\";\n    }\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<CODE ENDS>\nmodule: ietf-i2nsf-ike\n  +--rw ipsec-ike\n    +--rw pad\n    |  +--rw pad-entry* [name]\n    |     +--rw name                           string\n    |     +--rw (identity)\n    |     |  +--:(ipv4-address)\n    |     |  |  +--rw ipv4-address?            inet:ipv4-address\n    |     |  +--:(ipv6-address)\n    |     |  |  +--rw ipv6-address?            inet:ipv6-address\n    |     |  +--:(fqdn-string)\n    |     |  |  +--rw fqdn-string?             inet:domain-name\n    |     |  +--:(rfc822-address-string)\n    |     |  |  +--rw rfc822-address-string?   string\n    |     |  +--:(dnx509)\n    |     |  |  +--rw dnx509?                  binary\n    |     |  +--:(gnx509)\n    |     |  |  +--rw gnx509?                  binary\n    |     |  +--:(id-key)\n    |     |  |  +--rw id-key?                  binary\n    |     |  +--:(id-null)\n    |     |     +--rw id-null?                 empty\n    |     +--rw auth-protocol?                 auth-protocol-type\n    |     +--rw peer-authentication\n    |        +--rw auth-method?         auth-method-type\n    |        +--rw eap-method\n    |        |  +--rw eap-type    uint64\n    |        +--rw pre-shared\n    |        |  +--rw secret?   yang:hex-string\n    |        +--rw digital-signature\n    |           +--rw ds-algorithm?           uint8\n    |           +--rw (public-key)?\n    |           |  +--:(raw-public-key)\n    |           |  |  +--rw raw-public-key?   binary\n    |           |  +--:(cert-data)\n    |           |     +--rw cert-data?        binary\n    |           +--rw private-key?            binary\n    |           +--rw ca-data*                binary\n    |           +--rw crl-data?               binary\n    |           +--rw crl-uri?                inet:uri\n    |           +--rw oscp-uri?               inet:uri\n    +--rw conn-entry* [name]\n    |  +--rw name                             string\n    |  +--rw autostartup?                     autostartup-type\n    |  +--rw initial-contact?                 boolean\n    |  +--rw version?                         auth-protocol-type\n    |  +--rw fragmentation\n    |  |  +--rw enabled?   boolean\n    |  |  +--rw mtu?      uint16\n    |  +--rw ike-sa-lifetime-soft\n    |  |  +--rw rekey-time?    uint32\n    |  |  +--rw reauth-time?   uint32\n    |  +--rw ike-sa-lifetime-hard\n    |  |  +--rw over-time?   uint32\n    |  +--rw ike-sa-intr-alg*  nsfikec:intr-alg-t\n    |  +--rw ike-sa-encr-alg* [id]\n    |  |  +--rw id                uint16\n    |  |  +--rw algorithm-type?   nsfikec:encr-alg-t\n    |  |  +--rw key-length?       uint16\n    |  +--rw dh-group?                            fs-group\n    |  +--rw half-open-ike-sa-timer?              uint32\n    |  +--rw half-open-ike-sa-cookie-threshold?   uint32\n    |  +--rw local\n    |  |  +--rw local-pad-entry-name    string\n    |  +--rw remote\n    |  |  +--rw remote-pad-entry-name    string\n    |  +--rw encapsulation-type\n    |  |  +--rw espencap?   esp-encap\n    |  |  +--rw sport?      inet:port-number\n    |  |  +--rw dport?      inet:port-number\n    |  |  +--rw oaddr*      inet:ip-address\n    |  +--rw spd\n    |  |  +--rw spd-entry* [name]\n    |  |    +--rw name                   string\n    |  |    +--rw ipsec-policy-config\n    |  |      +--rw anti-replay-window-size?   uint32\n    |  |      +--rw traffic-selector\n    |  |      |  +--rw local-prefix      inet:ip-prefix\n    |  |      |  +--rw remote-prefix     inet:ip-prefix\n    |  |      |  +--rw inner-protocol?   ipsec-inner-protocol\n    |  |      |  +--rw local-ports* [start end]\n    |  |      |  |  +--rw start    inet:port-number\n    |  |      |  |  +--rw end      inet:port-number\n    |  |      |  +--rw remote-ports* [start end]\n    |  |      |     +--rw start    inet:port-number\n    |  |      |     +--rw end      inet:port-number\n    |  |      +--rw processing-info\n    |  |        +--rw action?         ipsec-spd-action\n    |  |        +--rw ipsec-sa-cfg\n    |  |         +--rw pfp-flag?              boolean\n    |  |         +--rw ext-seq-num?           boolean\n    |  |         +--rw seq-overflow?          boolean\n    |  |         +--rw stateful-frag-check?   boolean\n    |  |         +--rw mode?                  ipsec-mode\n    |  |         +--rw protocol-parameters? ipsec-protocol-params\n    |  |              +--rw esp-algorithms\n    |  |              |  +--rw integrity*    intr-alg-t\n    |  |              |  +--rw encryption* [id]\n    |  |              |  |  +--rw id                uint16\n    |  |              |  |  +--rw algorithm-type?   encr-alg-t\n    |  |              |  |  +--rw key-length?       uint16\n    |  |              |  +--rw tfc-pad?      boolean\n    |  |              +--rw tunnel\n    |  |                 +--rw local           inet:ip-address\n    |  |                 +--rw remote          inet:ip-address\n    |  |                 +--rw df-bit?         enumeration\n    |  |                 +--rw bypass-dscp?    boolean\n    |  |                 +--rw dscp-mapping* [id]\n    |  |                    +--rw id            uint8\n    |  |                    +--rw inner-dscp?   inet:dscp\n    |  |                    +--rw outer-dscp?   inet:dscp\n    |  +--rw child-sa-info\n    |  |  +--rw fs-groups*                fs-group\n    |  |  +--rw child-sa-lifetime-soft\n    |  |  |  +--rw time?      uint32\n    |  |  |  +--rw bytes?     yang:counter64\n    |  |  |  +--rw packets?   uint32\n    |  |  |  +--rw idle?      uint32\n    |  |  |  +--rw action?    nsfikec:lifetime-action\n    |  |  +--rw child-sa-lifetime-hard\n    |  |     +--rw time?      uint32\n    |  |     +--rw bytes?     yang:counter64\n    |  |     +--rw packets?   uint32\n    |  |     +--rw idle?      uint32\n    |  +--ro state\n    |     +--ro initiator?             boolean\n    |     +--ro initiator-ikesa-spi?   ike-spi\n    |     +--ro responder-ikesa-spi?   ike-spi\n    |     +--ro nat-local?             boolean\n    |     +--ro nat-remote?            boolean\n    |     +--ro encapsulation-type\n    |     |  +--ro espencap?   esp-encap\n    |     |  +--ro sport?      inet:port-number\n    |     |  +--ro dport?      inet:port-number\n    |     |  +--ro oaddr*      inet:ip-address\n    |     +--ro established?           uint64\n    |     +--ro current-rekey-time?    uint64\n    |     +--ro current-reauth-time?   uint64\n    +--ro number-ike-sas\n        +--ro total?               yang:gauge64\n        +--ro half-open?           yang:gauge64\n        +--ro half-open-cookies?   yang:gauge64\n<CODE BEGINS> file \"ietf-i2nsf-ike@2021-07-14.yang\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "module ietf-i2nsf-ike {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ike\";\n  prefix nsfike;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "import ietf-inet-types {\n  prefix inet;\n  reference\n    \"RFC 6991: Common YANG Data Types.\";\n}\nimport ietf-yang-types {\n  prefix yang;\n  reference\n    \"RFC 6991: Common YANG Data Types.\";\n}\nimport ietf-i2nsf-ikec {\n  prefix nsfikec;\n  reference\n    \"RFC 9061: A YANG Data Model for IPsec Flow Protection\n               Based on Software-Defined Networking (SDN).\";\n}\nimport ietf-netconf-acm {\n  prefix nacm;\n  reference\n    \"RFC 8341: Network Configuration Access Control\n               Model.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "organization\n  \"IETF I2NSF Working Group\";\ncontact\n  \"WG Web:  <https://datatracker.ietf.org/wg/i2nsf/>\n   WG List: <mailto:i2nsf@ietf.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Rafael Marin-Lopez\n          <mailto:rafa@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Gabriel Lopez-Millan\n          <mailto:gabilm@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": " Author: Fernando Pereniguez-Garcia <mailto:fernando.pereniguez@cud.upct.es> \"; description \"This module contains the IPsec IKE case model for the SDN-based IPsec flow protection service.",
      "zh-CHS": "作者：费尔南多·佩雷尼格斯·加西亚<mailto:费尔南多。pereniguez@cud.upct.es>“说明”此模块包含基于SDN的IPsec流保护服务的IPsec IKE案例模型。"
    },
    {
      "indent": 5,
      "text": "The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here.",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“必需”、“应”、“不应”、“建议”、“不建议”、“可能”和“可选”在所有大写字母出现时（如图所示）应按照BCP 14（RFC 2119）（RFC 8174）所述进行解释。"
    },
    {
      "indent": 5,
      "text": "Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved.",
      "zh-CHS": "版权所有（c）2021 IETF信托基金和被确定为代码作者的人员。版权所有。"
    },
    {
      "indent": 5,
      "text": "Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).",
      "zh-CHS": "根据IETF信托有关IETF文件的法律规定第4.c节规定的简化BSD许可证中包含的许可条款，允许以源代码和二进制格式重新分发和使用，无论是否修改(http://trustee.ietf.org/license-info)."
    },
    {
      "indent": 5,
      "text": "This version of this YANG module is part of RFC 9061; see the RFC itself for full legal notices.\";",
      "zh-CHS": "此模块的此版本是RFC 9061的一部分；有关完整的法律通知，请参见RFC本身。“；"
    },
    {
      "indent": 2,
      "text": "revision 2021-07-14 {\n  description\n    \"Initial version.\";\n  reference\n    \"RFC 9061: A YANG Data Model for IPsec Flow Protection\n               Based on Software-Defined Networking (SDN).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef ike-spi {\n  type uint64 {\n    range \"0..max\";\n  }\n  description\n    \"Security Parameter Index (SPI)'s IKE SA.\";\n  reference\n    \"RFC 7296: Internet Key Exchange Protocol Version 2\n               (IKEv2), Section 2.6.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef autostartup-type {\n  type enumeration {\n    enum add {\n      description\n        \"IKE/IPsec configuration is only loaded into\n         IKE implementation, but IKE/IPsec SA is not\n         started.\";\n    }\n    enum on-demand {\n      description\n        \"IKE/IPsec configuration is loaded\n         into IKE implementation.  The IPsec policies\n         are transferred to the NSF, but the\n         IPsec SAs are not established immediately.\n         The IKE implementation will negotiate the\n         IPsec SAs when they are required\n         (i.e., through an ACQUIRE notification).\";\n    }\n    enum start {\n      description\n        \"IKE/IPsec configuration is loaded\n         and transferred to the NSF's kernel, and the\n         IKEv2-based IPsec SAs are established\n         immediately without waiting for any packet.\";\n    }\n  }\n  description\n    \"Different policies to set IPsec SA configuration\n     into NSF's kernel when IKEv2 implementation has\n     started.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef fs-group {\n  type uint16;\n  description\n    \"DH groups for IKE and IPsec SA rekey.\";\n  reference\n    \"IANA: Internet Key Exchange Version 2 (IKEv2) Parameters,\n           IKEv2 Transform Attribute Types, Transform Type 4 -\n           Diffie-Hellman Group Transform IDs\n     RFC 7296: Internet Key Exchange Protocol Version 2\n               (IKEv2), Section 3.3.2.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef auth-protocol-type {\n  type enumeration {\n    enum ikev2 {\n      value 2;\n      description\n        \"IKEv2 authentication protocol.  It is the\n         only one defined right now.  An enum is\n         used for further extensibility.\";\n    }\n  }\n  description\n    \"IKE authentication protocol version specified in the\n     Peer Authorization Database (PAD).  It is defined as\n     enumerated to allow new IKE versions in the\n     future.\";\n  reference\n    \"RFC 7296: Internet Key Exchange Protocol Version 2\n               (IKEv2).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "typedef auth-method-type {\n  type enumeration {\n    enum pre-shared {\n      description\n        \"Select pre-shared key as the\n         authentication method.\";\n      reference\n        \"RFC 7296: Internet Key Exchange Protocol Version 2\n                   (IKEv2).\";\n    }\n    enum eap {\n      description\n        \"Select the Extensible Authentication Protocol (EAP) as\n         the authentication method.\";\n      reference\n        \"RFC 7296: Internet Key Exchange Protocol Version 2\n                   (IKEv2).\";\n    }\n    enum digital-signature {\n      description\n        \"Select digital signature as the authentication method.\";\n      reference\n        \"RFC 7296: Internet Key Exchange Protocol Version 2\n                   (IKEv2)\n         RFC 7427: Signature Authentication in the Internet Key\n                   Exchange Version 2 (IKEv2).\";\n    }\n    enum null {\n      description\n        \"Null authentication.\";\n      reference\n        \"RFC 7619: The NULL Authentication Method in the Internet\n                   Key Exchange Protocol Version 2 (IKEv2).\";\n    }\n  }\n  description\n    \"Peer authentication method specified in the Peer\n     Authorization Database (PAD).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "  container ipsec-ike {\n    description\n      \"IKE configuration for an NSF.  It includes PAD\n       parameters, IKE connection information, and state\n       data.\";\n    container pad {\n      description\n        \"Configuration of the Peer Authorization Database\n         (PAD).  Each entry of PAD contains authentication\n         information of either the local peer or the remote peer.\n         Therefore, the I2NSF Controller stores authentication\n         information (and credentials) not only for the remote NSF\n         but also for the local NSF.  The local NSF MAY use the\n         same identity for different types of authentication\n         and credentials.  Pointing to the entry for a local NSF\n         (e.g., A) and the entry for remote NSF (e.g., B)\n         is possible to specify all the required information to\n         carry out the authentication between A and B (see\n         ../conn-entry/local and ../conn-entry/remote).\";\n      list pad-entry {\n        key \"name\";\n        ordered-by user;\n        description\n          \"Peer Authorization Database (PAD) entry.  It\n           is a list of PAD entries ordered by the\n           I2NSF Controller, and each entry is\n           unequivocally identified by a name.\";\n        leaf name {\n          type string;\n          description\n            \"PAD-unique name to identify this\n             entry.\";\n        }\n        choice identity {\n          mandatory true;\n          description\n            \"A particular IKE peer will be\n             identified by one of these identities.\n             This peer can be a remote peer or local\n             peer (this NSF).\";\n          reference\n            \"RFC 4301: Security Architecture for the Internet\n                       Protocol, Section 4.4.3.1.\";\n          case ipv4-address {\n            leaf ipv4-address {\n              type inet:ipv4-address;\n              description\n                \"Specifies the identity as\n                 a single 4-octet IPv4 address.\";\n            }\n          }\n          case ipv6-address {\n            leaf ipv6-address {\n              type inet:ipv6-address;\n              description\n                \"Specifies the identity as a\n                 single 16-octet IPv6\n                 address.  An example is\n                 2001:db8::8:800:200c:417a.\";\n            }\n          }\n          case fqdn-string {\n            leaf fqdn-string {\n              type inet:domain-name;\n              description\n                \"Specifies the identity as a\n                 Fully Qualified Domain Name\n                 (FQDN) string.  An example is\n                 example.com.  The string MUST\n                 NOT contain any terminators\n                 (e.g., NULL, Carriage Return\n                 (CR), etc.).\";\n            }\n          }\n          case rfc822-address-string {\n            leaf rfc822-address-string {\n              type string;\n              description\n                \"Specifies the identity as a\n                 fully qualified  email address\n                 string (RFC 5322).  An example is\n                 jsmith@example.com.  The string\n                 MUST NOT contain any\n                 terminators (e.g., NULL, CR,\n                 etc.).\";\n              reference\n                \"RFC 5322: Internet Message Format.\";\n            }\n          }\n          case dnx509 {\n            leaf dnx509 {\n              type binary;\n              description\n                \"The binary\n                 Distinguished Encoding Rules (DER)\n                 encoding of an ASN.1 X.500\n                 Distinguished Name, as specified in IKEv2.\";\n              reference\n                \"RFC 5280: Internet X.509 Public Key Infrastructure\n                           Certificate and Certificate Revocation\n                           List (CRL) Profile\n                 RFC 7296: Internet Key Exchange Protocol Version 2\n                           (IKEv2), Section 3.5.\";\n            }\n          }\n          case gnx509 {\n            leaf gnx509 {\n              type binary;\n              description\n                \"ASN.1 X.509 GeneralName structure,\n                 as specified in RFC 5280, encoded\n                 using ASN.1 Distinguished Encoding Rules\n                 (DER), as specified in ITU-T X.690.\";\n              reference\n                \"RFC 5280: Internet X.509 Public Key Infrastructure\n                           Certificate and Certificate Revocation\n                           List (CRL) Profile.\";\n            }\n          }\n          case id-key {\n            leaf id-key {\n              type binary;\n              description\n                \"Opaque octet stream that may be\n                 used to pass vendor-specific\n                 information for proprietary\n                 types of identification.\";\n              reference\n                \"RFC 7296: Internet Key Exchange Protocol Version 2\n                           (IKEv2), Section 3.5.\";\n            }\n          }\n          case id-null {\n            leaf id-null {\n              type empty;\n              description\n                \"The ID_NULL identification is used\n                 when the IKE identification payload\n                 is not used.\";\n              reference\n                \"RFC 7619: The NULL Authentication Method in the\n                           Internet Key Exchange Protocol Version 2\n                           (IKEv2).\";\n            }\n          }\n        }\n        leaf auth-protocol {\n          type auth-protocol-type;\n          default \"ikev2\";\n          description\n            \"Only IKEv2 is supported right now, but\n             other authentication protocols may be\n             supported in the future.\";\n        }\n        container peer-authentication {\n          description\n            \"This container allows the security\n             controller to configure the\n             authentication method (pre-shared key,\n             eap, digital-signature, null) that\n             will be used with a particular peer and\n             the credentials to use, which will\n             depend on the selected authentication\n             method.\";\n          leaf auth-method {\n            type auth-method-type;\n            default \"pre-shared\";\n            description\n              \"Type of authentication method\n               (pre-shared key, eap, digital signature,\n               null).\";\n            reference\n              \"RFC 7296: Internet Key Exchange Protocol Version 2\n                         (IKEv2), Section 2.15.\";\n          }\n          container eap-method {\n            when \"../auth-method = 'eap'\";\n            leaf eap-type {\n              type uint32 {\n                range \"1 .. 4294967295\";\n              }\n              mandatory true;\n              description\n                \"EAP method type specified with\n                 a value extracted from the\n                 IANA registry.  This\n                 information provides the\n                 particular EAP method to be\n                 used.  Depending on the EAP\n                 method, pre-shared keys or\n                 certificates may be used.\";\n            }\n            description\n              \"EAP method description used when\n               authentication method is 'eap'.\";\n            reference\n              \"IANA: Extensible Authentication Protocol (EAP)\n                     Registry, Method Types\n               RFC 7296: Internet Key Exchange Protocol Version 2\n                         (IKEv2), Section 2.16.\";\n          }\n          container pre-shared {\n            when \"../auth-method[.='pre-shared' or\n                  .='eap']\";\n            leaf secret {\n              nacm:default-deny-all;\n              type yang:hex-string;\n              description\n                \"Pre-shared secret value.  The\n                 NSF has to prevent read access\n                 to this value for security\n                 reasons.  This value MUST be\n                 set if the EAP method uses a\n                 pre-shared key or pre-shared\n                 authentication has been chosen.\";\n            }\n            description\n              \"Shared secret value for PSK or\n               EAP method authentication based on\n               PSK.\";\n          }\n          container digital-signature {\n            when \"../auth-method[.='digital-signature'\n                  or .='eap']\";\n            leaf ds-algorithm {\n              type uint8;\n              default \"14\";\n              description\n                \"The digital signature\n                 algorithm is specified with a\n                 value extracted from the IANA\n                 registry.  Default is the generic\n                 digital signature method.  Depending\n                 on the algorithm, the following leafs\n                 MUST contain information.  For\n                 example, if digital signature or the\n                 EAP method involves a certificate,\n                 then leaves 'cert-data' and 'private-key'\n                 will contain this information.\";\n              reference\n                \"IANA: Internet Key Exchange Version 2 (IKEv2)\n                       Parameters, IKEv2 Authentication Method.\";\n            }\n            choice public-key {\n              leaf raw-public-key {\n                type binary;\n                description\n                  \"A binary that contains the\n                   value of the public key.  The\n                   interpretation of the content\n                   is defined by the digital\n                   signature algorithm.  For\n                   example, an RSA key is\n                   represented as RSAPublicKey, as\n                   defined in RFC 8017, and an\n                   Elliptic Curve Cryptography\n                   (ECC) key is represented\n                   using the 'publicKey'\n                   described in RFC 5915.\";\n                reference\n                  \"RFC 5915: Elliptic Curve Private Key\n                             Structure\n                   RFC 8017: PKCS #1: RSA Cryptography\n                             Specifications Version 2.2.\";\n              }\n              leaf cert-data {\n                type binary;\n                description\n                  \"X.509 certificate data in DER\n                   format.  If raw-public-key is\n                   defined, this leaf is empty.\";\n                reference\n                  \"RFC 5280: Internet X.509 Public Key\n                             Infrastructure Certificate\n                             and Certificate Revocation\n                             List (CRL) Profile.\";\n              }\n              description\n                \"If the I2NSF Controller\n                 knows that the NSF\n                 already owns a private key\n                 associated to this public key\n                 (e.g., the NSF generated the pair\n                 public key/private key out of\n                 band), it will only configure\n                 one of the leaves of this\n                 choice but not the leaf\n                 private-key.  The NSF, based on\n                 the public key value, can know\n                 the private key to be used.\";\n            }\n            leaf private-key {\n              nacm:default-deny-all;\n              type binary;\n              description\n                \"A binary that contains the\n                 value of the private key.  The\n                 interpretation of the content\n                 is defined by the digital\n                 signature algorithm.  For\n                 example, an RSA key is\n                 represented as RSAPrivateKey, as\n                 defined in RFC 8017, and an\n                 Elliptic Curve Cryptography\n                 (ECC) key is represented as\n                 ECPrivateKey, as defined in RFC\n                 5915.  This value is set\n                 if public key is defined and the\n                 I2NSF Controller is in charge\n                 of configuring the\n                 private key.  Otherwise, it is\n                 not set and the value is\n                 kept in secret.\";\n              reference\n                \"RFC 5915: Elliptic Curve Private Key\n                           Structure\n                 RFC 8017: PKCS #1: RSA Cryptography\n                           Specifications Version 2.2.\";\n            }\n            leaf-list ca-data {\n              type binary;\n              description\n                \"List of trusted Certification\n                 Authorities (CAs) certificates\n                 encoded using ASN.1\n                 Distinguished Encoding Rules\n                 (DER).  If it is not defined,\n                 the default value is empty.\";\n            }\n            leaf crl-data {\n              type binary;\n              description\n                \"A CertificateList structure, as\n                 specified in RFC 5280,\n                 encoded using ASN.1\n                 Distinguished Encoding Rules\n                 (DER), as specified in ITU-T\n                 X.690.  If it is not defined,\n                 the default value is empty.\";\n              reference\n                \"RFC 5280: Internet X.509 Public Key Infrastructure\n                           Certificate and Certificate Revocation\n                           List (CRL) Profile.\";\n            }\n            leaf crl-uri {\n              type inet:uri;\n              description\n                \"X.509 Certificate Revocation List\n                 (CRL) certificate URI.\n                 If it is not defined,\n                 the default value is empty.\";\n              reference\n                \"RFC 5280: Internet X.509 Public Key Infrastructure\n                           Certificate and Certificate Revocation\n                           List (CRL) Profile.\";\n            }\n            leaf oscp-uri {\n              type inet:uri;\n              description\n                \"Online Certificate Status Protocol\n                 (OCSP) URI.  If it is not defined,\n                 the default value is empty.\";\n              reference\n                \"RFC 6960: X.509 Internet Public Key Infrastructure\n                           Online Certificate Status Protocol - OCSP\n                 RFC 5280: Internet X.509 Public Key Infrastructure\n                           Certificate and Certificate Revocation\n                           List (CRL) Profile.\";\n            }\n            description\n              \"digital-signature container.\";\n          } /*container digital-signature*/\n        } /*container peer-authentication*/\n      }\n    }\n    list conn-entry {\n      key \"name\";\n      description\n        \"IKE peer connection information.  This list\n         contains the IKE connection for this peer\n         with other peers.  This will create, in\n         real time, IKE Security Associations\n         established with these nodes.\";\n      leaf name {\n        type string;\n        description\n          \"Identifier for this connection\n           entry.\";\n      }\n      leaf autostartup {\n        type autostartup-type;\n        default \"add\";\n        description\n          \"By default, only add configuration\n           without starting the security\n           association.\";\n      }\n      leaf initial-contact {\n        type boolean;\n        default \"false\";\n        description\n          \"The goal of this value is to deactivate the\n           usage of INITIAL_CONTACT notification\n           (true).  If this flag remains set to false, it\n           means the usage of the INITIAL_CONTACT\n           notification will depend on the IKEv2\n           implementation.\";\n      }\n      leaf version {\n        type auth-protocol-type;\n        default \"ikev2\";\n        description\n          \"IKE version.  Only version 2 is supported.\";\n      }\n      container fragmentation {\n        leaf enabled {\n          type boolean;\n          default \"false\";\n          description\n            \"Whether or not to enable IKEv2\n             fragmentation (true or false).\";\n          reference\n            \"RFC 7383: Internet Key Exchange Protocol Version 2\n                       (IKEv2) Message Fragmentation.\";\n        }\n        leaf mtu {\n          when \"../enabled='true'\";\n          type uint16 {\n            range \"68..65535\";\n          }\n          description\n            \"MTU that IKEv2 can use\n             for IKEv2 fragmentation.\";\n          reference\n            \"RFC 7383: Internet Key Exchange Protocol Version 2\n                       (IKEv2) Message Fragmentation.\";\n        }\n        description\n          \"IKEv2 fragmentation, as per RFC 7383.  If the\n           IKEv2 fragmentation is enabled, it is possible\n           to specify the MTU.\";\n      }\n      container ike-sa-lifetime-soft {\n        description\n          \"IKE SA lifetime soft.  Two lifetime values\n           can be configured: either rekey time of the\n           IKE SA or reauth time of the IKE SA.  When\n           the rekey lifetime expires, a rekey of the\n           IKE SA starts.  When reauth lifetime\n           expires, an IKE SA reauthentication starts.\";\n        leaf rekey-time {\n          type uint32;\n          units \"seconds\";\n          default \"0\";\n          description\n            \"Time in seconds between each IKE SA\n             rekey.  The value 0 means infinite.\";\n        }\n        leaf reauth-time {\n          type uint32;\n          units \"seconds\";\n          default \"0\";\n          description\n            \"Time in seconds between each IKE SA\n             reauthentication.  The value 0 means\n             infinite.\";\n        }\n        reference\n          \"RFC 7296: Internet Key Exchange Protocol Version 2\n                     (IKEv2), Section 2.8.\";\n      }\n      container ike-sa-lifetime-hard {\n        description\n          \"Hard IKE SA lifetime.  When this\n           time is reached, the IKE SA is removed.\";\n        leaf over-time {\n          type uint32;\n          units \"seconds\";\n          default \"0\";\n          description\n            \"Time in seconds before the IKE SA is\n             removed.  The value 0 means infinite.\";\n        }\n        reference\n          \"RFC 7296: Internet Key Exchange Protocol Version 2\n                     (IKEv2).\";\n      }\n      leaf-list ike-sa-intr-alg {\n        type nsfikec:intr-alg-t;\n        default \"12\";\n        ordered-by user;\n        description\n          \"Integrity algorithm for establishing\n           the IKE SA.  This list is ordered following\n           from the higher priority to lower priority.\n           The first node of the list will be the\n           algorithm with higher priority.\n           Default value 12 (AUTH_HMAC_SHA2_256_128).\";\n      }\n      list ike-sa-encr-alg {\n        key \"id\";\n        min-elements 1;\n        ordered-by user;\n        leaf id {\n          type uint16;\n          description\n            \"An identifier that unequivocally\n             identifies each entry of the list,\n             i.e., an encryption algorithm and\n             its key length (if required).\";\n        }\n        leaf algorithm-type {\n          type nsfikec:encr-alg-t;\n          default \"12\";\n          description\n            \"Default value 12 (ENCR_AES_CBC).\";\n        }\n        leaf key-length {\n          type uint16;\n          default \"128\";\n          description\n            \"By default, key length is 128 bits.\";\n        }\n        description\n          \"Encryption or AEAD algorithm for the IKE\n           SAs.  This list is ordered following\n           from the higher priority to lower priority.\n           The first node of the list will be the\n           algorithm with higher priority.\";\n      }\n      leaf dh-group {\n        type fs-group;\n        default \"14\";\n        description\n          \"Group number for Diffie-Hellman\n           Exponentiation used during IKE_SA_INIT\n           for the IKE SA key exchange.\";\n      }\n      leaf half-open-ike-sa-timer {\n        type uint32;\n        units \"seconds\";\n        default \"0\";\n        description\n          \"Set the half-open IKE SA timeout\n           duration.  The value 0 implies infinite.\";\n        reference\n          \"RFC 7296: Internet Key Exchange Protocol Version 2\n                     (IKEv2), Section 2.\";\n      }\n      leaf half-open-ike-sa-cookie-threshold {\n        type uint32;\n        default \"0\";\n        description\n          \"Number of half-open IKE SAs that activate\n           the cookie mechanism.  The value 0 implies\n           infinite.\";\n        reference\n          \"RFC 7296: Internet Key Exchange Protocol Version 2\n                     (IKEv2), Section 2.6.\";\n      }\n      container local {\n        leaf local-pad-entry-name {\n          type string;\n          mandatory true;\n          description\n            \"Local peer authentication information.\n             This node points to a specific entry in\n             the PAD where the authorization\n             information about this particular local\n             peer is stored.  It MUST match a\n             pad-entry-name.\";\n        }\n        description\n          \"Local peer authentication information.\";\n      }\n      container remote {\n        leaf remote-pad-entry-name {\n          type string;\n          mandatory true;\n          description\n            \"Remote peer authentication information.\n             This node points to a specific entry in\n             the PAD where the authorization\n             information about this particular\n             remote peer is stored.  It MUST match a\n             pad-entry-name.\";\n        }\n        description\n          \"Remote peer authentication information.\";\n      }\n      container encapsulation-type {\n        uses nsfikec:encap;\n        description\n          \"This container carries configuration\n           information about the source and destination\n           ports of encapsulation that IKE should use\n           and the type of encapsulation that\n           should be used when NAT traversal is required.\n           However, this is just a best effort since\n           the IKE implementation may need to use a\n           different encapsulation, as described in\n           RFC 8229.\";\n        reference\n          \"RFC 8229: TCP Encapsulation of IKE and IPsec\n                     Packets.\";\n      }\n      container spd {\n        description\n          \"Configuration of the Security Policy\n           Database (SPD).  This main information is\n           placed in the grouping\n           ipsec-policy-grouping.\";\n        list spd-entry {\n          key \"name\";\n          ordered-by user;\n          leaf name {\n            type string;\n            description\n              \"SPD-entry-unique name to identify\n               the IPsec policy.\";\n          }\n          container ipsec-policy-config {\n            description\n              \"This container carries the\n               configuration of an IPsec policy.\";\n            uses nsfikec:ipsec-policy-grouping;\n          }\n          description\n            \"List of entries that will constitute\n             the representation of the SPD.  In this\n             case, since the NSF implements IKE, it\n             is only required to send an IPsec policy\n             from this NSF where 'local' is this NSF\n             and 'remote' the other NSF.  The IKE\n             implementation will install IPsec\n             policies in the NSF's kernel in both\n             directions (inbound and outbound) and\n             their corresponding IPsec SAs based on\n             the information in this SPD entry.\";\n        }\n        reference\n          \"RFC 7296: Internet Key Exchange Protocol Version 2\n                     (IKEv2), Section 2.9.\";\n      }\n      container child-sa-info {\n        leaf-list fs-groups {\n          type fs-group;\n          default \"0\";\n          ordered-by user;\n          description\n            \"If non-zero, forward secrecy is\n             required when a new IPsec SA is being\n             created, the (non-zero) value indicates\n             the group number to use for the key\n             exchange process used to achieve forward\n             secrecy.\n             This list is ordered following from the\n             higher priority to lower priority.  The\n             first node of the list will be the\n             algorithm with higher priority.\";\n        }\n        container child-sa-lifetime-soft {\n          description\n            \"Soft IPsec SA lifetime.\n             After the lifetime, the action is\n             defined in this container\n             in the leaf action.\";\n          uses nsfikec:lifetime;\n          leaf action {\n            type nsfikec:lifetime-action;\n            default \"replace\";\n            description\n              \"When the lifetime of an IPsec SA\n               expires, an action needs to be\n               performed over the IPsec SA that\n               reached the lifetime.  There are\n               three possible options:\n               terminate-clear, terminate-hold, and\n               replace.\";\n            reference\n              \"RFC 4301: Security Architecture for the Internet\n                         Protocol, Section 4.5\n               RFC 7296: Internet Key Exchange Protocol Version 2\n                         (IKEv2), Section 2.8.\";\n          }\n        }\n        container child-sa-lifetime-hard {\n          description\n            \"IPsec SA lifetime hard.  The action will\n             be to terminate the IPsec SA.\";\n          uses nsfikec:lifetime;\n          reference\n            \"RFC 7296: Internet Key Exchange Protocol Version 2\n                       (IKEv2), Section 2.8.\";\n        }\n        description\n          \"Specific information for IPsec SAs.\n           It includes the Perfect Forward Secrecy (PFS)\n           group and IPsec SAs rekey lifetimes.\";\n      }\n      container state {\n        config false;\n        leaf initiator {\n          type boolean;\n          description\n            \"It is acting as an initiator for this\n             connection.\";\n        }\n        leaf initiator-ikesa-spi {\n          type ike-spi;\n          description\n            \"Initiator's IKE SA SPI.\";\n        }\n        leaf responder-ikesa-spi {\n          type ike-spi;\n          description\n            \"Responder's IKE SA SPI.\";\n        }\n        leaf nat-local {\n          type boolean;\n          description\n            \"True if local endpoint is behind a\n             NAT.\";\n        }\n        leaf nat-remote {\n          type boolean;\n          description\n            \"True if remote endpoint is behind\n             a NAT.\";\n        }\n        container encapsulation-type {\n          uses nsfikec:encap;\n          description\n            \"This container provides information\n             about the source and destination\n             ports of encapsulation that IKE is\n             using and the type of encapsulation\n             when NAT traversal is required.\";\n          reference\n            \"RFC 8229: TCP Encapsulation of IKE and IPsec Packets.\";\n        }\n        leaf established {\n          type uint64;\n          units \"seconds\";\n          description\n            \"Seconds since this IKE SA has been\n             established.\";\n        }\n        leaf current-rekey-time {\n          type uint64;\n          units \"seconds\";\n          description\n            \"Seconds before IKE SA is rekeyed.\";\n        }\n        leaf current-reauth-time {\n          type uint64;\n          units \"seconds\";\n          description\n            \"Seconds before IKE SA is\n             reauthenticated.\";\n        }\n        description\n          \"IKE state data for a particular\n           connection.\";\n      } /* ike-sa-state */\n    } /* ike-conn-entries */\n    container number-ike-sas {\n      config false;\n      leaf total {\n        type yang:gauge64;\n        description\n          \"Total number of active IKE SAs.\";\n      }\n      leaf half-open {\n        type yang:gauge64;\n        description\n          \"Number of half-open active IKE SAs.\";\n      }\n      leaf half-open-cookies {\n        type yang:gauge64;\n        description\n          \"Number of half-open active IKE SAs with\n           cookie activated.\";\n      }\n      description\n        \"General information about the IKE SAs.  In\n         particular, it provides the current number of\n         IKE SAs.\";\n    }\n  } /* container ipsec-ike */\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<CODE ENDS>\nmodule: ietf-i2nsf-ikeless\n  +--rw ipsec-ikeless\n    +--rw spd\n    |  +--rw spd-entry* [name]\n    |     +--rw name  string\n    |     +--rw direction nsfikec:ipsec-traffic-direction\n    |     +--rw reqid? uint64\n    |     +--rw ipsec-policy-config\n    |        +--rw anti-replay-window-size?   uint32\n    |        +--rw traffic-selector\n    |        |  +--rw local-prefix      inet:ip-prefix\n    |        |  +--rw remote-prefix     inet:ip-prefix\n    |        |  +--rw inner-protocol?   ipsec-inner-protocol\n    |        |  +--rw local-ports* [start end]\n    |        |  |  +--rw start    inet:port-number\n    |        |  |  +--rw end      inet:port-number\n    |        |  +--rw remote-ports* [start end]\n    |        |     +--rw start    inet:port-number\n    |        |     +--rw end      inet:port-number\n    |        +--rw processing-info\n    |           +--rw action?         ipsec-spd-action\n    |           +--rw ipsec-sa-cfg\n    |             +--rw pfp-flag?              boolean\n    |             +--rw ext-seq-num?           boolean\n    |             +--rw seq-overflow?          boolean\n    |             +--rw stateful-frag-check?   boolean\n    |             +--rw mode?                  ipsec-mode\n    |             +--rw protocol-parameters? ipsec-protocol-params\n    |              +--rw esp-algorithms\n    |              |  +--rw integrity*    intr-alg-t\n    |              |  +--rw encryption* [id]\n    |              |  |  +--rw id                uint16\n    |              |  |  +--rw algorithm-type?   encr-alg-t\n    |              |  |  +--rw key-length?       uint16\n    |              |  +--rw tfc-pad?      boolean\n    |              +--rw tunnel\n    |                 +--rw local           inet:ip-address\n    |                 +--rw remote          inet:ip-address\n    |                 +--rw df-bit?         enumeration\n    |                 +--rw bypass-dscp?    boolean\n    |                 +--rw dscp-mapping* [id]\n    |                    +--rw id            uint8\n    |                    +--rw inner-dscp?   inet:dscp\n    |                    +--rw outer-dscp?   inet:dscp\n    +--rw sad\n      +--rw sad-entry* [name]\n       +--rw name               string\n       +--rw reqid?             uint64\n       +--rw ipsec-sa-config\n       |  +--rw spi                        uint32\n       |  +--rw ext-seq-num?               boolean\n       |  +--rw seq-overflow?              boolean\n       |  +--rw anti-replay-window-size?   uint32\n       |  +--rw traffic-selector\n       |  |  +--rw local-prefix      inet:ip-prefix\n       |  |  +--rw remote-prefix     inet:ip-prefix\n       |  |  +--rw inner-protocol?   ipsec-inner-protocol\n       |  |  +--rw local-ports* [start end]\n       |  |  |  +--rw start    inet:port-number\n       |  |  |  +--rw end      inet:port-number\n       |  |  +--rw remote-ports* [start end]\n       |  |     +--rw start    inet:port-number\n       |  |     +--rw end      inet:port-number\n       |  +--rw protocol-parameters? nsfikec:ipsec-protocol-params\n       |  +--rw mode?                      nsfikec:ipsec-mode\n       |  +--rw esp-sa\n       |  |  +--rw encryption\n       |  |  |  +--rw encryption-algorithm?   nsfikec:encr-alg-t\n       |  |  |  +--rw key?                    yang:hex-string\n       |  |  |  +--rw iv?                     yang:hex-string\n       |  |  +--rw integrity\n       |  |     +--rw integrity-algorithm?   nsfikec:intr-alg-t\n       |  |     +--rw key?                   yang:hex-string\n       |  +--rw sa-lifetime-hard\n       |  |  +--rw time?      uint32\n       |  |  +--rw bytes?     yang:counter64\n       |  |  +--rw packets?   uint32\n       |  |  +--rw idle?      uint32\n       |  +--rw sa-lifetime-soft\n       |  |  +--rw time?      uint32\n       |  |  +--rw bytes?     yang:counter64\n       |  |  +--rw packets?   uint32\n       |  |  +--rw idle?      uint32\n       |  |  +--rw action?    nsfikec:lifetime-action\n       |  +--rw tunnel\n       |  |  +--rw local           inet:ip-address\n       |  |  +--rw remote          inet:ip-address\n       |  |  +--rw df-bit?         enumeration\n       |  |  +--rw bypass-dscp?    boolean\n       |  |  +--rw dscp-mapping* [id]\n       |  |  |  +--rw id            uint8\n       |  |  |  +--rw inner-dscp?   inet:dscp\n       |  |  |  +--rw outer-dscp?   inet:dscp\n       |  |  +--rw dscp-values*    inet:dscp\n       |  +--rw encapsulation-type\n       |     +--rw espencap?   esp-encap\n       |     +--rw sport?      inet:port-number\n       |     +--rw dport?      inet:port-number\n       |     +--rw oaddr*      inet:ip-address\n       +--ro ipsec-sa-state\n          +--ro sa-lifetime-current\n          |  +--ro time?      uint32\n          |  +--ro bytes?     yang:counter64\n          |  +--ro packets?   uint32\n          |  +--ro idle?      uint32\n          +--ro replay-stats\n             +--ro replay-window\n             |  +--ro w?   uint32\n             |  +--ro t?   uint64\n             |  +--ro b?   uint64\n             +--ro packet-dropped?       yang:counter64\n             +--ro failed?               yang:counter64\n             +--ro seq-number-counter?   uint64",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "   notifications:\n     +---n sadb-acquire {ikeless-notification}?\n     |  +--ro ipsec-policy-name    string\n     |  +--ro traffic-selector\n     |     +--ro local-prefix      inet:ip-prefix\n     |     +--ro remote-prefix     inet:ip-prefix\n     |     +--ro inner-protocol?   ipsec-inner-protocol\n     |     +--ro local-ports* [start end]\n     |     |  +--ro start    inet:port-number\n     |     |  +--ro end      inet:port-number\n     |     +--ro remote-ports* [start end]\n     |        +--ro start    inet:port-number\n     |        +--ro end      inet:port-number\n     +---n sadb-expire {ikeless-notification}?\n     |  +--ro ipsec-sa-name           string\n     |  +--ro soft-lifetime-expire?   boolean\n     |  +--ro lifetime-current\n     |     +--ro time?      uint32\n     |     +--ro bytes?     yang:counter64\n     |     +--ro packets?   uint32\n     |     +--ro idle?      uint32\n     +---n sadb-seq-overflow {ikeless-notification}?\n     |  +--ro ipsec-sa-name    string\n     +---n sadb-bad-spi {ikeless-notification}?\n        +--ro spi    uint32\n<CODE BEGINS> file \"ietf-i2nsf-ikeless@2021-07-14.yang\"",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "module ietf-i2nsf-ikeless {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\";\n  prefix nsfikels;",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "import ietf-inet-types {\n  prefix inet;\n  reference\n    \"RFC 6991: Common YANG Data Types.\";\n}\nimport ietf-yang-types {\n  prefix yang;\n  reference\n    \"RFC 6991: Common YANG Data Types.\";\n}\nimport ietf-i2nsf-ikec {\n  prefix nsfikec;\n  reference\n    \"RFC 9061: A YANG Data Model for IPsec Flow Protection\n               Based on Software-Defined Networking (SDN).\";\n}\nimport ietf-netconf-acm {\n  prefix nacm;\n  reference\n    \"RFC 8341: Network Configuration Access Control\n               Model.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "organization\n  \"IETF I2NSF Working Group\";\ncontact\n  \"WG Web:  <https://datatracker.ietf.org/wg/i2nsf/>\n   WG List: <mailto:i2nsf@ietf.org>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Rafael Marin-Lopez\n         <mailto:rafa@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 5,
      "text": "Author: Gabriel Lopez-Millan\n         <mailto:gabilm@um.es>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": " Author: Fernando Pereniguez-Garcia <mailto:fernando.pereniguez@cud.upct.es> \"; description \"Data model for IKE-less case in the SDN-based IPsec flow protection service.",
      "zh-CHS": "作者：费尔南多·佩雷尼格斯·加西亚<mailto:费尔南多。pereniguez@cud.upct.es>基于SDN的IPsec流保护服务中无IKE情况的“描述”数据模型。"
    },
    {
      "indent": 5,
      "text": "The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119) (RFC 8174) when, and only when, they appear in all capitals, as shown here.",
      "zh-CHS": "本文件中的关键词“必须”、“不得”、“必需”、“应”、“不应”、“建议”、“不建议”、“可能”和“可选”在所有大写字母出现时（如图所示）应按照BCP 14（RFC 2119）（RFC 8174）所述进行解释。"
    },
    {
      "indent": 5,
      "text": "Copyright (c) 2021 IETF Trust and the persons identified as authors of the code. All rights reserved.",
      "zh-CHS": "版权所有（c）2021 IETF信托基金和被确定为代码作者的人员。版权所有。"
    },
    {
      "indent": 5,
      "text": "Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info).",
      "zh-CHS": "根据IETF信托有关IETF文件的法律规定第4.c节规定的简化BSD许可证中包含的许可条款，允许以源代码和二进制格式重新分发和使用，无论是否修改(https://trustee.ietf.org/license-info)."
    },
    {
      "indent": 5,
      "text": "This version of this YANG module is part of RFC 9061; see the RFC itself for full legal notices.\";",
      "zh-CHS": "此模块的此版本是RFC 9061的一部分；有关完整的法律通知，请参见RFC本身。“；"
    },
    {
      "indent": 2,
      "text": "revision 2021-07-14 {\n  description\n    \"Initial version.\";\n  reference\n    \"RFC 9061: A YANG Data Model for IPsec Flow Protection\n               Based on Software-Defined Networking (SDN).\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "feature ikeless-notification { description \"This feature indicates that the server supports generating notifications in the ikeless module.",
      "zh-CHS": "feature Ikless notification{description“此功能表示服务器支持在Ikless模块中生成通知。"
    },
    {
      "indent": 2,
      "text": "     To ensure broader applicability of this module,\n     the notifications are marked as a feature.\n     For the implementation of the IKE-less case,\n     the NSF is expected to implement this\n     feature.\";\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "container ipsec-ikeless {\n  description\n    \"Container for configuration of the IKE-less\n     case. The container contains two additional\n     containers: 'spd' and 'sad'.  The first allows the\n     I2NSF Controller to configure IPsec policies in\n     the Security Policy Database (SPD), and the second\n     allows the I2NSF Controller to configure IPsec\n     Security Associations (IPsec SAs) in the Security\n     Association Database (SAD).\";\n  reference\n    \"RFC 4301: Security Architecture for the Internet Protocol.\";\n  container spd {\n    description\n      \"Configuration of the Security Policy Database\n       (SPD).\";\n    reference\n      \"RFC 4301: Security Architecture for the Internet Protocol,\n                 Section 4.4.1.2.\";\n    list spd-entry {\n      key \"name\";\n      ordered-by user;\n      leaf name {\n        type string;\n        description\n          \"SPD-entry-unique name to identify this\n           entry.\";\n      }\n      leaf direction {\n        type nsfikec:ipsec-traffic-direction;\n        mandatory true;\n        description\n          \"Inbound traffic or outbound\n           traffic.  In the IKE-less case, the\n           I2NSF Controller needs to\n           specify the policy direction to be\n           applied in the NSF.  In the IKE case,\n           this direction does not need to be\n           specified, since IKE\n           will determine the direction that the\n           IPsec policy will require.\";\n      }\n      leaf reqid {\n        type uint64;\n        default \"0\";\n        description\n          \"This value allows linking this\n           IPsec policy with IPsec SAs with the\n           same reqid.  It is only required in\n           the IKE-less model since, in the IKE\n           case, this link is handled internally\n           by IKE.\";\n      }\n      container ipsec-policy-config {\n        description\n          \"This container carries the\n           configuration of an IPsec policy.\";\n        uses nsfikec:ipsec-policy-grouping;\n      }\n      description\n        \"The SPD is represented as a list of SPD\n         entries, where each SPD entry represents an\n         IPsec policy.\";\n    } /*list spd-entry*/\n  } /*container spd*/\n  container sad {\n    description\n      \"Configuration of the IPsec Security Association\n       Database (SAD).\";\n    reference\n      \"RFC 4301: Security Architecture for the Internet Protocol,\n                 Section 4.4.2.1.\";\n    list sad-entry {\n      key \"name\";\n      ordered-by user;\n      leaf name {\n        type string;\n        description\n          \"SAD-entry-unique name to identify this\n           entry.\";\n      }\n      leaf reqid {\n        type uint64;\n        default \"0\";\n        description\n          \"This value allows linking this\n           IPsec SA with an IPsec policy with\n           the same reqid.\";\n      }\n      container ipsec-sa-config {\n        description\n          \"This container allows configuring\n           details of an IPsec SA.\";\n        leaf spi {\n          type uint32 {\n            range \"0..max\";\n          }\n          mandatory true;\n          description\n            \"IPsec SA of Security Parameter Index (SPI).\";\n        }\n        leaf ext-seq-num {\n          type boolean;\n          default \"true\";\n          description\n            \"True if this IPsec SA is using extended\n             sequence numbers.  If true, the 64-bit\n             extended sequence number counter is used;\n             if false, the normal 32-bit sequence\n             number counter is used.\";\n        }\n        leaf seq-overflow {\n          type boolean;\n          default \"false\";\n          description\n            \"The flag indicating whether\n             overflow of the sequence number\n             counter should prevent transmission\n             of additional packets on the IPsec\n             SA (false) and, therefore, needs to\n             be rekeyed or whether rollover is\n             permitted (true).  If Authenticated\n             Encryption with Associated Data\n             (AEAD) is used (leaf\n             esp-algorithms/encryption/algorithm-type),\n             this flag MUST BE false. Setting this\n             flag to true is strongly discouraged.\";\n        }\n        leaf anti-replay-window-size {\n          type uint32;\n          default \"64\";\n          description\n            \"To set the anti-replay window size.\n             The default value is set to 64,\n             following the recommendation in RFC 4303.\";\n          reference\n            \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                       Section 3.4.3.\";\n        }\n        container traffic-selector {\n          uses nsfikec:selector-grouping;\n          description\n            \"The IPsec SA Traffic Selector.\";\n        }\n        leaf protocol-parameters {\n          type nsfikec:ipsec-protocol-params;\n          default \"esp\";\n          description\n            \"Security protocol of IPsec SA, only\n             ESP so far.\";\n        }\n        leaf mode {\n          type nsfikec:ipsec-mode;\n          default \"transport\";\n          description\n            \"Tunnel or transport mode.\";\n        }\n        container esp-sa {\n          when \"../protocol-parameters = 'esp'\";\n          description\n            \"In case the IPsec SA is an\n             Encapsulation Security Payload\n             (ESP), it is required to specify\n             encryption and integrity\n             algorithms and key materials.\";\n          container encryption {\n            description\n              \"Configuration of encryption or\n               AEAD algorithm for IPsec\n               Encapsulation Security Payload\n               (ESP).\";\n            leaf encryption-algorithm {\n              type nsfikec:encr-alg-t;\n              default \"12\";\n              description\n                \"Configuration of ESP\n                 encryption.  With AEAD\n                 algorithms, the integrity-algorithm\n                 leaf is not used.\";\n            }\n            leaf key {\n              nacm:default-deny-all;\n              type yang:hex-string;\n              description\n                \"ESP encryption key value.\n                 If this leaf is not defined,\n                 the key is not defined\n                 (e.g., encryption is NULL).\n                 The key length is\n                 determined by the\n                 length of the key set in\n                 this leaf.  By default, it is\n                 128 bits.\";\n            }\n            leaf iv {\n              nacm:default-deny-all;\n              type yang:hex-string;\n              description\n                \"ESP encryption IV value.  If\n                 this leaf is not defined, the\n                 IV is not defined (e.g.,\n                 encryption is NULL).\";\n            }\n          }\n          container integrity {\n            description\n              \"Configuration of integrity for\n               IPsec Encapsulation Security\n               Payload (ESP).  This container\n               allows configuration of integrity\n               algorithms when no AEAD\n               algorithms are used and\n               integrity is required.\";\n            leaf integrity-algorithm {\n              type nsfikec:intr-alg-t;\n              default \"12\";\n              description\n                \"Message Authentication Code\n                 (MAC) algorithm to provide\n                 integrity in ESP (default\n                 AUTH_HMAC_SHA2_256_128).\n                 With AEAD algorithms,\n                 the integrity leaf is not\n                 used.\";\n            }\n            leaf key {\n              nacm:default-deny-all;\n              type yang:hex-string;\n              description\n                \"ESP integrity key value.\n                 If this leaf is not defined,\n                 the key is not defined (e.g.,\n                 AEAD algorithm is chosen and\n                 integrity algorithm is not\n                 required).  The key length is\n                 determined by the length of\n                 the key configured.\";\n            }\n          }\n        } /*container esp-sa*/\n        container sa-lifetime-hard {\n          description\n            \"IPsec SA hard lifetime.  The action\n             associated is terminate and hold.\";\n          uses nsfikec:lifetime;\n        }\n        container sa-lifetime-soft {\n          description\n            \"IPsec SA soft lifetime.\";\n          uses nsfikec:lifetime;\n          leaf action {\n            type nsfikec:lifetime-action;\n            description\n              \"Action lifetime: terminate-clear,\n               terminate-hold, or replace.\";\n          }\n        }\n        container tunnel {\n          when \"../mode = 'tunnel'\";\n          uses nsfikec:tunnel-grouping;\n          leaf-list dscp-values {\n            type inet:dscp;\n            description\n              \"DSCP values allowed for ingress packets carried\n               over this IPsec SA.  If no values are specified, no\n               DSCP-specific filtering is applied.  When\n               ../bypass-dscp is false and a dscp-mapping is\n               defined, each value here would be the same as the\n               'inner' DSCP value for the DSCP mapping (list\n               dscp-mapping).\";\n            reference\n              \"RFC 4301: Security Architecture for the Internet\n                         Protocol, Section 4.4.2.1.\";\n          }\n          description\n            \"Endpoints of the IPsec tunnel.\";\n        }\n        container encapsulation-type {\n          uses nsfikec:encap;\n          description\n            \"This container carries\n             configuration information about\n             the source and destination ports\n             that will be used for ESP\n             encapsulation of ESP packets and\n             the type of encapsulation when NAT\n             traversal is in place.\";\n        }\n      } /*ipsec-sa-config*/\n      container ipsec-sa-state {\n        config false;\n        description\n          \"Container describing IPsec SA state\n           data.\";\n        container sa-lifetime-current {\n          uses nsfikec:lifetime;\n          description\n            \"SAD lifetime current.\";\n        }\n        container replay-stats {\n          description\n            \"State data about the anti-replay\n             window.\";\n          container replay-window {\n            leaf w {\n              type uint32;\n              description\n                \"Size of the replay window.\";\n            }\n            leaf t {\n              type uint64;\n              description\n                \"Highest sequence number\n                 authenticated so far,\n                 upper bound of window.\";\n            }\n            leaf b {\n              type uint64;\n              description\n                \"Lower bound of window.\";\n            }\n            description\n              \"This container contains three\n               parameters that define the state\n               of the replay window: window size (w),\n               highest sequence number authenticated (t),\n               and lower bound of the window (b), according\n               to Appendix A2.1 in RFC 4303 (w = t - b + 1).\";\n            reference\n              \"RFC 4303: IP Encapsulating Security Payload (ESP),\n                         Appendix A.\";\n          }\n          leaf packet-dropped {\n            type yang:counter64;\n            description\n              \"Packets dropped\n               because they are\n               replay packets.\";\n          }\n          leaf failed {\n            type yang:counter64;\n            description\n              \"Number of packets detected out\n               of the replay window.\";\n          }\n          leaf seq-number-counter {\n            type uint64;\n            description\n              \"A 64-bit counter when this\n               IPsec SA is using Extended\n               Sequence Number or 32-bit\n               counter when it is not.\n               Current value of sequence\n               number.\";\n          }\n        } /* container replay-stats*/\n      } /*ipsec-sa-state*/\n      description\n        \"List of SAD entries that form the SAD.\";\n    } /*list sad-entry*/\n  } /*container sad*/\n} /*container ipsec-ikeless*/",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "/* Notifications */",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "notification sadb-acquire {\n  if-feature \"ikeless-notification\";\n  description\n    \"The NSF detects and notifies that\n     an IPsec SA is required for an\n     outbound IP packet that has matched an SPD entry.\n     The traffic-selector container in this\n     notification contains information about\n     the IP packet that triggered this\n     notification.\";\n  leaf ipsec-policy-name {\n    type string;\n    mandatory true;\n    description\n      \"It contains the SPD entry name (unique) of\n       the IPsec policy that hits the IP-packet-required\n       IPsec SA.  It is assumed the\n       I2NSF Controller will have a copy of the\n       information of this policy so it can\n       extract all the information with this\n       unique identifier.  The type of IPsec SA is\n       defined in the policy so the security\n       controller can also know the type of IPsec\n       SA that MUST be generated.\";\n  }\n  container traffic-selector {\n    description\n      \"The IP packet that triggered the acquire\n       and requires an IPsec SA.  Specifically, it\n       will contain the IP source/mask and IP\n       destination/mask, protocol (udp, tcp,\n       etc.), and source and destination\n       ports.\";\n    uses nsfikec:selector-grouping;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "notification sadb-expire {\n  if-feature \"ikeless-notification\";\n  description\n    \"An IPsec SA expiration (soft or hard).\";\n  leaf ipsec-sa-name {\n    type string;\n    mandatory true;\n    description\n      \"It contains the SAD entry name (unique) of\n       the IPsec SA that is about to expire.  It is assumed\n       the I2NSF Controller will have a copy of the\n       IPsec SA information (except the cryptographic\n       material and state data) indexed by this name\n       (unique identifier) so it can know all the\n       information (crypto algorithms, etc.) about\n       the IPsec SA that has expired in order to\n       perform a rekey (soft lifetime) or delete it\n       (hard lifetime) with this unique identifier.\";\n  }\n  leaf soft-lifetime-expire {\n    type boolean;\n    default \"true\";\n    description\n      \"If this value is true, the lifetime expired is\n       soft.  If it is false, the lifetime is hard.\";\n  }\n  container lifetime-current {\n    description\n      \"IPsec SA current lifetime.  If\n       soft-lifetime-expired is true,\n       this container is set with the\n       lifetime information about current\n       soft lifetime.\n       It can help the NSF Controller\n       to know which of the (soft) lifetime\n       limits raised the event: time, bytes,\n       packets, or idle.\";\n    uses nsfikec:lifetime;\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "notification sadb-seq-overflow {\n  if-feature \"ikeless-notification\";\n  description\n    \"Sequence overflow notification.\";\n  leaf ipsec-sa-name {\n    type string;\n    mandatory true;\n    description\n      \"It contains the SAD entry name (unique) of\n       the IPsec SA that is about to have a sequence\n       number overflow, and rollover is not permitted.\n       When the NSF issues this event before reaching\n       a sequence number, overflow is implementation\n       specific and out of scope of this specification.\n       It is assumed the I2NSF Controller will have a\n       copy of the IPsec SA information (except the\n       cryptographic material and state data) indexed\n       by this name (unique identifier) so it can\n       know all the information (crypto algorithms,\n       etc.) about the IPsec SA in\n       order to perform a rekey of the IPsec SA.\";\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "  notification sadb-bad-spi {\n    if-feature \"ikeless-notification\";\n    description\n      \"Notify when the NSF receives a packet with an\n       incorrect SPI (i.e., not present in the SAD).\";\n    leaf spi {\n      type uint32 {\n        range \"0..max\";\n      }\n      mandatory true;\n      description\n        \"SPI number contained in the erroneous IPsec\n         packet.\";\n    }\n  }\n}",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<CODE ENDS>\n                          +------------------+\n                          | I2NSF Controller |\n                          +------------------+\n                   I2NSF NSF-Facing |\n                          Interface |\n                  /-----------------+---------------\\\n                 /                                   \\\n                /                                     \\\n   +----+  +--------+                            +--------+  +----+\n   | h1 |--| nsf_h1 |== IPsec_ESP_Tunnel_mode == | nsf_h2 |--| h2 |\n   +----+  +--------+                            +--------+  +----+\n          :1        :100                       :200       :1",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "(2001:db8:1:/64)          (2001:db8:123:/64)       (2001:db8:2:/64)",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<ipsec-ike xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ike\"\nxmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n  <pad>\n    <pad-entry>\n      <name>nsf_h1_pad</name>\n      <ipv6-address>2001:db8:123::100</ipv6-address>\n      <peer-authentication>\n         <auth-method>digital-signature</auth-method>\n         <digital-signature>\n            <cert-data>base64encodedvalue==</cert-data>\n            <private-key>base64encodedvalue==</private-key>\n            <ca-data>base64encodedvalue==</ca-data>\n         </digital-signature>\n      </peer-authentication>\n    </pad-entry>\n    <pad-entry>\n      <name>nsf_h2_pad</name>\n      <ipv6-address>2001:db8:123::200</ipv6-address>\n      <auth-protocol>ikev2</auth-protocol>\n      <peer-authentication>\n        <auth-method>digital-signature</auth-method>\n        <digital-signature>\n          <!-- RSA Digital Signature -->\n          <ds-algorithm>1</ds-algorithm>\n          <cert-data>base64encodedvalue==</cert-data>\n          <ca-data>base64encodedvalue==</ca-data>\n        </digital-signature>\n      </peer-authentication>\n    </pad-entry>\n  </pad>\n  <conn-entry>\n     <name>nsf_h1-nsf_h2</name>\n     <autostartup>start</autostartup>\n     <version>ikev2</version>\n     <initial-contact>false</initial-contact>\n     <fragmentation><enabled>false</enabled></fragmentation>\n     <ike-sa-lifetime-soft>\n        <rekey-time>60</rekey-time>\n        <reauth-time>120</reauth-time>\n     </ike-sa-lifetime-soft>\n     <ike-sa-lifetime-hard>\n        <over-time>3600</over-time>\n     </ike-sa-lifetime-hard>\n     <!--AUTH_HMAC_SHA2_512_256-->\n     <ike-sa-intr-alg>14</ike-sa-intr-alg>\n     <!--ENCR_AES_CBC - 128 bits-->\n     <ike-sa-encr-alg>\n        <id>1</id>\n     </ike-sa-encr-alg>\n     <!--8192-bit MODP Group-->\n     <dh-group>18</dh-group>\n     <half-open-ike-sa-timer>30</half-open-ike-sa-timer>\n     <half-open-ike-sa-cookie-threshold>\n        15\n     </half-open-ike-sa-cookie-threshold>\n     <local>\n         <local-pad-entry-name>nsf_h1_pad</local-pad-entry-name>\n     </local>\n     <remote>\n         <remote-pad-entry-name>nsf_h2_pad</remote-pad-entry-name>\n     </remote>\n     <spd>\n       <spd-entry>\n          <name>nsf_h1-nsf_h2</name>\n          <ipsec-policy-config>\n            <anti-replay-window-size>64</anti-replay-window-size>\n            <traffic-selector>\n               <local-prefix>2001:db8:1::0/64</local-prefix>\n               <remote-prefix>2001:db8:2::0/64</remote-prefix>\n               <inner-protocol>any</inner-protocol>\n            </traffic-selector>\n            <processing-info>\n               <action>protect</action>\n               <ipsec-sa-cfg>\n                  <pfp-flag>false</pfp-flag>\n                  <ext-seq-num>true</ext-seq-num>\n                  <seq-overflow>false</seq-overflow>\n                  <stateful-frag-check>false</stateful-frag-check>\n                  <mode>tunnel</mode>\n                  <protocol-parameters>esp</protocol-parameters>\n                  <esp-algorithms>\n                     <!-- AUTH_HMAC_SHA1_96 -->\n                     <integrity>2</integrity>\n                      <encryption>\n                          <!-- ENCR_AES_CBC -->\n                          <id>1</id>\n                          <algorithm-type>12</algorithm-type>\n                          <key-length>128</key-length>\n                      </encryption>\n                      <encryption>\n                          <!-- ENCR_3DES-->\n                          <id>2</id>\n                          <algorithm-type>3</algorithm-type>\n                      </encryption>\n                     <tfc-pad>false</tfc-pad>\n                  </esp-algorithms>\n                  <tunnel>\n                     <local>2001:db8:123::100</local>\n                     <remote>2001:db8:123::200</remote>\n                     <df-bit>clear</df-bit>\n                     <bypass-dscp>true</bypass-dscp>\n                 </tunnel>\n               </ipsec-sa-cfg>\n            </processing-info>\n          </ipsec-policy-config>\n       </spd-entry>\n     </spd>\n     <child-sa-info>\n        <!--8192-bit MODP Group -->\n        <fs-groups>18</fs-groups>\n        <child-sa-lifetime-soft>\n           <bytes>1000000</bytes>\n           <packets>1000</packets>\n           <time>30</time>\n           <idle>60</idle>\n           <action>replace</action>\n        </child-sa-lifetime-soft>\n        <child-sa-lifetime-hard>\n           <bytes>2000000</bytes>\n           <packets>2000</packets>\n           <time>60</time>\n           <idle>120</idle>\n        </child-sa-lifetime-hard>\n     </child-sa-info>\n   </conn-entry>\n</ipsec-ike>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "                   +------------------+\n                   | I2NSF Controller |\n                   +------------------+\n           I2NSF NSF-Facing |\n                  Interface |\n       /--------------------+-------------------\\\n      /                                          \\\n     /                                            \\\n+--------+                                    +--------+\n| nsf_h1 |===== IPsec_ESP_Transport_mode =====| nsf_h2 |\n+--------+                                    +--------+\n        :100        (2001:db8:123:/64)       :200",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<ipsec-ikeless\n  xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\"\n  xmlns:nc=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n  <spd>\n    <spd-entry>\n        <name>\n           in/trans/2001:db8:123::200/2001:db8:123::100\n        </name>\n        <direction>inbound</direction>\n        <reqid>1</reqid>\n        <ipsec-policy-config>\n           <traffic-selector>\n             <local-prefix>2001:db8:123::200/128</local-prefix>\n             <remote-prefix>2001:db8:123::100/128</remote-prefix>\n             <inner-protocol>any</inner-protocol>\n           </traffic-selector>\n           <processing-info>\n              <action>protect</action>\n              <ipsec-sa-cfg>\n                <ext-seq-num>true</ext-seq-num>\n                <seq-overflow>false</seq-overflow>\n                <mode>transport</mode>\n                <protocol-parameters>esp</protocol-parameters>\n                <esp-algorithms>\n                   <!--AUTH_HMAC_SHA1_96-->\n                   <integrity>2</integrity>\n                   <!--ENCR_AES_CBC -->\n                   <encryption>\n                     <id>1</id>\n                     <algorithm-type>12</algorithm-type>\n                      <key-length>128</key-length>\n                   </encryption>\n                   <encryption>\n                     <id>2</id>\n                     <algorithm-type>3</algorithm-type>\n                   </encryption>\n                </esp-algorithms>\n              </ipsec-sa-cfg>\n            </processing-info>\n          </ipsec-policy-config>\n        </spd-entry>\n        <spd-entry>\n          <name>out/trans/2001:db8:123::100/2001:db8:123::200</name>\n          <direction>outbound</direction>\n          <reqid>1</reqid>\n          <ipsec-policy-config>\n            <traffic-selector>\n              <local-prefix>2001:db8:123::100/128</local-prefix>\n              <remote-prefix>2001:db8:123::200/128</remote-prefix>\n              <inner-protocol>any</inner-protocol>\n            </traffic-selector>\n            <processing-info>\n              <action>protect</action>\n              <ipsec-sa-cfg>\n                <ext-seq-num>true</ext-seq-num>\n                <seq-overflow>false</seq-overflow>\n                <mode>transport</mode>\n                <protocol-parameters>esp</protocol-parameters>\n                <esp-algorithms>\n                  <!-- AUTH_HMAC_SHA1_96 -->\n                  <integrity>2</integrity>\n                  <!-- ENCR_AES_CBC -->\n                  <encryption>\n                     <id>1</id>\n                     <algorithm-type>12</algorithm-type>\n                     <key-length>128</key-length>\n                  </encryption>\n                  <encryption>\n                     <id>2</id>\n                     <algorithm-type>3</algorithm-type>\n                  </encryption>\n                </esp-algorithms>\n               </ipsec-sa-cfg>\n             </processing-info>\n           </ipsec-policy-config>\n        </spd-entry>\n     </spd>\n     <sad>\n       <sad-entry>\n         <name>out/trans/2001:db8:123::100/2001:db8:123::200</name>\n         <reqid>1</reqid>\n         <ipsec-sa-config>\n            <spi>34501</spi>\n            <ext-seq-num>true</ext-seq-num>\n            <seq-overflow>false</seq-overflow>\n            <anti-replay-window-size>64</anti-replay-window-size>\n            <traffic-selector>\n              <local-prefix>2001:db8:123::100/128</local-prefix>\n              <remote-prefix>2001:db8:123::200/128</remote-prefix>\n                 <inner-protocol>any</inner-protocol>\n             </traffic-selector>\n             <protocol-parameters>esp</protocol-parameters>\n             <mode>transport</mode>\n             <esp-sa>\n               <encryption>\n                  <!-- //ENCR_AES_CBC -->\n                  <encryption-algorithm>12</encryption-algorithm>\n                  <key>01:23:45:67:89:AB:CE:DF</key>\n                  <iv>01:23:45:67:89:AB:CE:DF</iv>\n               </encryption>\n               <integrity>\n                  <!-- //AUTH_HMAC_SHA1_96 -->\n                  <integrity-algorithm>2</integrity-algorithm>\n                  <key>01:23:45:67:89:AB:CE:DF</key>\n               </integrity>\n             </esp-sa>\n         </ipsec-sa-config>\n       </sad-entry>\n       <sad-entry>\n          <name>in/trans/2001:db8:123::200/2001:db8:123::100</name>\n          <reqid>1</reqid>\n          <ipsec-sa-config>\n              <spi>34502</spi>\n              <ext-seq-num>true</ext-seq-num>\n              <seq-overflow>false</seq-overflow>\n              <anti-replay-window-size>64</anti-replay-window-size>\n              <traffic-selector>\n                 <local-prefix>2001:db8:123::200/128</local-prefix>\n                 <remote-prefix>2001:db8:123::100/128</remote-prefix>\n                 <inner-protocol>any</inner-protocol>\n              </traffic-selector>\n              <protocol-parameters>esp</protocol-parameters>\n              <mode>transport</mode>\n              <esp-sa>\n                 <encryption>\n                    <!-- //ENCR_AES_CBC -->\n                    <encryption-algorithm>12</encryption-algorithm>\n                    <key>01:23:45:67:89:AB:CE:DF</key>\n                    <iv>01:23:45:67:89:AB:CE:DF</iv>\n                 </encryption>\n                 <integrity>\n                    <!-- //AUTH_HMAC_SHA1_96 -->\n                    <integrity-algorithm>2</integrity-algorithm>\n                    <key>01:23:45:67:89:AB:CE:DF</key>\n                 </integrity>\n               </esp-sa>\n               <sa-lifetime-hard>\n                  <bytes>2000000</bytes>\n                  <packets>2000</packets>\n                  <time>60</time>\n                  <idle>120</idle>\n               </sa-lifetime-hard>\n               <sa-lifetime-soft>\n                  <bytes>1000000</bytes>\n                  <packets>1000</packets>\n                  <time>30</time>\n                  <idle>60</idle>\n                  <action>replace</action>\n               </sa-lifetime-soft>\n         </ipsec-sa-config>\n       </sad-entry>\n    </sad>\n</ipsec-ikeless>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<sadb-expire xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\">\n<ipsec-sa-name>in/trans/2001:db8:123::200/2001:db8:123::100\n</ipsec-sa-name>\n    <soft-lifetime-expire>true</soft-lifetime-expire>\n       <lifetime-current>\n          <bytes>1000000</bytes>\n          <packets>1000</packets>\n          <time>30</time>\n          <idle>60</idle>\n       </lifetime-current>\n</sadb-expire>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<sadb-acquire xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\">\n    <ipsec-policy-name>in/trans/2001:db8:123::200/2001:db8:123::100\n    </ipsec-policy-name>\n    <traffic-selector>\n        <local-prefix>2001:db8:123::200/128</local-prefix>\n        <remote-prefix>2001:db8:123::100/128</remote-prefix>\n        <inner-protocol>any</inner-protocol>\n         <local-ports>\n              <start>0</start>\n              <end>0</end>\n         </local-ports>\n         <remote-ports>\n              <start>0</start>\n              <end>0</end>\n         </remote-ports>\n    </traffic-selector>\n</sadb-acquire>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<sadb-seq-overflow\n    xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\">\n      <ipsec-sa-name>in/trans/2001:db8:123::200/2001:db8:123::100\n      </ipsec-sa-name>\n</sadb-seq-overflow>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 0,
      "text": "<sadb-bad-spi\n         xmlns=\"urn:ietf:params:xml:ns:yang:ietf-i2nsf-ikeless\">\n        <spi>666</spi>\n</sadb-bad-spi>",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 3,
      "text": "       +----------------------------------------+\n       |  I2NSF User  (IPsec Management System) |\n       +----------------------------------------+\n                 |\n        (1)    Flow-based    I2NSF Consumer-Facing\n            Protection Policy       Interface\n                 |\n       +---------|------------------------------+\n       |         |                              |\n       |         |   I2NSF Controller           |\n       |         V                              |\n       |   +--------------+ (2)+--------------+ |\n       |   |Translate into|--->|   NETCONF/   | |\n       |   |IPsec Policies|    |   RESTCONF   | |\n       |   +--------------+    +--------------+ |\n       |                          |     |       |\n       |                          |     |       |\n       +--------------------------|-----|-------+\n                                  |     |\n      I2NSF NSF-Facing Interface  |     |\n                                  | (3) |\n        |-------------------------+     +---|\n        V                                   V\n+----------------------+         +----------------------+\n|       NSF A          |         |        NSF B         |\n| IKEv2/IPsec(SPD/PAD) |         | IKEv2/IPsec(SPD/PAD) |\n+----------------------+         +----------------------+",
      "raw": true,
      "zh-CHS": " "
    },
    {
      "indent": 2,
      "text": "      +----------------------------------------+\n      | I2NSF User  (IPsec Management System)  |\n      +----------------------------------------+\n                |\n     (1)   Flow-based       I2NSF Consumer-Facing\n        Protection Policy      Interface\n                |\n      +---------|------------------------------+\n      |         |                              |\n      |         |   I2NSF Controller           |\n      |         V                              |\n      |  +--------------+ (2) +--------------+ |\n      |  |Translate into|---->|   NETCONF/   | |\n      |  |IPsec Policies|     |   RESTCONF   | |\n      |  +--------------+     +--------------+ |\n      |                         |     |        |\n      +-------------------------|-----|--------+\n                                |     |\n     I2NSF NSF-Facing Interface |     |\n                                | (3) |\n         |----------------------+     +--|\n         V                               V\n+----------------+             +----------------+\n|     NSF A      |             |     NSF B      |\n| IPsec(SPD/SAD) |             | IPsec(SPD/SAD) |\n+----------------+             +----------------+",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}